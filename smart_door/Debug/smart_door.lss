
smart_door.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f0c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c4  00800060  00003f0c  00003f80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003144  00000000  00000000  00004044  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000016d1  00000000  00000000  00007188  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00008859  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00008999  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00008b09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000a752  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000b63d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000c3ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000c54c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000c7d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000cfa7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 32       	cpi	r26, 0x24	; 36
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <main>
      7a:	0c 94 84 1f 	jmp	0x3f08	; 0x3f08 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 1c 1f 	jmp	0x3e38	; 0x3e38 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab e1       	ldi	r26, 0x1B	; 27
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 38 1f 	jmp	0x3e70	; 0x3e70 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 28 1f 	jmp	0x3e50	; 0x3e50 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 44 1f 	jmp	0x3e88	; 0x3e88 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 28 1f 	jmp	0x3e50	; 0x3e50 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 44 1f 	jmp	0x3e88	; 0x3e88 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 1c 1f 	jmp	0x3e38	; 0x3e38 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b e1       	ldi	r24, 0x1B	; 27
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 38 1f 	jmp	0x3e70	; 0x3e70 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 28 1f 	jmp	0x3e50	; 0x3e50 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 44 1f 	jmp	0x3e88	; 0x3e88 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 28 1f 	jmp	0x3e50	; 0x3e50 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 44 1f 	jmp	0x3e88	; 0x3e88 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 28 1f 	jmp	0x3e50	; 0x3e50 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 44 1f 	jmp	0x3e88	; 0x3e88 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 2c 1f 	jmp	0x3e58	; 0x3e58 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 48 1f 	jmp	0x3e90	; 0x3e90 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <USART_Init>:
#include "UART.h"
#define BAUD_PRESCALE ((F_CPU / (UART_BAUDRATE * 8UL))-1)
void USART_Init (void)					// function for initialization the UART
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	UCSRA = (1<<U2X);     // Enable Double speed mode
     b3e:	eb e2       	ldi	r30, 0x2B	; 43
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	82 e0       	ldi	r24, 0x02	; 2
     b44:	80 83       	st	Z, r24
	 * Disable for RX complete interrupt
	 * Disable for TX complete interrupt
	 * Disable for UDR empty register interrupt
	 * RXB8 & TXB not Used
	 */
	UCSRB = (1<<RXEN) | (1<<TXEN); // Enable receiver (RXEN = 1) and Enable Transmitter (TXEN = 1)
     b46:	ea e2       	ldi	r30, 0x2A	; 42
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	88 e1       	ldi	r24, 0x18	; 24
     b4c:	80 83       	st	Z, r24
	 * USBS = 0 for 1 stop bit
	 * UCSZ1:0 = 1 (8-Bit data length)
	 * UCPOL = 0  (Used with Synchronous mode Only)
	 */

	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
     b4e:	e0 e4       	ldi	r30, 0x40	; 64
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	86 e8       	ldi	r24, 0x86	; 134
     b54:	80 83       	st	Z, r24

	// Set value of UBRR register with the baud rate (9600)
	UBRRH = BAUD_PRESCALE >> 8;
     b56:	e0 e4       	ldi	r30, 0x40	; 64
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
     b5c:	e9 e2       	ldi	r30, 0x29	; 41
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	8f ec       	ldi	r24, 0xCF	; 207
     b62:	80 83       	st	Z, r24

}
     b64:	cf 91       	pop	r28
     b66:	df 91       	pop	r29
     b68:	08 95       	ret

00000b6a <USART_sendByte>:

void USART_sendByte (u8 data)			// Function for sending data byte
{
     b6a:	df 93       	push	r29
     b6c:	cf 93       	push	r28
     b6e:	0f 92       	push	r0
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
     b74:	89 83       	std	Y+1, r24	; 0x01
	while (BIT_IS_CLEAR(UCSRA,UDRE));	//Polling until UDR register is empty and ready to accept data
     b76:	eb e2       	ldi	r30, 0x2B	; 43
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	88 2f       	mov	r24, r24
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	80 72       	andi	r24, 0x20	; 32
     b82:	90 70       	andi	r25, 0x00	; 0
     b84:	00 97       	sbiw	r24, 0x00	; 0
     b86:	b9 f3       	breq	.-18     	; 0xb76 <USART_sendByte+0xc>
	UDR = data;						    //move the data to UDR register
     b88:	ec e2       	ldi	r30, 0x2C	; 44
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	80 83       	st	Z, r24

}
     b90:	0f 90       	pop	r0
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <USART_receiveByte>:

u8 USART_receiveByte (void)				// Function for receiving data byte
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA,RXC));	//Polling until UDR register is full with data
     ba0:	eb e2       	ldi	r30, 0x2B	; 43
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	88 23       	and	r24, r24
     ba8:	dc f7       	brge	.-10     	; 0xba0 <USART_receiveByte+0x8>
	return UDR;							// Return the data from UDR register
     baa:	ec e2       	ldi	r30, 0x2C	; 44
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <USART_sendString>:

void USART_sendString (const u8 *str)	// Function for sending string
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	00 d0       	rcall	.+0      	; 0xbbc <USART_sendString+0x6>
     bbc:	0f 92       	push	r0
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	9b 83       	std	Y+3, r25	; 0x03
     bc4:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
     bc6:	19 82       	std	Y+1, r1	; 0x01
     bc8:	0e c0       	rjmp	.+28     	; 0xbe6 <USART_sendString+0x30>

	while (str[i] != '\0')
	{
		USART_sendByte(str[i]);
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	28 2f       	mov	r18, r24
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	8a 81       	ldd	r24, Y+2	; 0x02
     bd2:	9b 81       	ldd	r25, Y+3	; 0x03
     bd4:	fc 01       	movw	r30, r24
     bd6:	e2 0f       	add	r30, r18
     bd8:	f3 1f       	adc	r31, r19
     bda:	80 81       	ld	r24, Z
     bdc:	0e 94 b5 05 	call	0xb6a	; 0xb6a <USART_sendByte>
		i++;
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	8f 5f       	subi	r24, 0xFF	; 255
     be4:	89 83       	std	Y+1, r24	; 0x01

void USART_sendString (const u8 *str)	// Function for sending string
{
	u8 i = 0;

	while (str[i] != '\0')
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	9b 81       	ldd	r25, Y+3	; 0x03
     bf0:	fc 01       	movw	r30, r24
     bf2:	e2 0f       	add	r30, r18
     bf4:	f3 1f       	adc	r31, r19
     bf6:	80 81       	ld	r24, Z
     bf8:	88 23       	and	r24, r24
     bfa:	39 f7       	brne	.-50     	; 0xbca <USART_sendString+0x14>
	{
		USART_sendByte(str[i]);
		i++;
	}
}
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	cf 91       	pop	r28
     c04:	df 91       	pop	r29
     c06:	08 95       	ret

00000c08 <USART_receiveString>:

void USART_receiveString (u8 *str)		// function for receiving string
{
     c08:	0f 93       	push	r16
     c0a:	1f 93       	push	r17
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	00 d0       	rcall	.+0      	; 0xc12 <USART_receiveString+0xa>
     c12:	0f 92       	push	r0
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
     c18:	9b 83       	std	Y+3, r25	; 0x03
     c1a:	8a 83       	std	Y+2, r24	; 0x02

	u8 i = 0;
     c1c:	19 82       	std	Y+1, r1	; 0x01
	str[i] = USART_receiveByte();
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	28 2f       	mov	r18, r24
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	8a 81       	ldd	r24, Y+2	; 0x02
     c26:	9b 81       	ldd	r25, Y+3	; 0x03
     c28:	8c 01       	movw	r16, r24
     c2a:	02 0f       	add	r16, r18
     c2c:	13 1f       	adc	r17, r19
     c2e:	0e 94 cc 05 	call	0xb98	; 0xb98 <USART_receiveByte>
     c32:	f8 01       	movw	r30, r16
     c34:	80 83       	st	Z, r24
     c36:	0f c0       	rjmp	.+30     	; 0xc56 <USART_receiveString+0x4e>
	while (str[i] != "#")
	{
		i++;
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	8f 5f       	subi	r24, 0xFF	; 255
     c3c:	89 83       	std	Y+1, r24	; 0x01
		str[i] =USART_receiveByte();
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	9b 81       	ldd	r25, Y+3	; 0x03
     c48:	8c 01       	movw	r16, r24
     c4a:	02 0f       	add	r16, r18
     c4c:	13 1f       	adc	r17, r19
     c4e:	0e 94 cc 05 	call	0xb98	; 0xb98 <USART_receiveByte>
     c52:	f8 01       	movw	r30, r16
     c54:	80 83       	st	Z, r24
void USART_receiveString (u8 *str)		// function for receiving string
{

	u8 i = 0;
	str[i] = USART_receiveByte();
	while (str[i] != "#")
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	8a 81       	ldd	r24, Y+2	; 0x02
     c5e:	9b 81       	ldd	r25, Y+3	; 0x03
     c60:	fc 01       	movw	r30, r24
     c62:	e2 0f       	add	r30, r18
     c64:	f3 1f       	adc	r31, r19
     c66:	80 81       	ld	r24, Z
     c68:	88 2f       	mov	r24, r24
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 36       	cpi	r24, 0x60	; 96
     c70:	9f 07       	cpc	r25, r31
     c72:	11 f7       	brne	.-60     	; 0xc38 <USART_receiveString+0x30>
	{
		i++;
		str[i] =USART_receiveByte();
	}
	str[i] = '\0';
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	8a 81       	ldd	r24, Y+2	; 0x02
     c7c:	9b 81       	ldd	r25, Y+3	; 0x03
     c7e:	fc 01       	movw	r30, r24
     c80:	e2 0f       	add	r30, r18
     c82:	f3 1f       	adc	r31, r19
     c84:	10 82       	st	Z, r1
}
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	08 95       	ret

00000c96 <Set_PinDir>:
/*Function Definition*/

//	For specific Bit

void Set_PinDir (GroupName_t group, PIN_NO_t number, PinDir_t direction)	// Function to set direction of specific bit
{
     c96:	df 93       	push	r29
     c98:	cf 93       	push	r28
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
     c9e:	27 97       	sbiw	r28, 0x07	; 7
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	de bf       	out	0x3e, r29	; 62
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	cd bf       	out	0x3d, r28	; 61
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	6a 83       	std	Y+2, r22	; 0x02
     cae:	4b 83       	std	Y+3, r20	; 0x03
	if(direction == OUTPUT)
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <Set_PinDir+0x22>
     cb6:	6f c0       	rjmp	.+222    	; 0xd96 <Set_PinDir+0x100>
	{
		switch (group)
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	3f 83       	std	Y+7, r19	; 0x07
     cc0:	2e 83       	std	Y+6, r18	; 0x06
     cc2:	8e 81       	ldd	r24, Y+6	; 0x06
     cc4:	9f 81       	ldd	r25, Y+7	; 0x07
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	91 05       	cpc	r25, r1
     cca:	49 f1       	breq	.+82     	; 0xd1e <Set_PinDir+0x88>
     ccc:	2e 81       	ldd	r18, Y+6	; 0x06
     cce:	3f 81       	ldd	r19, Y+7	; 0x07
     cd0:	22 30       	cpi	r18, 0x02	; 2
     cd2:	31 05       	cpc	r19, r1
     cd4:	2c f4       	brge	.+10     	; 0xce0 <Set_PinDir+0x4a>
     cd6:	8e 81       	ldd	r24, Y+6	; 0x06
     cd8:	9f 81       	ldd	r25, Y+7	; 0x07
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	61 f0       	breq	.+24     	; 0xcf6 <Set_PinDir+0x60>
     cde:	ce c0       	rjmp	.+412    	; 0xe7c <Set_PinDir+0x1e6>
     ce0:	2e 81       	ldd	r18, Y+6	; 0x06
     ce2:	3f 81       	ldd	r19, Y+7	; 0x07
     ce4:	22 30       	cpi	r18, 0x02	; 2
     ce6:	31 05       	cpc	r19, r1
     ce8:	71 f1       	breq	.+92     	; 0xd46 <Set_PinDir+0xb0>
     cea:	8e 81       	ldd	r24, Y+6	; 0x06
     cec:	9f 81       	ldd	r25, Y+7	; 0x07
     cee:	83 30       	cpi	r24, 0x03	; 3
     cf0:	91 05       	cpc	r25, r1
     cf2:	e9 f1       	breq	.+122    	; 0xd6e <Set_PinDir+0xd8>
     cf4:	c3 c0       	rjmp	.+390    	; 0xe7c <Set_PinDir+0x1e6>
		{
		case PORT_A:
			SET_BIT(DDRA,number);
     cf6:	aa e3       	ldi	r26, 0x3A	; 58
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	ea e3       	ldi	r30, 0x3A	; 58
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	48 2f       	mov	r20, r24
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 2e       	mov	r0, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <Set_PinDir+0x7e>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	0a 94       	dec	r0
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <Set_PinDir+0x7a>
     d18:	84 2b       	or	r24, r20
     d1a:	8c 93       	st	X, r24
     d1c:	af c0       	rjmp	.+350    	; 0xe7c <Set_PinDir+0x1e6>
			break;
		case PORT_B:
			SET_BIT(DDRB,number);
     d1e:	a7 e3       	ldi	r26, 0x37	; 55
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e7 e3       	ldi	r30, 0x37	; 55
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	48 2f       	mov	r20, r24
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	02 2e       	mov	r0, r18
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <Set_PinDir+0xa6>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	0a 94       	dec	r0
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <Set_PinDir+0xa2>
     d40:	84 2b       	or	r24, r20
     d42:	8c 93       	st	X, r24
     d44:	9b c0       	rjmp	.+310    	; 0xe7c <Set_PinDir+0x1e6>
			break;
		case PORT_C:
			SET_BIT(DDRC,number);
     d46:	a4 e3       	ldi	r26, 0x34	; 52
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e4 e3       	ldi	r30, 0x34	; 52
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	48 2f       	mov	r20, r24
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	02 2e       	mov	r0, r18
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <Set_PinDir+0xce>
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	0a 94       	dec	r0
     d66:	e2 f7       	brpl	.-8      	; 0xd60 <Set_PinDir+0xca>
     d68:	84 2b       	or	r24, r20
     d6a:	8c 93       	st	X, r24
     d6c:	87 c0       	rjmp	.+270    	; 0xe7c <Set_PinDir+0x1e6>
			break;
		case PORT_D:
			SET_BIT(DDRD,number);
     d6e:	a1 e3       	ldi	r26, 0x31	; 49
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e1 e3       	ldi	r30, 0x31	; 49
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 2e       	mov	r0, r18
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <Set_PinDir+0xf6>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	0a 94       	dec	r0
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <Set_PinDir+0xf2>
     d90:	84 2b       	or	r24, r20
     d92:	8c 93       	st	X, r24
     d94:	73 c0       	rjmp	.+230    	; 0xe7c <Set_PinDir+0x1e6>
			break;
		}
	}
	else
	{
		switch (group)
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	3d 83       	std	Y+5, r19	; 0x05
     d9e:	2c 83       	std	Y+4, r18	; 0x04
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	9d 81       	ldd	r25, Y+5	; 0x05
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 05       	cpc	r25, r1
     da8:	59 f1       	breq	.+86     	; 0xe00 <Set_PinDir+0x16a>
     daa:	2c 81       	ldd	r18, Y+4	; 0x04
     dac:	3d 81       	ldd	r19, Y+5	; 0x05
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	2c f4       	brge	.+10     	; 0xdbe <Set_PinDir+0x128>
     db4:	8c 81       	ldd	r24, Y+4	; 0x04
     db6:	9d 81       	ldd	r25, Y+5	; 0x05
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	69 f0       	breq	.+26     	; 0xdd6 <Set_PinDir+0x140>
     dbc:	5f c0       	rjmp	.+190    	; 0xe7c <Set_PinDir+0x1e6>
     dbe:	2c 81       	ldd	r18, Y+4	; 0x04
     dc0:	3d 81       	ldd	r19, Y+5	; 0x05
     dc2:	22 30       	cpi	r18, 0x02	; 2
     dc4:	31 05       	cpc	r19, r1
     dc6:	89 f1       	breq	.+98     	; 0xe2a <Set_PinDir+0x194>
     dc8:	8c 81       	ldd	r24, Y+4	; 0x04
     dca:	9d 81       	ldd	r25, Y+5	; 0x05
     dcc:	83 30       	cpi	r24, 0x03	; 3
     dce:	91 05       	cpc	r25, r1
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <Set_PinDir+0x13e>
     dd2:	40 c0       	rjmp	.+128    	; 0xe54 <Set_PinDir+0x1be>
     dd4:	53 c0       	rjmp	.+166    	; 0xe7c <Set_PinDir+0x1e6>
		{
		case PORT_A:
			CLEAR_BIT(DDRA,number);
     dd6:	aa e3       	ldi	r26, 0x3A	; 58
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	ea e3       	ldi	r30, 0x3A	; 58
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <Set_PinDir+0x15e>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <Set_PinDir+0x15a>
     df8:	80 95       	com	r24
     dfa:	84 23       	and	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	3e c0       	rjmp	.+124    	; 0xe7c <Set_PinDir+0x1e6>
			break;
		case PORT_B:
			CLEAR_BIT(DDRB,number);
     e00:	a7 e3       	ldi	r26, 0x37	; 55
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e7 e3       	ldi	r30, 0x37	; 55
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	48 2f       	mov	r20, r24
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	02 2e       	mov	r0, r18
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <Set_PinDir+0x188>
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	0a 94       	dec	r0
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <Set_PinDir+0x184>
     e22:	80 95       	com	r24
     e24:	84 23       	and	r24, r20
     e26:	8c 93       	st	X, r24
     e28:	29 c0       	rjmp	.+82     	; 0xe7c <Set_PinDir+0x1e6>
			break;
		case PORT_C:
			CLEAR_BIT(DDRC,number);
     e2a:	a4 e3       	ldi	r26, 0x34	; 52
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e4 e3       	ldi	r30, 0x34	; 52
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <Set_PinDir+0x1b2>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <Set_PinDir+0x1ae>
     e4c:	80 95       	com	r24
     e4e:	84 23       	and	r24, r20
     e50:	8c 93       	st	X, r24
     e52:	14 c0       	rjmp	.+40     	; 0xe7c <Set_PinDir+0x1e6>
			break;
		case PORT_D:
			CLEAR_BIT(DDRD,number);
     e54:	a1 e3       	ldi	r26, 0x31	; 49
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e1 e3       	ldi	r30, 0x31	; 49
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <Set_PinDir+0x1dc>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <Set_PinDir+0x1d8>
     e76:	80 95       	com	r24
     e78:	84 23       	and	r24, r20
     e7a:	8c 93       	st	X, r24
			break;
		}
	}
}
     e7c:	27 96       	adiw	r28, 0x07	; 7
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <Set_PinLevel>:

void Set_PinLevel (GroupName_t group, PIN_NO_t number, PinLevel_t level )	// Function to set level of specific bit
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	27 97       	sbiw	r28, 0x07	; 7
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	de bf       	out	0x3e, r29	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	cd bf       	out	0x3d, r28	; 61
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	6a 83       	std	Y+2, r22	; 0x02
     ea6:	4b 83       	std	Y+3, r20	; 0x03
	if (level == HIGH)
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	81 30       	cpi	r24, 0x01	; 1
     eac:	09 f0       	breq	.+2      	; 0xeb0 <Set_PinLevel+0x22>
     eae:	6f c0       	rjmp	.+222    	; 0xf8e <Set_PinLevel+0x100>
	{
		switch (group)
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	3f 83       	std	Y+7, r19	; 0x07
     eb8:	2e 83       	std	Y+6, r18	; 0x06
     eba:	8e 81       	ldd	r24, Y+6	; 0x06
     ebc:	9f 81       	ldd	r25, Y+7	; 0x07
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	91 05       	cpc	r25, r1
     ec2:	49 f1       	breq	.+82     	; 0xf16 <Set_PinLevel+0x88>
     ec4:	2e 81       	ldd	r18, Y+6	; 0x06
     ec6:	3f 81       	ldd	r19, Y+7	; 0x07
     ec8:	22 30       	cpi	r18, 0x02	; 2
     eca:	31 05       	cpc	r19, r1
     ecc:	2c f4       	brge	.+10     	; 0xed8 <Set_PinLevel+0x4a>
     ece:	8e 81       	ldd	r24, Y+6	; 0x06
     ed0:	9f 81       	ldd	r25, Y+7	; 0x07
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	61 f0       	breq	.+24     	; 0xeee <Set_PinLevel+0x60>
     ed6:	ce c0       	rjmp	.+412    	; 0x1074 <Set_PinLevel+0x1e6>
     ed8:	2e 81       	ldd	r18, Y+6	; 0x06
     eda:	3f 81       	ldd	r19, Y+7	; 0x07
     edc:	22 30       	cpi	r18, 0x02	; 2
     ede:	31 05       	cpc	r19, r1
     ee0:	71 f1       	breq	.+92     	; 0xf3e <Set_PinLevel+0xb0>
     ee2:	8e 81       	ldd	r24, Y+6	; 0x06
     ee4:	9f 81       	ldd	r25, Y+7	; 0x07
     ee6:	83 30       	cpi	r24, 0x03	; 3
     ee8:	91 05       	cpc	r25, r1
     eea:	e9 f1       	breq	.+122    	; 0xf66 <Set_PinLevel+0xd8>
     eec:	c3 c0       	rjmp	.+390    	; 0x1074 <Set_PinLevel+0x1e6>
		{
		case PORT_A:
			SET_BIT(PORTA,number);
     eee:	ab e3       	ldi	r26, 0x3B	; 59
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	eb e3       	ldi	r30, 0x3B	; 59
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <Set_PinLevel+0x7e>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <Set_PinLevel+0x7a>
     f10:	84 2b       	or	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	af c0       	rjmp	.+350    	; 0x1074 <Set_PinLevel+0x1e6>
			break;
		case PORT_B:
			SET_BIT(PORTB,number);
     f16:	a8 e3       	ldi	r26, 0x38	; 56
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e8 e3       	ldi	r30, 0x38	; 56
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <Set_PinLevel+0xa6>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <Set_PinLevel+0xa2>
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	9b c0       	rjmp	.+310    	; 0x1074 <Set_PinLevel+0x1e6>
			break;
		case PORT_C:
			SET_BIT(PORTC,number);
     f3e:	a5 e3       	ldi	r26, 0x35	; 53
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e5 e3       	ldi	r30, 0x35	; 53
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <Set_PinLevel+0xce>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <Set_PinLevel+0xca>
     f60:	84 2b       	or	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	87 c0       	rjmp	.+270    	; 0x1074 <Set_PinLevel+0x1e6>
			break;
		case PORT_D:
			SET_BIT(PORTD,number);
     f66:	a2 e3       	ldi	r26, 0x32	; 50
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e2 e3       	ldi	r30, 0x32	; 50
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 2e       	mov	r0, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <Set_PinLevel+0xf6>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <Set_PinLevel+0xf2>
     f88:	84 2b       	or	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	73 c0       	rjmp	.+230    	; 0x1074 <Set_PinLevel+0x1e6>
			break;
		}
	}
	else
	{
		switch (group)
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	3d 83       	std	Y+5, r19	; 0x05
     f96:	2c 83       	std	Y+4, r18	; 0x04
     f98:	8c 81       	ldd	r24, Y+4	; 0x04
     f9a:	9d 81       	ldd	r25, Y+5	; 0x05
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	91 05       	cpc	r25, r1
     fa0:	59 f1       	breq	.+86     	; 0xff8 <Set_PinLevel+0x16a>
     fa2:	2c 81       	ldd	r18, Y+4	; 0x04
     fa4:	3d 81       	ldd	r19, Y+5	; 0x05
     fa6:	22 30       	cpi	r18, 0x02	; 2
     fa8:	31 05       	cpc	r19, r1
     faa:	2c f4       	brge	.+10     	; 0xfb6 <Set_PinLevel+0x128>
     fac:	8c 81       	ldd	r24, Y+4	; 0x04
     fae:	9d 81       	ldd	r25, Y+5	; 0x05
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	69 f0       	breq	.+26     	; 0xfce <Set_PinLevel+0x140>
     fb4:	5f c0       	rjmp	.+190    	; 0x1074 <Set_PinLevel+0x1e6>
     fb6:	2c 81       	ldd	r18, Y+4	; 0x04
     fb8:	3d 81       	ldd	r19, Y+5	; 0x05
     fba:	22 30       	cpi	r18, 0x02	; 2
     fbc:	31 05       	cpc	r19, r1
     fbe:	89 f1       	breq	.+98     	; 0x1022 <Set_PinLevel+0x194>
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	9d 81       	ldd	r25, Y+5	; 0x05
     fc4:	83 30       	cpi	r24, 0x03	; 3
     fc6:	91 05       	cpc	r25, r1
     fc8:	09 f4       	brne	.+2      	; 0xfcc <Set_PinLevel+0x13e>
     fca:	40 c0       	rjmp	.+128    	; 0x104c <Set_PinLevel+0x1be>
     fcc:	53 c0       	rjmp	.+166    	; 0x1074 <Set_PinLevel+0x1e6>
		{
		case PORT_A:
			CLEAR_BIT(PORTA,number);
     fce:	ab e3       	ldi	r26, 0x3B	; 59
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	eb e3       	ldi	r30, 0x3B	; 59
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <Set_PinLevel+0x15e>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <Set_PinLevel+0x15a>
     ff0:	80 95       	com	r24
     ff2:	84 23       	and	r24, r20
     ff4:	8c 93       	st	X, r24
     ff6:	3e c0       	rjmp	.+124    	; 0x1074 <Set_PinLevel+0x1e6>
			break;
		case PORT_B:
			CLEAR_BIT(PORTB,number);
     ff8:	a8 e3       	ldi	r26, 0x38	; 56
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e8 e3       	ldi	r30, 0x38	; 56
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <Set_PinLevel+0x188>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <Set_PinLevel+0x184>
    101a:	80 95       	com	r24
    101c:	84 23       	and	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	29 c0       	rjmp	.+82     	; 0x1074 <Set_PinLevel+0x1e6>
			break;
		case PORT_C:
			CLEAR_BIT(PORTC,number);
    1022:	a5 e3       	ldi	r26, 0x35	; 53
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e5 e3       	ldi	r30, 0x35	; 53
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <Set_PinLevel+0x1b2>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <Set_PinLevel+0x1ae>
    1044:	80 95       	com	r24
    1046:	84 23       	and	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	14 c0       	rjmp	.+40     	; 0x1074 <Set_PinLevel+0x1e6>
			break;
		case PORT_D:
			CLEAR_BIT(PORTD,number);
    104c:	a2 e3       	ldi	r26, 0x32	; 50
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e2 e3       	ldi	r30, 0x32	; 50
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <Set_PinLevel+0x1dc>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <Set_PinLevel+0x1d8>
    106e:	80 95       	com	r24
    1070:	84 23       	and	r24, r20
    1072:	8c 93       	st	X, r24
			break;
		}
	}
}
    1074:	27 96       	adiw	r28, 0x07	; 7
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	cd bf       	out	0x3d, r28	; 61
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <Read_PinLevel>:

RET_VALUE_t Read_PinLevel (GroupName_t group, PIN_NO_t number)		// Function to read level of specific bit
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	00 d0       	rcall	.+0      	; 0x108c <Read_PinLevel+0x6>
    108c:	00 d0       	rcall	.+0      	; 0x108e <Read_PinLevel+0x8>
    108e:	0f 92       	push	r0
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	8a 83       	std	Y+2, r24	; 0x02
    1096:	6b 83       	std	Y+3, r22	; 0x03
	RET_VALUE_t ret;
	switch (group)
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	3d 83       	std	Y+5, r19	; 0x05
    10a0:	2c 83       	std	Y+4, r18	; 0x04
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	9d 81       	ldd	r25, Y+5	; 0x05
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	91 05       	cpc	r25, r1
    10aa:	39 f1       	breq	.+78     	; 0x10fa <Read_PinLevel+0x74>
    10ac:	2c 81       	ldd	r18, Y+4	; 0x04
    10ae:	3d 81       	ldd	r19, Y+5	; 0x05
    10b0:	22 30       	cpi	r18, 0x02	; 2
    10b2:	31 05       	cpc	r19, r1
    10b4:	2c f4       	brge	.+10     	; 0x10c0 <Read_PinLevel+0x3a>
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	61 f0       	breq	.+24     	; 0x10d6 <Read_PinLevel+0x50>
    10be:	52 c0       	rjmp	.+164    	; 0x1164 <Read_PinLevel+0xde>
    10c0:	2c 81       	ldd	r18, Y+4	; 0x04
    10c2:	3d 81       	ldd	r19, Y+5	; 0x05
    10c4:	22 30       	cpi	r18, 0x02	; 2
    10c6:	31 05       	cpc	r19, r1
    10c8:	51 f1       	breq	.+84     	; 0x111e <Read_PinLevel+0x98>
    10ca:	8c 81       	ldd	r24, Y+4	; 0x04
    10cc:	9d 81       	ldd	r25, Y+5	; 0x05
    10ce:	83 30       	cpi	r24, 0x03	; 3
    10d0:	91 05       	cpc	r25, r1
    10d2:	b9 f1       	breq	.+110    	; 0x1142 <Read_PinLevel+0xbc>
    10d4:	47 c0       	rjmp	.+142    	; 0x1164 <Read_PinLevel+0xde>
	{
	case PORT_A:
		ret = BIT_IS_SET(PINA,number);
    10d6:	e9 e3       	ldi	r30, 0x39	; 57
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 2e       	mov	r0, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <Read_PinLevel+0x6a>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <Read_PinLevel+0x66>
    10f4:	84 23       	and	r24, r20
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	35 c0       	rjmp	.+106    	; 0x1164 <Read_PinLevel+0xde>
		break;
	case PORT_B:
		ret = BIT_IS_SET(PINB,number);
    10fa:	e6 e3       	ldi	r30, 0x36	; 54
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	48 2f       	mov	r20, r24
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 2e       	mov	r0, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <Read_PinLevel+0x8e>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <Read_PinLevel+0x8a>
    1118:	84 23       	and	r24, r20
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	23 c0       	rjmp	.+70     	; 0x1164 <Read_PinLevel+0xde>
		break;
	case PORT_C:
		ret = BIT_IS_SET(PINC,number);
    111e:	e3 e3       	ldi	r30, 0x33	; 51
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 2e       	mov	r0, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <Read_PinLevel+0xb2>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	0a 94       	dec	r0
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <Read_PinLevel+0xae>
    113c:	84 23       	and	r24, r20
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	11 c0       	rjmp	.+34     	; 0x1164 <Read_PinLevel+0xde>
		break;
	case PORT_D:
		ret = BIT_IS_SET(PIND,number);
    1142:	e0 e3       	ldi	r30, 0x30	; 48
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <Read_PinLevel+0xd6>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <Read_PinLevel+0xd2>
    1160:	84 23       	and	r24, r20
    1162:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return ret;
    1164:	89 81       	ldd	r24, Y+1	; 0x01
}
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <Set_GroupDir>:

//	 For Group Of Pins

void Set_GroupDir (GroupName_t group, u8 value)							// Function to set direction of group of pins
{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	00 d0       	rcall	.+0      	; 0x117c <Set_GroupDir+0x6>
    117c:	00 d0       	rcall	.+0      	; 0x117e <Set_GroupDir+0x8>
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	6a 83       	std	Y+2, r22	; 0x02
	switch (group)
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	3c 83       	std	Y+4, r19	; 0x04
    118e:	2b 83       	std	Y+3, r18	; 0x03
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	91 05       	cpc	r25, r1
    1198:	d1 f0       	breq	.+52     	; 0x11ce <Set_GroupDir+0x58>
    119a:	2b 81       	ldd	r18, Y+3	; 0x03
    119c:	3c 81       	ldd	r19, Y+4	; 0x04
    119e:	22 30       	cpi	r18, 0x02	; 2
    11a0:	31 05       	cpc	r19, r1
    11a2:	2c f4       	brge	.+10     	; 0x11ae <Set_GroupDir+0x38>
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	61 f0       	breq	.+24     	; 0x11c4 <Set_GroupDir+0x4e>
    11ac:	1e c0       	rjmp	.+60     	; 0x11ea <Set_GroupDir+0x74>
    11ae:	2b 81       	ldd	r18, Y+3	; 0x03
    11b0:	3c 81       	ldd	r19, Y+4	; 0x04
    11b2:	22 30       	cpi	r18, 0x02	; 2
    11b4:	31 05       	cpc	r19, r1
    11b6:	81 f0       	breq	.+32     	; 0x11d8 <Set_GroupDir+0x62>
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	9c 81       	ldd	r25, Y+4	; 0x04
    11bc:	83 30       	cpi	r24, 0x03	; 3
    11be:	91 05       	cpc	r25, r1
    11c0:	81 f0       	breq	.+32     	; 0x11e2 <Set_GroupDir+0x6c>
    11c2:	13 c0       	rjmp	.+38     	; 0x11ea <Set_GroupDir+0x74>
	{
	case PORT_A:
		DDRA = value;
    11c4:	ea e3       	ldi	r30, 0x3A	; 58
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	80 83       	st	Z, r24
    11cc:	0e c0       	rjmp	.+28     	; 0x11ea <Set_GroupDir+0x74>
		break;
	case PORT_B:
		DDRB = value;
    11ce:	e7 e3       	ldi	r30, 0x37	; 55
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	80 83       	st	Z, r24
    11d6:	09 c0       	rjmp	.+18     	; 0x11ea <Set_GroupDir+0x74>
		break;
	case PORT_C:
		DDRC = value;
    11d8:	e4 e3       	ldi	r30, 0x34	; 52
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	80 83       	st	Z, r24
    11e0:	04 c0       	rjmp	.+8      	; 0x11ea <Set_GroupDir+0x74>
		break;
	case PORT_D:
		DDRD = value;
    11e2:	e1 e3       	ldi	r30, 0x31	; 49
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	80 83       	st	Z, r24
		break;
	}
}
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <Set_GroupLevel>:

void Set_GroupLevel (GroupName_t group, u8 value)							// Function to set level of several pins
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <Set_GroupLevel+0x6>
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <Set_GroupLevel+0x8>
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	6a 83       	std	Y+2, r22	; 0x02
	switch (group)
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	3c 83       	std	Y+4, r19	; 0x04
    1210:	2b 83       	std	Y+3, r18	; 0x03
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	91 05       	cpc	r25, r1
    121a:	d1 f0       	breq	.+52     	; 0x1250 <Set_GroupLevel+0x58>
    121c:	2b 81       	ldd	r18, Y+3	; 0x03
    121e:	3c 81       	ldd	r19, Y+4	; 0x04
    1220:	22 30       	cpi	r18, 0x02	; 2
    1222:	31 05       	cpc	r19, r1
    1224:	2c f4       	brge	.+10     	; 0x1230 <Set_GroupLevel+0x38>
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	61 f0       	breq	.+24     	; 0x1246 <Set_GroupLevel+0x4e>
    122e:	1e c0       	rjmp	.+60     	; 0x126c <Set_GroupLevel+0x74>
    1230:	2b 81       	ldd	r18, Y+3	; 0x03
    1232:	3c 81       	ldd	r19, Y+4	; 0x04
    1234:	22 30       	cpi	r18, 0x02	; 2
    1236:	31 05       	cpc	r19, r1
    1238:	81 f0       	breq	.+32     	; 0x125a <Set_GroupLevel+0x62>
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	9c 81       	ldd	r25, Y+4	; 0x04
    123e:	83 30       	cpi	r24, 0x03	; 3
    1240:	91 05       	cpc	r25, r1
    1242:	81 f0       	breq	.+32     	; 0x1264 <Set_GroupLevel+0x6c>
    1244:	13 c0       	rjmp	.+38     	; 0x126c <Set_GroupLevel+0x74>
	{
	case PORT_A:
		PORTA = value;
    1246:	eb e3       	ldi	r30, 0x3B	; 59
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	80 83       	st	Z, r24
    124e:	0e c0       	rjmp	.+28     	; 0x126c <Set_GroupLevel+0x74>
		break;
	case PORT_B:
		PORTB = value;
    1250:	e8 e3       	ldi	r30, 0x38	; 56
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	80 83       	st	Z, r24
    1258:	09 c0       	rjmp	.+18     	; 0x126c <Set_GroupLevel+0x74>
		break;
	case PORT_C:
		PORTC = value;
    125a:	e5 e3       	ldi	r30, 0x35	; 53
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	80 83       	st	Z, r24
    1262:	04 c0       	rjmp	.+8      	; 0x126c <Set_GroupLevel+0x74>
		break;
	case PORT_D:
		PORTD = value;
    1264:	e2 e3       	ldi	r30, 0x32	; 50
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	80 83       	st	Z, r24
		break;
	}
}
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <Keypad_GetPressedKey>:
#endif

/*Function Definition*/

u8 Keypad_GetPressedKey (void)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <Keypad_GetPressedKey+0x6>
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
	u8 row, col;
	while(1)
	{
		for (col = 0; col < N_COL; col++)
    1284:	19 82       	std	Y+1, r1	; 0x01
    1286:	4c c0       	rjmp	.+152    	; 0x1320 <Keypad_GetPressedKey+0xa6>
		{
			KEYPAD_PORT_DIR = (0b00010000<< col);
    1288:	ea e3       	ldi	r30, 0x3A	; 58
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	80 e1       	ldi	r24, 0x10	; 16
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 c0       	rjmp	.+4      	; 0x129c <Keypad_GetPressedKey+0x22>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	2a 95       	dec	r18
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <Keypad_GetPressedKey+0x1e>
    12a0:	80 83       	st	Z, r24

			KEYPAD_PORT_OUT = (~(0b00010000<< col));
    12a2:	eb e3       	ldi	r30, 0x3B	; 59
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	80 e1       	ldi	r24, 0x10	; 16
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 2e       	mov	r0, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <Keypad_GetPressedKey+0x3e>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <Keypad_GetPressedKey+0x3a>
    12bc:	80 95       	com	r24
    12be:	80 83       	st	Z, r24
			for (row = 0; row < N_ROW; row++)
    12c0:	1a 82       	std	Y+2, r1	; 0x02
    12c2:	28 c0       	rjmp	.+80     	; 0x1314 <Keypad_GetPressedKey+0x9a>
			{
				if (BIT_IS_CLEAR(KEYPAD_PORT_IN,row))
    12c4:	e9 e3       	ldi	r30, 0x39	; 57
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	88 2f       	mov	r24, r24
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	a9 01       	movw	r20, r18
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <Keypad_GetPressedKey+0x62>
    12d8:	55 95       	asr	r21
    12da:	47 95       	ror	r20
    12dc:	8a 95       	dec	r24
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <Keypad_GetPressedKey+0x5e>
    12e0:	ca 01       	movw	r24, r20
    12e2:	81 70       	andi	r24, 0x01	; 1
    12e4:	90 70       	andi	r25, 0x00	; 0
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	91 f4       	brne	.+36     	; 0x130e <Keypad_GetPressedKey+0x94>
					#if (N_COL == 3)

					return Keypad_4x3_adjustKeyNumber (((row*N_COL)+col+1));
					#elif (N_COL == 4)

					return Keypad_4x4_adjustKeyNumber (((row*N_COL)+col+1));
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	88 2f       	mov	r24, r24
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	98 2f       	mov	r25, r24
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	89 0f       	add	r24, r25
    12fe:	8f 5f       	subi	r24, 0xFF	; 255
    1300:	0e 94 95 09 	call	0x132a	; 0x132a <Keypad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret
		for (col = 0; col < N_COL; col++)
		{
			KEYPAD_PORT_DIR = (0b00010000<< col);

			KEYPAD_PORT_OUT = (~(0b00010000<< col));
			for (row = 0; row < N_ROW; row++)
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	8f 5f       	subi	r24, 0xFF	; 255
    1312:	8a 83       	std	Y+2, r24	; 0x02
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	84 30       	cpi	r24, 0x04	; 4
    1318:	a8 f2       	brcs	.-86     	; 0x12c4 <Keypad_GetPressedKey+0x4a>
u8 Keypad_GetPressedKey (void)
{
	u8 row, col;
	while(1)
	{
		for (col = 0; col < N_COL; col++)
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	8f 5f       	subi	r24, 0xFF	; 255
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	84 30       	cpi	r24, 0x04	; 4
    1324:	08 f4       	brcc	.+2      	; 0x1328 <Keypad_GetPressedKey+0xae>
    1326:	b0 cf       	rjmp	.-160    	; 0x1288 <Keypad_GetPressedKey+0xe>
    1328:	ad cf       	rjmp	.-166    	; 0x1284 <Keypad_GetPressedKey+0xa>

0000132a <Keypad_4x4_adjustKeyNumber>:


#elif (N_COL == 4)

static u8 Keypad_4x4_adjustKeyNumber (u8 button_number)
{
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	00 d0       	rcall	.+0      	; 0x1330 <Keypad_4x4_adjustKeyNumber+0x6>
    1330:	00 d0       	rcall	.+0      	; 0x1332 <Keypad_4x4_adjustKeyNumber+0x8>
    1332:	0f 92       	push	r0
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	89 83       	std	Y+1, r24	; 0x01
	switch (button_number)
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	3c 83       	std	Y+4, r19	; 0x04
    1342:	2b 83       	std	Y+3, r18	; 0x03
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	9c 81       	ldd	r25, Y+4	; 0x04
    1348:	88 30       	cpi	r24, 0x08	; 8
    134a:	91 05       	cpc	r25, r1
    134c:	09 f4       	brne	.+2      	; 0x1350 <Keypad_4x4_adjustKeyNumber+0x26>
    134e:	70 c0       	rjmp	.+224    	; 0x1430 <Keypad_4x4_adjustKeyNumber+0x106>
    1350:	2b 81       	ldd	r18, Y+3	; 0x03
    1352:	3c 81       	ldd	r19, Y+4	; 0x04
    1354:	29 30       	cpi	r18, 0x09	; 9
    1356:	31 05       	cpc	r19, r1
    1358:	5c f5       	brge	.+86     	; 0x13b0 <Keypad_4x4_adjustKeyNumber+0x86>
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	9c 81       	ldd	r25, Y+4	; 0x04
    135e:	84 30       	cpi	r24, 0x04	; 4
    1360:	91 05       	cpc	r25, r1
    1362:	09 f4       	brne	.+2      	; 0x1366 <Keypad_4x4_adjustKeyNumber+0x3c>
    1364:	59 c0       	rjmp	.+178    	; 0x1418 <Keypad_4x4_adjustKeyNumber+0xee>
    1366:	2b 81       	ldd	r18, Y+3	; 0x03
    1368:	3c 81       	ldd	r19, Y+4	; 0x04
    136a:	25 30       	cpi	r18, 0x05	; 5
    136c:	31 05       	cpc	r19, r1
    136e:	9c f4       	brge	.+38     	; 0x1396 <Keypad_4x4_adjustKeyNumber+0x6c>
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	82 30       	cpi	r24, 0x02	; 2
    1376:	91 05       	cpc	r25, r1
    1378:	09 f4       	brne	.+2      	; 0x137c <Keypad_4x4_adjustKeyNumber+0x52>
    137a:	48 c0       	rjmp	.+144    	; 0x140c <Keypad_4x4_adjustKeyNumber+0xe2>
    137c:	2b 81       	ldd	r18, Y+3	; 0x03
    137e:	3c 81       	ldd	r19, Y+4	; 0x04
    1380:	23 30       	cpi	r18, 0x03	; 3
    1382:	31 05       	cpc	r19, r1
    1384:	0c f0       	brlt	.+2      	; 0x1388 <Keypad_4x4_adjustKeyNumber+0x5e>
    1386:	45 c0       	rjmp	.+138    	; 0x1412 <Keypad_4x4_adjustKeyNumber+0xe8>
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	9c 81       	ldd	r25, Y+4	; 0x04
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	91 05       	cpc	r25, r1
    1390:	09 f4       	brne	.+2      	; 0x1394 <Keypad_4x4_adjustKeyNumber+0x6a>
    1392:	39 c0       	rjmp	.+114    	; 0x1406 <Keypad_4x4_adjustKeyNumber+0xdc>
    1394:	67 c0       	rjmp	.+206    	; 0x1464 <Keypad_4x4_adjustKeyNumber+0x13a>
    1396:	2b 81       	ldd	r18, Y+3	; 0x03
    1398:	3c 81       	ldd	r19, Y+4	; 0x04
    139a:	26 30       	cpi	r18, 0x06	; 6
    139c:	31 05       	cpc	r19, r1
    139e:	09 f4       	brne	.+2      	; 0x13a2 <Keypad_4x4_adjustKeyNumber+0x78>
    13a0:	41 c0       	rjmp	.+130    	; 0x1424 <Keypad_4x4_adjustKeyNumber+0xfa>
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	9c 81       	ldd	r25, Y+4	; 0x04
    13a6:	87 30       	cpi	r24, 0x07	; 7
    13a8:	91 05       	cpc	r25, r1
    13aa:	0c f0       	brlt	.+2      	; 0x13ae <Keypad_4x4_adjustKeyNumber+0x84>
    13ac:	3e c0       	rjmp	.+124    	; 0x142a <Keypad_4x4_adjustKeyNumber+0x100>
    13ae:	37 c0       	rjmp	.+110    	; 0x141e <Keypad_4x4_adjustKeyNumber+0xf4>
    13b0:	2b 81       	ldd	r18, Y+3	; 0x03
    13b2:	3c 81       	ldd	r19, Y+4	; 0x04
    13b4:	2c 30       	cpi	r18, 0x0C	; 12
    13b6:	31 05       	cpc	r19, r1
    13b8:	09 f4       	brne	.+2      	; 0x13bc <Keypad_4x4_adjustKeyNumber+0x92>
    13ba:	46 c0       	rjmp	.+140    	; 0x1448 <Keypad_4x4_adjustKeyNumber+0x11e>
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	9c 81       	ldd	r25, Y+4	; 0x04
    13c0:	8d 30       	cpi	r24, 0x0D	; 13
    13c2:	91 05       	cpc	r25, r1
    13c4:	5c f4       	brge	.+22     	; 0x13dc <Keypad_4x4_adjustKeyNumber+0xb2>
    13c6:	2b 81       	ldd	r18, Y+3	; 0x03
    13c8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ca:	2a 30       	cpi	r18, 0x0A	; 10
    13cc:	31 05       	cpc	r19, r1
    13ce:	b1 f1       	breq	.+108    	; 0x143c <Keypad_4x4_adjustKeyNumber+0x112>
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	9c 81       	ldd	r25, Y+4	; 0x04
    13d4:	8b 30       	cpi	r24, 0x0B	; 11
    13d6:	91 05       	cpc	r25, r1
    13d8:	a4 f5       	brge	.+104    	; 0x1442 <Keypad_4x4_adjustKeyNumber+0x118>
    13da:	2d c0       	rjmp	.+90     	; 0x1436 <Keypad_4x4_adjustKeyNumber+0x10c>
    13dc:	2b 81       	ldd	r18, Y+3	; 0x03
    13de:	3c 81       	ldd	r19, Y+4	; 0x04
    13e0:	2e 30       	cpi	r18, 0x0E	; 14
    13e2:	31 05       	cpc	r19, r1
    13e4:	b9 f1       	breq	.+110    	; 0x1454 <Keypad_4x4_adjustKeyNumber+0x12a>
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	8e 30       	cpi	r24, 0x0E	; 14
    13ec:	91 05       	cpc	r25, r1
    13ee:	7c f1       	brlt	.+94     	; 0x144e <Keypad_4x4_adjustKeyNumber+0x124>
    13f0:	2b 81       	ldd	r18, Y+3	; 0x03
    13f2:	3c 81       	ldd	r19, Y+4	; 0x04
    13f4:	2f 30       	cpi	r18, 0x0F	; 15
    13f6:	31 05       	cpc	r19, r1
    13f8:	79 f1       	breq	.+94     	; 0x1458 <Keypad_4x4_adjustKeyNumber+0x12e>
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	9c 81       	ldd	r25, Y+4	; 0x04
    13fe:	80 31       	cpi	r24, 0x10	; 16
    1400:	91 05       	cpc	r25, r1
    1402:	69 f1       	breq	.+90     	; 0x145e <Keypad_4x4_adjustKeyNumber+0x134>
    1404:	2f c0       	rjmp	.+94     	; 0x1464 <Keypad_4x4_adjustKeyNumber+0x13a>
		{
		case 1:		return 7;
    1406:	97 e0       	ldi	r25, 0x07	; 7
    1408:	9a 83       	std	Y+2, r25	; 0x02
    140a:	2d c0       	rjmp	.+90     	; 0x1466 <Keypad_4x4_adjustKeyNumber+0x13c>
		break;
		case 2:		return 8;
    140c:	28 e0       	ldi	r18, 0x08	; 8
    140e:	2a 83       	std	Y+2, r18	; 0x02
    1410:	2a c0       	rjmp	.+84     	; 0x1466 <Keypad_4x4_adjustKeyNumber+0x13c>
		break;
		case 3:		return 9;
    1412:	39 e0       	ldi	r19, 0x09	; 9
    1414:	3a 83       	std	Y+2, r19	; 0x02
    1416:	27 c0       	rjmp	.+78     	; 0x1466 <Keypad_4x4_adjustKeyNumber+0x13c>
		break;
		case 4:		return '/';
    1418:	8f e2       	ldi	r24, 0x2F	; 47
    141a:	8a 83       	std	Y+2, r24	; 0x02
    141c:	24 c0       	rjmp	.+72     	; 0x1466 <Keypad_4x4_adjustKeyNumber+0x13c>
		break;
		case 5:		return 4;
    141e:	94 e0       	ldi	r25, 0x04	; 4
    1420:	9a 83       	std	Y+2, r25	; 0x02
    1422:	21 c0       	rjmp	.+66     	; 0x1466 <Keypad_4x4_adjustKeyNumber+0x13c>
		break;
		case 6:		return 5;
    1424:	25 e0       	ldi	r18, 0x05	; 5
    1426:	2a 83       	std	Y+2, r18	; 0x02
    1428:	1e c0       	rjmp	.+60     	; 0x1466 <Keypad_4x4_adjustKeyNumber+0x13c>
		break;
		case 7:		return 6;
    142a:	36 e0       	ldi	r19, 0x06	; 6
    142c:	3a 83       	std	Y+2, r19	; 0x02
    142e:	1b c0       	rjmp	.+54     	; 0x1466 <Keypad_4x4_adjustKeyNumber+0x13c>
		break;
		case 8:		return '*';
    1430:	8a e2       	ldi	r24, 0x2A	; 42
    1432:	8a 83       	std	Y+2, r24	; 0x02
    1434:	18 c0       	rjmp	.+48     	; 0x1466 <Keypad_4x4_adjustKeyNumber+0x13c>
		break;
		case 9:		return 1;
    1436:	91 e0       	ldi	r25, 0x01	; 1
    1438:	9a 83       	std	Y+2, r25	; 0x02
    143a:	15 c0       	rjmp	.+42     	; 0x1466 <Keypad_4x4_adjustKeyNumber+0x13c>
		break;
		case 10:	return 2;
    143c:	22 e0       	ldi	r18, 0x02	; 2
    143e:	2a 83       	std	Y+2, r18	; 0x02
    1440:	12 c0       	rjmp	.+36     	; 0x1466 <Keypad_4x4_adjustKeyNumber+0x13c>
		break;
		case 11:	return 3;
    1442:	33 e0       	ldi	r19, 0x03	; 3
    1444:	3a 83       	std	Y+2, r19	; 0x02
    1446:	0f c0       	rjmp	.+30     	; 0x1466 <Keypad_4x4_adjustKeyNumber+0x13c>
		break;
		case 12:	return '-';
    1448:	8d e2       	ldi	r24, 0x2D	; 45
    144a:	8a 83       	std	Y+2, r24	; 0x02
    144c:	0c c0       	rjmp	.+24     	; 0x1466 <Keypad_4x4_adjustKeyNumber+0x13c>
		break;
		case 13:	return 'c';
    144e:	93 e6       	ldi	r25, 0x63	; 99
    1450:	9a 83       	std	Y+2, r25	; 0x02
    1452:	09 c0       	rjmp	.+18     	; 0x1466 <Keypad_4x4_adjustKeyNumber+0x13c>
		break;
		case 14:	return 0;
    1454:	1a 82       	std	Y+2, r1	; 0x02
    1456:	07 c0       	rjmp	.+14     	; 0x1466 <Keypad_4x4_adjustKeyNumber+0x13c>
		break;
		case 15:	return '=';
    1458:	2d e3       	ldi	r18, 0x3D	; 61
    145a:	2a 83       	std	Y+2, r18	; 0x02
    145c:	04 c0       	rjmp	.+8      	; 0x1466 <Keypad_4x4_adjustKeyNumber+0x13c>
		break;
		case 16:	return '+';
    145e:	3b e2       	ldi	r19, 0x2B	; 43
    1460:	3a 83       	std	Y+2, r19	; 0x02
    1462:	01 c0       	rjmp	.+2      	; 0x1466 <Keypad_4x4_adjustKeyNumber+0x13c>
    1464:	02 c0       	rjmp	.+4      	; 0x146a <Keypad_4x4_adjustKeyNumber+0x140>
		break;
		}
}
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	8d 83       	std	Y+5, r24	; 0x05
    146a:	8d 81       	ldd	r24, Y+5	; 0x05
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <LCD_Init>:
#include <avr/delay.h>
#include <stdio.h>
/*Function Definition*/

void LCD_Init (void)			                 	// initialization of LCD
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	e8 97       	sbiw	r28, 0x38	; 56
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	de bf       	out	0x3e, r29	; 62
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	cd bf       	out	0x3d, r28	; 61
	Set_GroupDir (LCD_DATA_PORT_DIR,0xFF);			//Set PORTB as o/p port
    1490:	e7 e3       	ldi	r30, 0x37	; 55
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	6f ef       	ldi	r22, 0xFF	; 255
    1498:	0e 94 bb 08 	call	0x1176	; 0x1176 <Set_GroupDir>
	LCD_CTRL_PORT_DIR = (1<<EN) | (1<<RS) | (1<<RW);//Set RS, RW, ENABLE pins as o/p port
    149c:	e1 e3       	ldi	r30, 0x31	; 49
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 ee       	ldi	r24, 0xE0	; 224
    14a2:	80 83       	st	Z, r24
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a8 e4       	ldi	r26, 0x48	; 72
    14aa:	b2 e4       	ldi	r27, 0x42	; 66
    14ac:	8d ab       	std	Y+53, r24	; 0x35
    14ae:	9e ab       	std	Y+54, r25	; 0x36
    14b0:	af ab       	std	Y+55, r26	; 0x37
    14b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b4:	6d a9       	ldd	r22, Y+53	; 0x35
    14b6:	7e a9       	ldd	r23, Y+54	; 0x36
    14b8:	8f a9       	ldd	r24, Y+55	; 0x37
    14ba:	98 ad       	ldd	r25, Y+56	; 0x38
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	4a e7       	ldi	r20, 0x7A	; 122
    14c2:	55 e4       	ldi	r21, 0x45	; 69
    14c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	89 ab       	std	Y+49, r24	; 0x31
    14ce:	9a ab       	std	Y+50, r25	; 0x32
    14d0:	ab ab       	std	Y+51, r26	; 0x33
    14d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14d4:	69 a9       	ldd	r22, Y+49	; 0x31
    14d6:	7a a9       	ldd	r23, Y+50	; 0x32
    14d8:	8b a9       	ldd	r24, Y+51	; 0x33
    14da:	9c a9       	ldd	r25, Y+52	; 0x34
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e8       	ldi	r20, 0x80	; 128
    14e2:	5f e3       	ldi	r21, 0x3F	; 63
    14e4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14e8:	88 23       	and	r24, r24
    14ea:	2c f4       	brge	.+10     	; 0x14f6 <LCD_Init+0x7a>
		__ticks = 1;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	98 ab       	std	Y+48, r25	; 0x30
    14f2:	8f a7       	std	Y+47, r24	; 0x2f
    14f4:	3f c0       	rjmp	.+126    	; 0x1574 <LCD_Init+0xf8>
	else if (__tmp > 65535)
    14f6:	69 a9       	ldd	r22, Y+49	; 0x31
    14f8:	7a a9       	ldd	r23, Y+50	; 0x32
    14fa:	8b a9       	ldd	r24, Y+51	; 0x33
    14fc:	9c a9       	ldd	r25, Y+52	; 0x34
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	3f ef       	ldi	r19, 0xFF	; 255
    1502:	4f e7       	ldi	r20, 0x7F	; 127
    1504:	57 e4       	ldi	r21, 0x47	; 71
    1506:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    150a:	18 16       	cp	r1, r24
    150c:	4c f5       	brge	.+82     	; 0x1560 <LCD_Init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150e:	6d a9       	ldd	r22, Y+53	; 0x35
    1510:	7e a9       	ldd	r23, Y+54	; 0x36
    1512:	8f a9       	ldd	r24, Y+55	; 0x37
    1514:	98 ad       	ldd	r25, Y+56	; 0x38
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e2       	ldi	r20, 0x20	; 32
    151c:	51 e4       	ldi	r21, 0x41	; 65
    151e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	98 ab       	std	Y+48, r25	; 0x30
    1534:	8f a7       	std	Y+47, r24	; 0x2f
    1536:	0f c0       	rjmp	.+30     	; 0x1556 <LCD_Init+0xda>
    1538:	80 e9       	ldi	r24, 0x90	; 144
    153a:	91 e0       	ldi	r25, 0x01	; 1
    153c:	9e a7       	std	Y+46, r25	; 0x2e
    153e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1540:	8d a5       	ldd	r24, Y+45	; 0x2d
    1542:	9e a5       	ldd	r25, Y+46	; 0x2e
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <LCD_Init+0xc8>
    1548:	9e a7       	std	Y+46, r25	; 0x2e
    154a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154c:	8f a5       	ldd	r24, Y+47	; 0x2f
    154e:	98 a9       	ldd	r25, Y+48	; 0x30
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	98 ab       	std	Y+48, r25	; 0x30
    1554:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1556:	8f a5       	ldd	r24, Y+47	; 0x2f
    1558:	98 a9       	ldd	r25, Y+48	; 0x30
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	69 f7       	brne	.-38     	; 0x1538 <LCD_Init+0xbc>
    155e:	14 c0       	rjmp	.+40     	; 0x1588 <LCD_Init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1560:	69 a9       	ldd	r22, Y+49	; 0x31
    1562:	7a a9       	ldd	r23, Y+50	; 0x32
    1564:	8b a9       	ldd	r24, Y+51	; 0x33
    1566:	9c a9       	ldd	r25, Y+52	; 0x34
    1568:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	98 ab       	std	Y+48, r25	; 0x30
    1572:	8f a7       	std	Y+47, r24	; 0x2f
    1574:	8f a5       	ldd	r24, Y+47	; 0x2f
    1576:	98 a9       	ldd	r25, Y+48	; 0x30
    1578:	9c a7       	std	Y+44, r25	; 0x2c
    157a:	8b a7       	std	Y+43, r24	; 0x2b
    157c:	8b a5       	ldd	r24, Y+43	; 0x2b
    157e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <LCD_Init+0x104>
    1584:	9c a7       	std	Y+44, r25	; 0x2c
    1586:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50); 							     	//Delay before initialization FUNCTION
	Send_CMD (TWO_LINE_LCD_EIGHT_BIT_MODE);		    //Set LCD mode as 8-bit mode, 2-lines, 5*8 Dots
    1588:	88 e3       	ldi	r24, 0x38	; 56
    158a:	0e 94 2c 0c 	call	0x1858	; 0x1858 <Send_CMD>
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	a0 e8       	ldi	r26, 0x80	; 128
    1594:	bf e3       	ldi	r27, 0x3F	; 63
    1596:	8f a3       	std	Y+39, r24	; 0x27
    1598:	98 a7       	std	Y+40, r25	; 0x28
    159a:	a9 a7       	std	Y+41, r26	; 0x29
    159c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    159e:	6f a1       	ldd	r22, Y+39	; 0x27
    15a0:	78 a5       	ldd	r23, Y+40	; 0x28
    15a2:	89 a5       	ldd	r24, Y+41	; 0x29
    15a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	4a e7       	ldi	r20, 0x7A	; 122
    15ac:	55 e4       	ldi	r21, 0x45	; 69
    15ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	8b a3       	std	Y+35, r24	; 0x23
    15b8:	9c a3       	std	Y+36, r25	; 0x24
    15ba:	ad a3       	std	Y+37, r26	; 0x25
    15bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15be:	6b a1       	ldd	r22, Y+35	; 0x23
    15c0:	7c a1       	ldd	r23, Y+36	; 0x24
    15c2:	8d a1       	ldd	r24, Y+37	; 0x25
    15c4:	9e a1       	ldd	r25, Y+38	; 0x26
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e8       	ldi	r20, 0x80	; 128
    15cc:	5f e3       	ldi	r21, 0x3F	; 63
    15ce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15d2:	88 23       	and	r24, r24
    15d4:	2c f4       	brge	.+10     	; 0x15e0 <LCD_Init+0x164>
		__ticks = 1;
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	9a a3       	std	Y+34, r25	; 0x22
    15dc:	89 a3       	std	Y+33, r24	; 0x21
    15de:	3f c0       	rjmp	.+126    	; 0x165e <LCD_Init+0x1e2>
	else if (__tmp > 65535)
    15e0:	6b a1       	ldd	r22, Y+35	; 0x23
    15e2:	7c a1       	ldd	r23, Y+36	; 0x24
    15e4:	8d a1       	ldd	r24, Y+37	; 0x25
    15e6:	9e a1       	ldd	r25, Y+38	; 0x26
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	3f ef       	ldi	r19, 0xFF	; 255
    15ec:	4f e7       	ldi	r20, 0x7F	; 127
    15ee:	57 e4       	ldi	r21, 0x47	; 71
    15f0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15f4:	18 16       	cp	r1, r24
    15f6:	4c f5       	brge	.+82     	; 0x164a <LCD_Init+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f8:	6f a1       	ldd	r22, Y+39	; 0x27
    15fa:	78 a5       	ldd	r23, Y+40	; 0x28
    15fc:	89 a5       	ldd	r24, Y+41	; 0x29
    15fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	40 e2       	ldi	r20, 0x20	; 32
    1606:	51 e4       	ldi	r21, 0x41	; 65
    1608:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	bc 01       	movw	r22, r24
    1612:	cd 01       	movw	r24, r26
    1614:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	9a a3       	std	Y+34, r25	; 0x22
    161e:	89 a3       	std	Y+33, r24	; 0x21
    1620:	0f c0       	rjmp	.+30     	; 0x1640 <LCD_Init+0x1c4>
    1622:	80 e9       	ldi	r24, 0x90	; 144
    1624:	91 e0       	ldi	r25, 0x01	; 1
    1626:	98 a3       	std	Y+32, r25	; 0x20
    1628:	8f 8f       	std	Y+31, r24	; 0x1f
    162a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    162c:	98 a1       	ldd	r25, Y+32	; 0x20
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <LCD_Init+0x1b2>
    1632:	98 a3       	std	Y+32, r25	; 0x20
    1634:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1636:	89 a1       	ldd	r24, Y+33	; 0x21
    1638:	9a a1       	ldd	r25, Y+34	; 0x22
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	9a a3       	std	Y+34, r25	; 0x22
    163e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1640:	89 a1       	ldd	r24, Y+33	; 0x21
    1642:	9a a1       	ldd	r25, Y+34	; 0x22
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	69 f7       	brne	.-38     	; 0x1622 <LCD_Init+0x1a6>
    1648:	14 c0       	rjmp	.+40     	; 0x1672 <LCD_Init+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    164a:	6b a1       	ldd	r22, Y+35	; 0x23
    164c:	7c a1       	ldd	r23, Y+36	; 0x24
    164e:	8d a1       	ldd	r24, Y+37	; 0x25
    1650:	9e a1       	ldd	r25, Y+38	; 0x26
    1652:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	9a a3       	std	Y+34, r25	; 0x22
    165c:	89 a3       	std	Y+33, r24	; 0x21
    165e:	89 a1       	ldd	r24, Y+33	; 0x21
    1660:	9a a1       	ldd	r25, Y+34	; 0x22
    1662:	9e 8f       	std	Y+30, r25	; 0x1e
    1664:	8d 8f       	std	Y+29, r24	; 0x1d
    1666:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1668:	9e 8d       	ldd	r25, Y+30	; 0x1e
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	f1 f7       	brne	.-4      	; 0x166a <LCD_Init+0x1ee>
    166e:	9e 8f       	std	Y+30, r25	; 0x1e
    1670:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Send_CMD (CURSOR_OFF);					     	//MAKE Cursor off
    1672:	8c e0       	ldi	r24, 0x0C	; 12
    1674:	0e 94 2c 0c 	call	0x1858	; 0x1858 <Send_CMD>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	a0 e8       	ldi	r26, 0x80	; 128
    167e:	bf e3       	ldi	r27, 0x3F	; 63
    1680:	89 8f       	std	Y+25, r24	; 0x19
    1682:	9a 8f       	std	Y+26, r25	; 0x1a
    1684:	ab 8f       	std	Y+27, r26	; 0x1b
    1686:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1688:	69 8d       	ldd	r22, Y+25	; 0x19
    168a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    168c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    168e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	4a e7       	ldi	r20, 0x7A	; 122
    1696:	55 e4       	ldi	r21, 0x45	; 69
    1698:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	8d 8b       	std	Y+21, r24	; 0x15
    16a2:	9e 8b       	std	Y+22, r25	; 0x16
    16a4:	af 8b       	std	Y+23, r26	; 0x17
    16a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16a8:	6d 89       	ldd	r22, Y+21	; 0x15
    16aa:	7e 89       	ldd	r23, Y+22	; 0x16
    16ac:	8f 89       	ldd	r24, Y+23	; 0x17
    16ae:	98 8d       	ldd	r25, Y+24	; 0x18
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e8       	ldi	r20, 0x80	; 128
    16b6:	5f e3       	ldi	r21, 0x3F	; 63
    16b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16bc:	88 23       	and	r24, r24
    16be:	2c f4       	brge	.+10     	; 0x16ca <LCD_Init+0x24e>
		__ticks = 1;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	9c 8b       	std	Y+20, r25	; 0x14
    16c6:	8b 8b       	std	Y+19, r24	; 0x13
    16c8:	3f c0       	rjmp	.+126    	; 0x1748 <LCD_Init+0x2cc>
	else if (__tmp > 65535)
    16ca:	6d 89       	ldd	r22, Y+21	; 0x15
    16cc:	7e 89       	ldd	r23, Y+22	; 0x16
    16ce:	8f 89       	ldd	r24, Y+23	; 0x17
    16d0:	98 8d       	ldd	r25, Y+24	; 0x18
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	3f ef       	ldi	r19, 0xFF	; 255
    16d6:	4f e7       	ldi	r20, 0x7F	; 127
    16d8:	57 e4       	ldi	r21, 0x47	; 71
    16da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16de:	18 16       	cp	r1, r24
    16e0:	4c f5       	brge	.+82     	; 0x1734 <LCD_Init+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e2:	69 8d       	ldd	r22, Y+25	; 0x19
    16e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e2       	ldi	r20, 0x20	; 32
    16f0:	51 e4       	ldi	r21, 0x41	; 65
    16f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	bc 01       	movw	r22, r24
    16fc:	cd 01       	movw	r24, r26
    16fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	9c 8b       	std	Y+20, r25	; 0x14
    1708:	8b 8b       	std	Y+19, r24	; 0x13
    170a:	0f c0       	rjmp	.+30     	; 0x172a <LCD_Init+0x2ae>
    170c:	80 e9       	ldi	r24, 0x90	; 144
    170e:	91 e0       	ldi	r25, 0x01	; 1
    1710:	9a 8b       	std	Y+18, r25	; 0x12
    1712:	89 8b       	std	Y+17, r24	; 0x11
    1714:	89 89       	ldd	r24, Y+17	; 0x11
    1716:	9a 89       	ldd	r25, Y+18	; 0x12
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <LCD_Init+0x29c>
    171c:	9a 8b       	std	Y+18, r25	; 0x12
    171e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1720:	8b 89       	ldd	r24, Y+19	; 0x13
    1722:	9c 89       	ldd	r25, Y+20	; 0x14
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	9c 8b       	std	Y+20, r25	; 0x14
    1728:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172a:	8b 89       	ldd	r24, Y+19	; 0x13
    172c:	9c 89       	ldd	r25, Y+20	; 0x14
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	69 f7       	brne	.-38     	; 0x170c <LCD_Init+0x290>
    1732:	14 c0       	rjmp	.+40     	; 0x175c <LCD_Init+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1734:	6d 89       	ldd	r22, Y+21	; 0x15
    1736:	7e 89       	ldd	r23, Y+22	; 0x16
    1738:	8f 89       	ldd	r24, Y+23	; 0x17
    173a:	98 8d       	ldd	r25, Y+24	; 0x18
    173c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	9c 8b       	std	Y+20, r25	; 0x14
    1746:	8b 8b       	std	Y+19, r24	; 0x13
    1748:	8b 89       	ldd	r24, Y+19	; 0x13
    174a:	9c 89       	ldd	r25, Y+20	; 0x14
    174c:	98 8b       	std	Y+16, r25	; 0x10
    174e:	8f 87       	std	Y+15, r24	; 0x0f
    1750:	8f 85       	ldd	r24, Y+15	; 0x0f
    1752:	98 89       	ldd	r25, Y+16	; 0x10
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <LCD_Init+0x2d8>
    1758:	98 8b       	std	Y+16, r25	; 0x10
    175a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Send_CMD (CLEAR_COMMAND);				    	//Clear LCD at initialization
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	0e 94 2c 0c 	call	0x1858	; 0x1858 <Send_CMD>
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	a0 e0       	ldi	r26, 0x00	; 0
    1768:	b0 e4       	ldi	r27, 0x40	; 64
    176a:	8b 87       	std	Y+11, r24	; 0x0b
    176c:	9c 87       	std	Y+12, r25	; 0x0c
    176e:	ad 87       	std	Y+13, r26	; 0x0d
    1770:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1772:	6b 85       	ldd	r22, Y+11	; 0x0b
    1774:	7c 85       	ldd	r23, Y+12	; 0x0c
    1776:	8d 85       	ldd	r24, Y+13	; 0x0d
    1778:	9e 85       	ldd	r25, Y+14	; 0x0e
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	4a e7       	ldi	r20, 0x7A	; 122
    1780:	55 e4       	ldi	r21, 0x45	; 69
    1782:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	8f 83       	std	Y+7, r24	; 0x07
    178c:	98 87       	std	Y+8, r25	; 0x08
    178e:	a9 87       	std	Y+9, r26	; 0x09
    1790:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1792:	6f 81       	ldd	r22, Y+7	; 0x07
    1794:	78 85       	ldd	r23, Y+8	; 0x08
    1796:	89 85       	ldd	r24, Y+9	; 0x09
    1798:	9a 85       	ldd	r25, Y+10	; 0x0a
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e8       	ldi	r20, 0x80	; 128
    17a0:	5f e3       	ldi	r21, 0x3F	; 63
    17a2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17a6:	88 23       	and	r24, r24
    17a8:	2c f4       	brge	.+10     	; 0x17b4 <LCD_Init+0x338>
		__ticks = 1;
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	9e 83       	std	Y+6, r25	; 0x06
    17b0:	8d 83       	std	Y+5, r24	; 0x05
    17b2:	3f c0       	rjmp	.+126    	; 0x1832 <LCD_Init+0x3b6>
	else if (__tmp > 65535)
    17b4:	6f 81       	ldd	r22, Y+7	; 0x07
    17b6:	78 85       	ldd	r23, Y+8	; 0x08
    17b8:	89 85       	ldd	r24, Y+9	; 0x09
    17ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	3f ef       	ldi	r19, 0xFF	; 255
    17c0:	4f e7       	ldi	r20, 0x7F	; 127
    17c2:	57 e4       	ldi	r21, 0x47	; 71
    17c4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17c8:	18 16       	cp	r1, r24
    17ca:	4c f5       	brge	.+82     	; 0x181e <LCD_Init+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e2       	ldi	r20, 0x20	; 32
    17da:	51 e4       	ldi	r21, 0x41	; 65
    17dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	bc 01       	movw	r22, r24
    17e6:	cd 01       	movw	r24, r26
    17e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
    17f4:	0f c0       	rjmp	.+30     	; 0x1814 <LCD_Init+0x398>
    17f6:	80 e9       	ldi	r24, 0x90	; 144
    17f8:	91 e0       	ldi	r25, 0x01	; 1
    17fa:	9c 83       	std	Y+4, r25	; 0x04
    17fc:	8b 83       	std	Y+3, r24	; 0x03
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	9c 81       	ldd	r25, Y+4	; 0x04
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <LCD_Init+0x386>
    1806:	9c 83       	std	Y+4, r25	; 0x04
    1808:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	9e 81       	ldd	r25, Y+6	; 0x06
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	9e 83       	std	Y+6, r25	; 0x06
    1812:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1814:	8d 81       	ldd	r24, Y+5	; 0x05
    1816:	9e 81       	ldd	r25, Y+6	; 0x06
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	69 f7       	brne	.-38     	; 0x17f6 <LCD_Init+0x37a>
    181c:	14 c0       	rjmp	.+40     	; 0x1846 <LCD_Init+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181e:	6f 81       	ldd	r22, Y+7	; 0x07
    1820:	78 85       	ldd	r23, Y+8	; 0x08
    1822:	89 85       	ldd	r24, Y+9	; 0x09
    1824:	9a 85       	ldd	r25, Y+10	; 0x0a
    1826:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	9e 83       	std	Y+6, r25	; 0x06
    1830:	8d 83       	std	Y+5, r24	; 0x05
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	9e 81       	ldd	r25, Y+6	; 0x06
    1836:	9a 83       	std	Y+2, r25	; 0x02
    1838:	89 83       	std	Y+1, r24	; 0x01
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	9a 81       	ldd	r25, Y+2	; 0x02
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	f1 f7       	brne	.-4      	; 0x183e <LCD_Init+0x3c2>
    1842:	9a 83       	std	Y+2, r25	; 0x02
    1844:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1846:	e8 96       	adiw	r28, 0x38	; 56
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	08 95       	ret

00001858 <Send_CMD>:

void Send_CMD (u8 cmd)				// Function For Sending commands to LCD
{
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	ab 97       	sbiw	r28, 0x2b	; 43
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	8b a7       	std	Y+43, r24	; 0x2b
	CLEAR_BIT(LCD_CTRL_PORT, RS);	//clear RS Pin (Command Instruction)
    186e:	a2 e3       	ldi	r26, 0x32	; 50
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e2 e3       	ldi	r30, 0x32	; 50
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	8f 7d       	andi	r24, 0xDF	; 223
    187a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, RW);	//clear RW Pin (Write Mood)
    187c:	a2 e3       	ldi	r26, 0x32	; 50
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e2 e3       	ldi	r30, 0x32	; 50
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	8f 7b       	andi	r24, 0xBF	; 191
    1888:	8c 93       	st	X, r24
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	a0 e8       	ldi	r26, 0x80	; 128
    1890:	bf e3       	ldi	r27, 0x3F	; 63
    1892:	8f a3       	std	Y+39, r24	; 0x27
    1894:	98 a7       	std	Y+40, r25	; 0x28
    1896:	a9 a7       	std	Y+41, r26	; 0x29
    1898:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189a:	6f a1       	ldd	r22, Y+39	; 0x27
    189c:	78 a5       	ldd	r23, Y+40	; 0x28
    189e:	89 a5       	ldd	r24, Y+41	; 0x29
    18a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	4a e7       	ldi	r20, 0x7A	; 122
    18a8:	55 e4       	ldi	r21, 0x45	; 69
    18aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	8b a3       	std	Y+35, r24	; 0x23
    18b4:	9c a3       	std	Y+36, r25	; 0x24
    18b6:	ad a3       	std	Y+37, r26	; 0x25
    18b8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18ba:	6b a1       	ldd	r22, Y+35	; 0x23
    18bc:	7c a1       	ldd	r23, Y+36	; 0x24
    18be:	8d a1       	ldd	r24, Y+37	; 0x25
    18c0:	9e a1       	ldd	r25, Y+38	; 0x26
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e8       	ldi	r20, 0x80	; 128
    18c8:	5f e3       	ldi	r21, 0x3F	; 63
    18ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18ce:	88 23       	and	r24, r24
    18d0:	2c f4       	brge	.+10     	; 0x18dc <Send_CMD+0x84>
		__ticks = 1;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	9a a3       	std	Y+34, r25	; 0x22
    18d8:	89 a3       	std	Y+33, r24	; 0x21
    18da:	3f c0       	rjmp	.+126    	; 0x195a <Send_CMD+0x102>
	else if (__tmp > 65535)
    18dc:	6b a1       	ldd	r22, Y+35	; 0x23
    18de:	7c a1       	ldd	r23, Y+36	; 0x24
    18e0:	8d a1       	ldd	r24, Y+37	; 0x25
    18e2:	9e a1       	ldd	r25, Y+38	; 0x26
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	3f ef       	ldi	r19, 0xFF	; 255
    18e8:	4f e7       	ldi	r20, 0x7F	; 127
    18ea:	57 e4       	ldi	r21, 0x47	; 71
    18ec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18f0:	18 16       	cp	r1, r24
    18f2:	4c f5       	brge	.+82     	; 0x1946 <Send_CMD+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f4:	6f a1       	ldd	r22, Y+39	; 0x27
    18f6:	78 a5       	ldd	r23, Y+40	; 0x28
    18f8:	89 a5       	ldd	r24, Y+41	; 0x29
    18fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e2       	ldi	r20, 0x20	; 32
    1902:	51 e4       	ldi	r21, 0x41	; 65
    1904:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	bc 01       	movw	r22, r24
    190e:	cd 01       	movw	r24, r26
    1910:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	9a a3       	std	Y+34, r25	; 0x22
    191a:	89 a3       	std	Y+33, r24	; 0x21
    191c:	0f c0       	rjmp	.+30     	; 0x193c <Send_CMD+0xe4>
    191e:	80 e9       	ldi	r24, 0x90	; 144
    1920:	91 e0       	ldi	r25, 0x01	; 1
    1922:	98 a3       	std	Y+32, r25	; 0x20
    1924:	8f 8f       	std	Y+31, r24	; 0x1f
    1926:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1928:	98 a1       	ldd	r25, Y+32	; 0x20
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	f1 f7       	brne	.-4      	; 0x192a <Send_CMD+0xd2>
    192e:	98 a3       	std	Y+32, r25	; 0x20
    1930:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1932:	89 a1       	ldd	r24, Y+33	; 0x21
    1934:	9a a1       	ldd	r25, Y+34	; 0x22
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	9a a3       	std	Y+34, r25	; 0x22
    193a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193c:	89 a1       	ldd	r24, Y+33	; 0x21
    193e:	9a a1       	ldd	r25, Y+34	; 0x22
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	69 f7       	brne	.-38     	; 0x191e <Send_CMD+0xc6>
    1944:	14 c0       	rjmp	.+40     	; 0x196e <Send_CMD+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1946:	6b a1       	ldd	r22, Y+35	; 0x23
    1948:	7c a1       	ldd	r23, Y+36	; 0x24
    194a:	8d a1       	ldd	r24, Y+37	; 0x25
    194c:	9e a1       	ldd	r25, Y+38	; 0x26
    194e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	9a a3       	std	Y+34, r25	; 0x22
    1958:	89 a3       	std	Y+33, r24	; 0x21
    195a:	89 a1       	ldd	r24, Y+33	; 0x21
    195c:	9a a1       	ldd	r25, Y+34	; 0x22
    195e:	9e 8f       	std	Y+30, r25	; 0x1e
    1960:	8d 8f       	std	Y+29, r24	; 0x1d
    1962:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1964:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <Send_CMD+0x10e>
    196a:	9e 8f       	std	Y+30, r25	; 0x1e
    196c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);					//Delay until Enable Start
	SET_BIT(LCD_CTRL_PORT, EN);		//Enable LCD
    196e:	a2 e3       	ldi	r26, 0x32	; 50
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e2 e3       	ldi	r30, 0x32	; 50
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	80 68       	ori	r24, 0x80	; 128
    197a:	8c 93       	st	X, r24
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	a0 e8       	ldi	r26, 0x80	; 128
    1982:	bf e3       	ldi	r27, 0x3F	; 63
    1984:	89 8f       	std	Y+25, r24	; 0x19
    1986:	9a 8f       	std	Y+26, r25	; 0x1a
    1988:	ab 8f       	std	Y+27, r26	; 0x1b
    198a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198c:	69 8d       	ldd	r22, Y+25	; 0x19
    198e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1990:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1992:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	4a e7       	ldi	r20, 0x7A	; 122
    199a:	55 e4       	ldi	r21, 0x45	; 69
    199c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	8d 8b       	std	Y+21, r24	; 0x15
    19a6:	9e 8b       	std	Y+22, r25	; 0x16
    19a8:	af 8b       	std	Y+23, r26	; 0x17
    19aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19ac:	6d 89       	ldd	r22, Y+21	; 0x15
    19ae:	7e 89       	ldd	r23, Y+22	; 0x16
    19b0:	8f 89       	ldd	r24, Y+23	; 0x17
    19b2:	98 8d       	ldd	r25, Y+24	; 0x18
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e8       	ldi	r20, 0x80	; 128
    19ba:	5f e3       	ldi	r21, 0x3F	; 63
    19bc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19c0:	88 23       	and	r24, r24
    19c2:	2c f4       	brge	.+10     	; 0x19ce <Send_CMD+0x176>
		__ticks = 1;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	9c 8b       	std	Y+20, r25	; 0x14
    19ca:	8b 8b       	std	Y+19, r24	; 0x13
    19cc:	3f c0       	rjmp	.+126    	; 0x1a4c <Send_CMD+0x1f4>
	else if (__tmp > 65535)
    19ce:	6d 89       	ldd	r22, Y+21	; 0x15
    19d0:	7e 89       	ldd	r23, Y+22	; 0x16
    19d2:	8f 89       	ldd	r24, Y+23	; 0x17
    19d4:	98 8d       	ldd	r25, Y+24	; 0x18
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	3f ef       	ldi	r19, 0xFF	; 255
    19da:	4f e7       	ldi	r20, 0x7F	; 127
    19dc:	57 e4       	ldi	r21, 0x47	; 71
    19de:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19e2:	18 16       	cp	r1, r24
    19e4:	4c f5       	brge	.+82     	; 0x1a38 <Send_CMD+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e6:	69 8d       	ldd	r22, Y+25	; 0x19
    19e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e2       	ldi	r20, 0x20	; 32
    19f4:	51 e4       	ldi	r21, 0x41	; 65
    19f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	9c 8b       	std	Y+20, r25	; 0x14
    1a0c:	8b 8b       	std	Y+19, r24	; 0x13
    1a0e:	0f c0       	rjmp	.+30     	; 0x1a2e <Send_CMD+0x1d6>
    1a10:	80 e9       	ldi	r24, 0x90	; 144
    1a12:	91 e0       	ldi	r25, 0x01	; 1
    1a14:	9a 8b       	std	Y+18, r25	; 0x12
    1a16:	89 8b       	std	Y+17, r24	; 0x11
    1a18:	89 89       	ldd	r24, Y+17	; 0x11
    1a1a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <Send_CMD+0x1c4>
    1a20:	9a 8b       	std	Y+18, r25	; 0x12
    1a22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a24:	8b 89       	ldd	r24, Y+19	; 0x13
    1a26:	9c 89       	ldd	r25, Y+20	; 0x14
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	9c 8b       	std	Y+20, r25	; 0x14
    1a2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a30:	9c 89       	ldd	r25, Y+20	; 0x14
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	69 f7       	brne	.-38     	; 0x1a10 <Send_CMD+0x1b8>
    1a36:	14 c0       	rjmp	.+40     	; 0x1a60 <Send_CMD+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a38:	6d 89       	ldd	r22, Y+21	; 0x15
    1a3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	9c 8b       	std	Y+20, r25	; 0x14
    1a4a:	8b 8b       	std	Y+19, r24	; 0x13
    1a4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a50:	98 8b       	std	Y+16, r25	; 0x10
    1a52:	8f 87       	std	Y+15, r24	; 0x0f
    1a54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a56:	98 89       	ldd	r25, Y+16	; 0x10
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <Send_CMD+0x200>
    1a5c:	98 8b       	std	Y+16, r25	; 0x10
    1a5e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);					//Delay until sending commands
	LCD_DATA_PORT = cmd; 			//Send command to data pins
    1a60:	e8 e3       	ldi	r30, 0x38	; 56
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a66:	80 83       	st	Z, r24
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	a0 e8       	ldi	r26, 0x80	; 128
    1a6e:	bf e3       	ldi	r27, 0x3F	; 63
    1a70:	8b 87       	std	Y+11, r24	; 0x0b
    1a72:	9c 87       	std	Y+12, r25	; 0x0c
    1a74:	ad 87       	std	Y+13, r26	; 0x0d
    1a76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	4a e7       	ldi	r20, 0x7A	; 122
    1a86:	55 e4       	ldi	r21, 0x45	; 69
    1a88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	8f 83       	std	Y+7, r24	; 0x07
    1a92:	98 87       	std	Y+8, r25	; 0x08
    1a94:	a9 87       	std	Y+9, r26	; 0x09
    1a96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a98:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9a:	78 85       	ldd	r23, Y+8	; 0x08
    1a9c:	89 85       	ldd	r24, Y+9	; 0x09
    1a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e8       	ldi	r20, 0x80	; 128
    1aa6:	5f e3       	ldi	r21, 0x3F	; 63
    1aa8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1aac:	88 23       	and	r24, r24
    1aae:	2c f4       	brge	.+10     	; 0x1aba <Send_CMD+0x262>
		__ticks = 1;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	9e 83       	std	Y+6, r25	; 0x06
    1ab6:	8d 83       	std	Y+5, r24	; 0x05
    1ab8:	3f c0       	rjmp	.+126    	; 0x1b38 <Send_CMD+0x2e0>
	else if (__tmp > 65535)
    1aba:	6f 81       	ldd	r22, Y+7	; 0x07
    1abc:	78 85       	ldd	r23, Y+8	; 0x08
    1abe:	89 85       	ldd	r24, Y+9	; 0x09
    1ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	3f ef       	ldi	r19, 0xFF	; 255
    1ac6:	4f e7       	ldi	r20, 0x7F	; 127
    1ac8:	57 e4       	ldi	r21, 0x47	; 71
    1aca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ace:	18 16       	cp	r1, r24
    1ad0:	4c f5       	brge	.+82     	; 0x1b24 <Send_CMD+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	40 e2       	ldi	r20, 0x20	; 32
    1ae0:	51 e4       	ldi	r21, 0x41	; 65
    1ae2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	bc 01       	movw	r22, r24
    1aec:	cd 01       	movw	r24, r26
    1aee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	9e 83       	std	Y+6, r25	; 0x06
    1af8:	8d 83       	std	Y+5, r24	; 0x05
    1afa:	0f c0       	rjmp	.+30     	; 0x1b1a <Send_CMD+0x2c2>
    1afc:	80 e9       	ldi	r24, 0x90	; 144
    1afe:	91 e0       	ldi	r25, 0x01	; 1
    1b00:	9c 83       	std	Y+4, r25	; 0x04
    1b02:	8b 83       	std	Y+3, r24	; 0x03
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	9c 81       	ldd	r25, Y+4	; 0x04
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	f1 f7       	brne	.-4      	; 0x1b08 <Send_CMD+0x2b0>
    1b0c:	9c 83       	std	Y+4, r25	; 0x04
    1b0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b10:	8d 81       	ldd	r24, Y+5	; 0x05
    1b12:	9e 81       	ldd	r25, Y+6	; 0x06
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	9e 83       	std	Y+6, r25	; 0x06
    1b18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1e:	00 97       	sbiw	r24, 0x00	; 0
    1b20:	69 f7       	brne	.-38     	; 0x1afc <Send_CMD+0x2a4>
    1b22:	14 c0       	rjmp	.+40     	; 0x1b4c <Send_CMD+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b24:	6f 81       	ldd	r22, Y+7	; 0x07
    1b26:	78 85       	ldd	r23, Y+8	; 0x08
    1b28:	89 85       	ldd	r24, Y+9	; 0x09
    1b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	9e 83       	std	Y+6, r25	; 0x06
    1b36:	8d 83       	std	Y+5, r24	; 0x05
    1b38:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3c:	9a 83       	std	Y+2, r25	; 0x02
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	9a 81       	ldd	r25, Y+2	; 0x02
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <Send_CMD+0x2ec>
    1b48:	9a 83       	std	Y+2, r25	; 0x02
    1b4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);					//Delay until data sending is finished
	CLEAR_BIT(LCD_CTRL_PORT, EN);	//Disable LCD
    1b4c:	a2 e3       	ldi	r26, 0x32	; 50
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e2 e3       	ldi	r30, 0x32	; 50
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	8f 77       	andi	r24, 0x7F	; 127
    1b58:	8c 93       	st	X, r24
}
    1b5a:	ab 96       	adiw	r28, 0x2b	; 43
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	08 95       	ret

00001b6c <Send_DATA>:

void Send_DATA (u8 data)			// Function for sending data to LCD
{
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	ab 97       	sbiw	r28, 0x2b	; 43
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	de bf       	out	0x3e, r29	; 62
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	cd bf       	out	0x3d, r28	; 61
    1b80:	8b a7       	std	Y+43, r24	; 0x2b
	SET_BIT(LCD_CTRL_PORT, RS);		//set RS Pin (Command Instruction)
    1b82:	a2 e3       	ldi	r26, 0x32	; 50
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e2 e3       	ldi	r30, 0x32	; 50
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	80 62       	ori	r24, 0x20	; 32
    1b8e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, RW);	//clear RW Pin (Write Mood)
    1b90:	a2 e3       	ldi	r26, 0x32	; 50
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	e2 e3       	ldi	r30, 0x32	; 50
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	8f 7b       	andi	r24, 0xBF	; 191
    1b9c:	8c 93       	st	X, r24
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	a0 e8       	ldi	r26, 0x80	; 128
    1ba4:	bf e3       	ldi	r27, 0x3F	; 63
    1ba6:	8f a3       	std	Y+39, r24	; 0x27
    1ba8:	98 a7       	std	Y+40, r25	; 0x28
    1baa:	a9 a7       	std	Y+41, r26	; 0x29
    1bac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bae:	6f a1       	ldd	r22, Y+39	; 0x27
    1bb0:	78 a5       	ldd	r23, Y+40	; 0x28
    1bb2:	89 a5       	ldd	r24, Y+41	; 0x29
    1bb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	4a e7       	ldi	r20, 0x7A	; 122
    1bbc:	55 e4       	ldi	r21, 0x45	; 69
    1bbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	8b a3       	std	Y+35, r24	; 0x23
    1bc8:	9c a3       	std	Y+36, r25	; 0x24
    1bca:	ad a3       	std	Y+37, r26	; 0x25
    1bcc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bce:	6b a1       	ldd	r22, Y+35	; 0x23
    1bd0:	7c a1       	ldd	r23, Y+36	; 0x24
    1bd2:	8d a1       	ldd	r24, Y+37	; 0x25
    1bd4:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e8       	ldi	r20, 0x80	; 128
    1bdc:	5f e3       	ldi	r21, 0x3F	; 63
    1bde:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1be2:	88 23       	and	r24, r24
    1be4:	2c f4       	brge	.+10     	; 0x1bf0 <Send_DATA+0x84>
		__ticks = 1;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	9a a3       	std	Y+34, r25	; 0x22
    1bec:	89 a3       	std	Y+33, r24	; 0x21
    1bee:	3f c0       	rjmp	.+126    	; 0x1c6e <Send_DATA+0x102>
	else if (__tmp > 65535)
    1bf0:	6b a1       	ldd	r22, Y+35	; 0x23
    1bf2:	7c a1       	ldd	r23, Y+36	; 0x24
    1bf4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bf6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	3f ef       	ldi	r19, 0xFF	; 255
    1bfc:	4f e7       	ldi	r20, 0x7F	; 127
    1bfe:	57 e4       	ldi	r21, 0x47	; 71
    1c00:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c04:	18 16       	cp	r1, r24
    1c06:	4c f5       	brge	.+82     	; 0x1c5a <Send_DATA+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c08:	6f a1       	ldd	r22, Y+39	; 0x27
    1c0a:	78 a5       	ldd	r23, Y+40	; 0x28
    1c0c:	89 a5       	ldd	r24, Y+41	; 0x29
    1c0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e2       	ldi	r20, 0x20	; 32
    1c16:	51 e4       	ldi	r21, 0x41	; 65
    1c18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	bc 01       	movw	r22, r24
    1c22:	cd 01       	movw	r24, r26
    1c24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	9a a3       	std	Y+34, r25	; 0x22
    1c2e:	89 a3       	std	Y+33, r24	; 0x21
    1c30:	0f c0       	rjmp	.+30     	; 0x1c50 <Send_DATA+0xe4>
    1c32:	80 e9       	ldi	r24, 0x90	; 144
    1c34:	91 e0       	ldi	r25, 0x01	; 1
    1c36:	98 a3       	std	Y+32, r25	; 0x20
    1c38:	8f 8f       	std	Y+31, r24	; 0x1f
    1c3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c3c:	98 a1       	ldd	r25, Y+32	; 0x20
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	f1 f7       	brne	.-4      	; 0x1c3e <Send_DATA+0xd2>
    1c42:	98 a3       	std	Y+32, r25	; 0x20
    1c44:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c46:	89 a1       	ldd	r24, Y+33	; 0x21
    1c48:	9a a1       	ldd	r25, Y+34	; 0x22
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	9a a3       	std	Y+34, r25	; 0x22
    1c4e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c50:	89 a1       	ldd	r24, Y+33	; 0x21
    1c52:	9a a1       	ldd	r25, Y+34	; 0x22
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	69 f7       	brne	.-38     	; 0x1c32 <Send_DATA+0xc6>
    1c58:	14 c0       	rjmp	.+40     	; 0x1c82 <Send_DATA+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c60:	9e a1       	ldd	r25, Y+38	; 0x26
    1c62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	9a a3       	std	Y+34, r25	; 0x22
    1c6c:	89 a3       	std	Y+33, r24	; 0x21
    1c6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c70:	9a a1       	ldd	r25, Y+34	; 0x22
    1c72:	9e 8f       	std	Y+30, r25	; 0x1e
    1c74:	8d 8f       	std	Y+29, r24	; 0x1d
    1c76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <Send_DATA+0x10e>
    1c7e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c80:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);					//Delay until Enable Start
	SET_BIT(LCD_CTRL_PORT, EN);		//Enable LCD
    1c82:	a2 e3       	ldi	r26, 0x32	; 50
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	e2 e3       	ldi	r30, 0x32	; 50
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	80 68       	ori	r24, 0x80	; 128
    1c8e:	8c 93       	st	X, r24
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	a0 e8       	ldi	r26, 0x80	; 128
    1c96:	bf e3       	ldi	r27, 0x3F	; 63
    1c98:	89 8f       	std	Y+25, r24	; 0x19
    1c9a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c9c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c9e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ca2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ca4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ca6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	4a e7       	ldi	r20, 0x7A	; 122
    1cae:	55 e4       	ldi	r21, 0x45	; 69
    1cb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	8d 8b       	std	Y+21, r24	; 0x15
    1cba:	9e 8b       	std	Y+22, r25	; 0x16
    1cbc:	af 8b       	std	Y+23, r26	; 0x17
    1cbe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cc0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cc6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e8       	ldi	r20, 0x80	; 128
    1cce:	5f e3       	ldi	r21, 0x3F	; 63
    1cd0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cd4:	88 23       	and	r24, r24
    1cd6:	2c f4       	brge	.+10     	; 0x1ce2 <Send_DATA+0x176>
		__ticks = 1;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	9c 8b       	std	Y+20, r25	; 0x14
    1cde:	8b 8b       	std	Y+19, r24	; 0x13
    1ce0:	3f c0       	rjmp	.+126    	; 0x1d60 <Send_DATA+0x1f4>
	else if (__tmp > 65535)
    1ce2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	3f ef       	ldi	r19, 0xFF	; 255
    1cee:	4f e7       	ldi	r20, 0x7F	; 127
    1cf0:	57 e4       	ldi	r21, 0x47	; 71
    1cf2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cf6:	18 16       	cp	r1, r24
    1cf8:	4c f5       	brge	.+82     	; 0x1d4c <Send_DATA+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfa:	69 8d       	ldd	r22, Y+25	; 0x19
    1cfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e2       	ldi	r20, 0x20	; 32
    1d08:	51 e4       	ldi	r21, 0x41	; 65
    1d0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	bc 01       	movw	r22, r24
    1d14:	cd 01       	movw	r24, r26
    1d16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	9c 8b       	std	Y+20, r25	; 0x14
    1d20:	8b 8b       	std	Y+19, r24	; 0x13
    1d22:	0f c0       	rjmp	.+30     	; 0x1d42 <Send_DATA+0x1d6>
    1d24:	80 e9       	ldi	r24, 0x90	; 144
    1d26:	91 e0       	ldi	r25, 0x01	; 1
    1d28:	9a 8b       	std	Y+18, r25	; 0x12
    1d2a:	89 8b       	std	Y+17, r24	; 0x11
    1d2c:	89 89       	ldd	r24, Y+17	; 0x11
    1d2e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	f1 f7       	brne	.-4      	; 0x1d30 <Send_DATA+0x1c4>
    1d34:	9a 8b       	std	Y+18, r25	; 0x12
    1d36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d38:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	9c 8b       	std	Y+20, r25	; 0x14
    1d40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d42:	8b 89       	ldd	r24, Y+19	; 0x13
    1d44:	9c 89       	ldd	r25, Y+20	; 0x14
    1d46:	00 97       	sbiw	r24, 0x00	; 0
    1d48:	69 f7       	brne	.-38     	; 0x1d24 <Send_DATA+0x1b8>
    1d4a:	14 c0       	rjmp	.+40     	; 0x1d74 <Send_DATA+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d50:	8f 89       	ldd	r24, Y+23	; 0x17
    1d52:	98 8d       	ldd	r25, Y+24	; 0x18
    1d54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	9c 8b       	std	Y+20, r25	; 0x14
    1d5e:	8b 8b       	std	Y+19, r24	; 0x13
    1d60:	8b 89       	ldd	r24, Y+19	; 0x13
    1d62:	9c 89       	ldd	r25, Y+20	; 0x14
    1d64:	98 8b       	std	Y+16, r25	; 0x10
    1d66:	8f 87       	std	Y+15, r24	; 0x0f
    1d68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d6a:	98 89       	ldd	r25, Y+16	; 0x10
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	f1 f7       	brne	.-4      	; 0x1d6c <Send_DATA+0x200>
    1d70:	98 8b       	std	Y+16, r25	; 0x10
    1d72:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);					//Delay until Enable Start
	LCD_DATA_PORT = data; 			//Send data to data pins
    1d74:	e8 e3       	ldi	r30, 0x38	; 56
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d7a:	80 83       	st	Z, r24
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	a0 e8       	ldi	r26, 0x80	; 128
    1d82:	bf e3       	ldi	r27, 0x3F	; 63
    1d84:	8b 87       	std	Y+11, r24	; 0x0b
    1d86:	9c 87       	std	Y+12, r25	; 0x0c
    1d88:	ad 87       	std	Y+13, r26	; 0x0d
    1d8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	4a e7       	ldi	r20, 0x7A	; 122
    1d9a:	55 e4       	ldi	r21, 0x45	; 69
    1d9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	8f 83       	std	Y+7, r24	; 0x07
    1da6:	98 87       	std	Y+8, r25	; 0x08
    1da8:	a9 87       	std	Y+9, r26	; 0x09
    1daa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dac:	6f 81       	ldd	r22, Y+7	; 0x07
    1dae:	78 85       	ldd	r23, Y+8	; 0x08
    1db0:	89 85       	ldd	r24, Y+9	; 0x09
    1db2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e8       	ldi	r20, 0x80	; 128
    1dba:	5f e3       	ldi	r21, 0x3F	; 63
    1dbc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dc0:	88 23       	and	r24, r24
    1dc2:	2c f4       	brge	.+10     	; 0x1dce <Send_DATA+0x262>
		__ticks = 1;
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	9e 83       	std	Y+6, r25	; 0x06
    1dca:	8d 83       	std	Y+5, r24	; 0x05
    1dcc:	3f c0       	rjmp	.+126    	; 0x1e4c <Send_DATA+0x2e0>
	else if (__tmp > 65535)
    1dce:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd0:	78 85       	ldd	r23, Y+8	; 0x08
    1dd2:	89 85       	ldd	r24, Y+9	; 0x09
    1dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	3f ef       	ldi	r19, 0xFF	; 255
    1dda:	4f e7       	ldi	r20, 0x7F	; 127
    1ddc:	57 e4       	ldi	r21, 0x47	; 71
    1dde:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1de2:	18 16       	cp	r1, r24
    1de4:	4c f5       	brge	.+82     	; 0x1e38 <Send_DATA+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	40 e2       	ldi	r20, 0x20	; 32
    1df4:	51 e4       	ldi	r21, 0x41	; 65
    1df6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	bc 01       	movw	r22, r24
    1e00:	cd 01       	movw	r24, r26
    1e02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	9e 83       	std	Y+6, r25	; 0x06
    1e0c:	8d 83       	std	Y+5, r24	; 0x05
    1e0e:	0f c0       	rjmp	.+30     	; 0x1e2e <Send_DATA+0x2c2>
    1e10:	80 e9       	ldi	r24, 0x90	; 144
    1e12:	91 e0       	ldi	r25, 0x01	; 1
    1e14:	9c 83       	std	Y+4, r25	; 0x04
    1e16:	8b 83       	std	Y+3, r24	; 0x03
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <Send_DATA+0x2b0>
    1e20:	9c 83       	std	Y+4, r25	; 0x04
    1e22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e24:	8d 81       	ldd	r24, Y+5	; 0x05
    1e26:	9e 81       	ldd	r25, Y+6	; 0x06
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	9e 83       	std	Y+6, r25	; 0x06
    1e2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	9e 81       	ldd	r25, Y+6	; 0x06
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	69 f7       	brne	.-38     	; 0x1e10 <Send_DATA+0x2a4>
    1e36:	14 c0       	rjmp	.+40     	; 0x1e60 <Send_DATA+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e38:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3a:	78 85       	ldd	r23, Y+8	; 0x08
    1e3c:	89 85       	ldd	r24, Y+9	; 0x09
    1e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	9e 83       	std	Y+6, r25	; 0x06
    1e4a:	8d 83       	std	Y+5, r24	; 0x05
    1e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e50:	9a 83       	std	Y+2, r25	; 0x02
    1e52:	89 83       	std	Y+1, r24	; 0x01
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	9a 81       	ldd	r25, Y+2	; 0x02
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <Send_DATA+0x2ec>
    1e5c:	9a 83       	std	Y+2, r25	; 0x02
    1e5e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);					//Delay until data sending is finished
	CLEAR_BIT(LCD_CTRL_PORT, EN);	//Disable LCD
    1e60:	a2 e3       	ldi	r26, 0x32	; 50
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e2 e3       	ldi	r30, 0x32	; 50
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	8f 77       	andi	r24, 0x7F	; 127
    1e6c:	8c 93       	st	X, r24
}
    1e6e:	ab 96       	adiw	r28, 0x2b	; 43
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <Display_Str>:

void Display_Str (const u8 *str)	// Function to display string on LCD
{
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	00 d0       	rcall	.+0      	; 0x1e86 <Display_Str+0x6>
    1e86:	0f 92       	push	r0
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	9b 83       	std	Y+3, r25	; 0x03
    1e8e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1e90:	19 82       	std	Y+1, r1	; 0x01
    1e92:	0e c0       	rjmp	.+28     	; 0x1eb0 <Display_Str+0x30>
	while (str[i] != '\0')
	{
		Send_DATA (str[i]);
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	e2 0f       	add	r30, r18
    1ea2:	f3 1f       	adc	r31, r19
    1ea4:	80 81       	ld	r24, Z
    1ea6:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <Send_DATA>
		i++;
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	8f 5f       	subi	r24, 0xFF	; 255
    1eae:	89 83       	std	Y+1, r24	; 0x01
}

void Display_Str (const u8 *str)	// Function to display string on LCD
{
	u8 i=0;
	while (str[i] != '\0')
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eba:	fc 01       	movw	r30, r24
    1ebc:	e2 0f       	add	r30, r18
    1ebe:	f3 1f       	adc	r31, r19
    1ec0:	80 81       	ld	r24, Z
    1ec2:	88 23       	and	r24, r24
    1ec4:	39 f7       	brne	.-50     	; 0x1e94 <Display_Str+0x14>
	{
		Send_DATA (str[i]);
		i++;
	}
}
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <Go_To_Row_Col>:

void Go_To_Row_Col (u8 row, u8 col)	// Function for moving to a specific column and row on LCD
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	00 d0       	rcall	.+0      	; 0x1ed8 <Go_To_Row_Col+0x6>
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <Go_To_Row_Col+0x8>
    1eda:	0f 92       	push	r0
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	8a 83       	std	Y+2, r24	; 0x02
    1ee2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Address;
	switch (row)
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	3d 83       	std	Y+5, r19	; 0x05
    1eec:	2c 83       	std	Y+4, r18	; 0x04
    1eee:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef2:	81 30       	cpi	r24, 0x01	; 1
    1ef4:	91 05       	cpc	r25, r1
    1ef6:	c1 f0       	breq	.+48     	; 0x1f28 <Go_To_Row_Col+0x56>
    1ef8:	2c 81       	ldd	r18, Y+4	; 0x04
    1efa:	3d 81       	ldd	r19, Y+5	; 0x05
    1efc:	22 30       	cpi	r18, 0x02	; 2
    1efe:	31 05       	cpc	r19, r1
    1f00:	2c f4       	brge	.+10     	; 0x1f0c <Go_To_Row_Col+0x3a>
    1f02:	8c 81       	ldd	r24, Y+4	; 0x04
    1f04:	9d 81       	ldd	r25, Y+5	; 0x05
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	61 f0       	breq	.+24     	; 0x1f22 <Go_To_Row_Col+0x50>
    1f0a:	19 c0       	rjmp	.+50     	; 0x1f3e <Go_To_Row_Col+0x6c>
    1f0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f10:	22 30       	cpi	r18, 0x02	; 2
    1f12:	31 05       	cpc	r19, r1
    1f14:	69 f0       	breq	.+26     	; 0x1f30 <Go_To_Row_Col+0x5e>
    1f16:	8c 81       	ldd	r24, Y+4	; 0x04
    1f18:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1a:	83 30       	cpi	r24, 0x03	; 3
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	61 f0       	breq	.+24     	; 0x1f38 <Go_To_Row_Col+0x66>
    1f20:	0e c0       	rjmp	.+28     	; 0x1f3e <Go_To_Row_Col+0x6c>
	{
	case 0:
		Address = col;
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	89 83       	std	Y+1, r24	; 0x01
    1f26:	0b c0       	rjmp	.+22     	; 0x1f3e <Go_To_Row_Col+0x6c>
		break;
	case 1:
		Address = col + 0x40;
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	80 5c       	subi	r24, 0xC0	; 192
    1f2c:	89 83       	std	Y+1, r24	; 0x01
    1f2e:	07 c0       	rjmp	.+14     	; 0x1f3e <Go_To_Row_Col+0x6c>
		break;
	case 2:
		Address = col + 0x10;
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	80 5f       	subi	r24, 0xF0	; 240
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	03 c0       	rjmp	.+6      	; 0x1f3e <Go_To_Row_Col+0x6c>
		break;
	case 3:
		Address = col + 0x50;
    1f38:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3a:	80 5b       	subi	r24, 0xB0	; 176
    1f3c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	Send_CMD (Address | SET_CURSOR_LOCATION); //To move cursor to specific Address location
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	80 68       	ori	r24, 0x80	; 128
    1f42:	0e 94 2c 0c 	call	0x1858	; 0x1858 <Send_CMD>
}
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	08 95       	ret

00001f56 <LCD_CLEAR>:

void LCD_CLEAR (void)
{
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
	Send_CMD (CLEAR_COMMAND); //clearing the LCD
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	0e 94 2c 0c 	call	0x1858	; 0x1858 <Send_CMD>
}
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	08 95       	ret

00001f6a <Display_Str_Row_Col>:

void Display_Str_Row_Col (u8 row, u8 col, const u8 *str)	//Display string at specified row and column
{
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <Display_Str_Row_Col+0x6>
    1f70:	00 d0       	rcall	.+0      	; 0x1f72 <Display_Str_Row_Col+0x8>
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	89 83       	std	Y+1, r24	; 0x01
    1f78:	6a 83       	std	Y+2, r22	; 0x02
    1f7a:	5c 83       	std	Y+4, r21	; 0x04
    1f7c:	4b 83       	std	Y+3, r20	; 0x03
	Go_To_Row_Col (row,col);
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	6a 81       	ldd	r22, Y+2	; 0x02
    1f82:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <Go_To_Row_Col>
	Display_Str (str);
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8a:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <Display_Str>
}
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <Integer_TO_String>:

void Integer_TO_String (u8 value)	// Display an integer number on the screen
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	6f 97       	sbiw	r28, 0x1f	; 31
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 number_str[30];
	itoa (value, number_str, 10); // convert integer number to character string
    1fb2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fb4:	88 2f       	mov	r24, r24
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	9e 01       	movw	r18, r28
    1fba:	2f 5f       	subi	r18, 0xFF	; 255
    1fbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fbe:	b9 01       	movw	r22, r18
    1fc0:	4a e0       	ldi	r20, 0x0A	; 10
    1fc2:	50 e0       	ldi	r21, 0x00	; 0
    1fc4:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <itoa>
	Display_Str (number_str);
    1fc8:	ce 01       	movw	r24, r28
    1fca:	01 96       	adiw	r24, 0x01	; 1
    1fcc:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <Display_Str>
}
    1fd0:	6f 96       	adiw	r28, 0x1f	; 31
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	cd bf       	out	0x3d, r28	; 61
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <main>:
#include "../../MCAL/DIO/DIO.h"
#include "../../HAL/Keypad/keypad.h"
#include "../../HAL/Keypad/keypad_config.h"

int main ()
{
    1fe2:	0f 93       	push	r16
    1fe4:	1f 93       	push	r17
    1fe6:	df 93       	push	r29
    1fe8:	cf 93       	push	r28
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	cb 51       	subi	r28, 0x1B	; 27
    1ff0:	d1 40       	sbci	r29, 0x01	; 1
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	f8 94       	cli
    1ff6:	de bf       	out	0x3e, r29	; 62
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	cd bf       	out	0x3d, r28	; 61
	u8 key;
	u8 mode;
	u32 Saved_Pass = 1234;
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	ea 5e       	subi	r30, 0xEA	; 234
    2000:	fe 4f       	sbci	r31, 0xFE	; 254
    2002:	82 ed       	ldi	r24, 0xD2	; 210
    2004:	94 e0       	ldi	r25, 0x04	; 4
    2006:	91 83       	std	Z+1, r25	; 0x01
    2008:	80 83       	st	Z, r24
	u32 Reversed_Pass = 4321;
    200a:	fe 01       	movw	r30, r28
    200c:	ec 5e       	subi	r30, 0xEC	; 236
    200e:	fe 4f       	sbci	r31, 0xFE	; 254
    2010:	81 ee       	ldi	r24, 0xE1	; 225
    2012:	90 e1       	ldi	r25, 0x10	; 16
    2014:	91 83       	std	Z+1, r25	; 0x01
    2016:	80 83       	st	Z, r24
	u32 Get_Reversed_Pass = 0;     //Initialize the variable GET_reserved_pass
    2018:	fe 01       	movw	r30, r28
    201a:	ee 5e       	subi	r30, 0xEE	; 238
    201c:	fe 4f       	sbci	r31, 0xFE	; 254
    201e:	11 82       	std	Z+1, r1	; 0x01
    2020:	10 82       	st	Z, r1
	u32 Temp_Pass = 0;
    2022:	fe 01       	movw	r30, r28
    2024:	e0 5f       	subi	r30, 0xF0	; 240
    2026:	fe 4f       	sbci	r31, 0xFE	; 254
    2028:	11 82       	std	Z+1, r1	; 0x01
    202a:	10 82       	st	Z, r1
	u32 Comp_Pass =  0;
    202c:	fe 01       	movw	r30, r28
    202e:	e2 5f       	subi	r30, 0xF2	; 242
    2030:	fe 4f       	sbci	r31, 0xFE	; 254
    2032:	11 82       	std	Z+1, r1	; 0x01
    2034:	10 82       	st	Z, r1
	u8 motor_steps[2] = {6,3};
    2036:	fe 01       	movw	r30, r28
    2038:	e6 5e       	subi	r30, 0xE6	; 230
    203a:	fe 4f       	sbci	r31, 0xFE	; 254
    203c:	86 e0       	ldi	r24, 0x06	; 6
    203e:	80 83       	st	Z, r24
    2040:	fe 01       	movw	r30, r28
    2042:	e6 5e       	subi	r30, 0xE6	; 230
    2044:	fe 4f       	sbci	r31, 0xFE	; 254
    2046:	83 e0       	ldi	r24, 0x03	; 3
    2048:	81 83       	std	Z+1, r24	; 0x01
	Set_GroupDir(PORT_C,0x0F);
    204a:	82 e0       	ldi	r24, 0x02	; 2
    204c:	6f e0       	ldi	r22, 0x0F	; 15
    204e:	0e 94 bb 08 	call	0x1176	; 0x1176 <Set_GroupDir>
	Set_GroupLevel(PORT_C,0xF0);
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	60 ef       	ldi	r22, 0xF0	; 240
    2056:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <Set_GroupLevel>
	LCD_Init ();
    205a:	0e 94 3e 0a 	call	0x147c	; 0x147c <LCD_Init>
	Display_Str_Row_Col(0,2,"Welcome Home"); //sending a string to the LCD welcome home
    205e:	22 e6       	ldi	r18, 0x62	; 98
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	62 e0       	ldi	r22, 0x02	; 2
    2066:	a9 01       	movw	r20, r18
    2068:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <Display_Str_Row_Col>
    206c:	fe 01       	movw	r30, r28
    206e:	e9 5f       	subi	r30, 0xF9	; 249
    2070:	fe 4f       	sbci	r31, 0xFE	; 254
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	aa ef       	ldi	r26, 0xFA	; 250
    2078:	b3 e4       	ldi	r27, 0x43	; 67
    207a:	80 83       	st	Z, r24
    207c:	91 83       	std	Z+1, r25	; 0x01
    207e:	a2 83       	std	Z+2, r26	; 0x02
    2080:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2082:	8e 01       	movw	r16, r28
    2084:	0d 5f       	subi	r16, 0xFD	; 253
    2086:	1e 4f       	sbci	r17, 0xFE	; 254
    2088:	fe 01       	movw	r30, r28
    208a:	e9 5f       	subi	r30, 0xF9	; 249
    208c:	fe 4f       	sbci	r31, 0xFE	; 254
    208e:	60 81       	ld	r22, Z
    2090:	71 81       	ldd	r23, Z+1	; 0x01
    2092:	82 81       	ldd	r24, Z+2	; 0x02
    2094:	93 81       	ldd	r25, Z+3	; 0x03
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	4a e7       	ldi	r20, 0x7A	; 122
    209c:	55 e4       	ldi	r21, 0x45	; 69
    209e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	f8 01       	movw	r30, r16
    20a8:	80 83       	st	Z, r24
    20aa:	91 83       	std	Z+1, r25	; 0x01
    20ac:	a2 83       	std	Z+2, r26	; 0x02
    20ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20b0:	fe 01       	movw	r30, r28
    20b2:	ed 5f       	subi	r30, 0xFD	; 253
    20b4:	fe 4f       	sbci	r31, 0xFE	; 254
    20b6:	60 81       	ld	r22, Z
    20b8:	71 81       	ldd	r23, Z+1	; 0x01
    20ba:	82 81       	ldd	r24, Z+2	; 0x02
    20bc:	93 81       	ldd	r25, Z+3	; 0x03
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	40 e8       	ldi	r20, 0x80	; 128
    20c4:	5f e3       	ldi	r21, 0x3F	; 63
    20c6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20ca:	88 23       	and	r24, r24
    20cc:	44 f4       	brge	.+16     	; 0x20de <main+0xfc>
		__ticks = 1;
    20ce:	fe 01       	movw	r30, r28
    20d0:	ef 5f       	subi	r30, 0xFF	; 255
    20d2:	fe 4f       	sbci	r31, 0xFE	; 254
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	91 83       	std	Z+1, r25	; 0x01
    20da:	80 83       	st	Z, r24
    20dc:	64 c0       	rjmp	.+200    	; 0x21a6 <main+0x1c4>
	else if (__tmp > 65535)
    20de:	fe 01       	movw	r30, r28
    20e0:	ed 5f       	subi	r30, 0xFD	; 253
    20e2:	fe 4f       	sbci	r31, 0xFE	; 254
    20e4:	60 81       	ld	r22, Z
    20e6:	71 81       	ldd	r23, Z+1	; 0x01
    20e8:	82 81       	ldd	r24, Z+2	; 0x02
    20ea:	93 81       	ldd	r25, Z+3	; 0x03
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	3f ef       	ldi	r19, 0xFF	; 255
    20f0:	4f e7       	ldi	r20, 0x7F	; 127
    20f2:	57 e4       	ldi	r21, 0x47	; 71
    20f4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20f8:	18 16       	cp	r1, r24
    20fa:	0c f0       	brlt	.+2      	; 0x20fe <main+0x11c>
    20fc:	43 c0       	rjmp	.+134    	; 0x2184 <main+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fe:	fe 01       	movw	r30, r28
    2100:	e9 5f       	subi	r30, 0xF9	; 249
    2102:	fe 4f       	sbci	r31, 0xFE	; 254
    2104:	60 81       	ld	r22, Z
    2106:	71 81       	ldd	r23, Z+1	; 0x01
    2108:	82 81       	ldd	r24, Z+2	; 0x02
    210a:	93 81       	ldd	r25, Z+3	; 0x03
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e2       	ldi	r20, 0x20	; 32
    2112:	51 e4       	ldi	r21, 0x41	; 65
    2114:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	8e 01       	movw	r16, r28
    211e:	0f 5f       	subi	r16, 0xFF	; 255
    2120:	1e 4f       	sbci	r17, 0xFE	; 254
    2122:	bc 01       	movw	r22, r24
    2124:	cd 01       	movw	r24, r26
    2126:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	f8 01       	movw	r30, r16
    2130:	91 83       	std	Z+1, r25	; 0x01
    2132:	80 83       	st	Z, r24
    2134:	1f c0       	rjmp	.+62     	; 0x2174 <main+0x192>
    2136:	fe 01       	movw	r30, r28
    2138:	e1 50       	subi	r30, 0x01	; 1
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	80 e9       	ldi	r24, 0x90	; 144
    213e:	91 e0       	ldi	r25, 0x01	; 1
    2140:	91 83       	std	Z+1, r25	; 0x01
    2142:	80 83       	st	Z, r24
    2144:	fe 01       	movw	r30, r28
    2146:	e1 50       	subi	r30, 0x01	; 1
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	80 81       	ld	r24, Z
    214c:	91 81       	ldd	r25, Z+1	; 0x01
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	f1 f7       	brne	.-4      	; 0x214e <main+0x16c>
    2152:	fe 01       	movw	r30, r28
    2154:	e1 50       	subi	r30, 0x01	; 1
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	91 83       	std	Z+1, r25	; 0x01
    215a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215c:	de 01       	movw	r26, r28
    215e:	af 5f       	subi	r26, 0xFF	; 255
    2160:	be 4f       	sbci	r27, 0xFE	; 254
    2162:	fe 01       	movw	r30, r28
    2164:	ef 5f       	subi	r30, 0xFF	; 255
    2166:	fe 4f       	sbci	r31, 0xFE	; 254
    2168:	80 81       	ld	r24, Z
    216a:	91 81       	ldd	r25, Z+1	; 0x01
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	11 96       	adiw	r26, 0x01	; 1
    2170:	9c 93       	st	X, r25
    2172:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2174:	fe 01       	movw	r30, r28
    2176:	ef 5f       	subi	r30, 0xFF	; 255
    2178:	fe 4f       	sbci	r31, 0xFE	; 254
    217a:	80 81       	ld	r24, Z
    217c:	91 81       	ldd	r25, Z+1	; 0x01
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	d1 f6       	brne	.-76     	; 0x2136 <main+0x154>
    2182:	27 c0       	rjmp	.+78     	; 0x21d2 <main+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2184:	8e 01       	movw	r16, r28
    2186:	0f 5f       	subi	r16, 0xFF	; 255
    2188:	1e 4f       	sbci	r17, 0xFE	; 254
    218a:	fe 01       	movw	r30, r28
    218c:	ed 5f       	subi	r30, 0xFD	; 253
    218e:	fe 4f       	sbci	r31, 0xFE	; 254
    2190:	60 81       	ld	r22, Z
    2192:	71 81       	ldd	r23, Z+1	; 0x01
    2194:	82 81       	ldd	r24, Z+2	; 0x02
    2196:	93 81       	ldd	r25, Z+3	; 0x03
    2198:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	f8 01       	movw	r30, r16
    21a2:	91 83       	std	Z+1, r25	; 0x01
    21a4:	80 83       	st	Z, r24
    21a6:	de 01       	movw	r26, r28
    21a8:	a3 50       	subi	r26, 0x03	; 3
    21aa:	bf 4f       	sbci	r27, 0xFF	; 255
    21ac:	fe 01       	movw	r30, r28
    21ae:	ef 5f       	subi	r30, 0xFF	; 255
    21b0:	fe 4f       	sbci	r31, 0xFE	; 254
    21b2:	80 81       	ld	r24, Z
    21b4:	91 81       	ldd	r25, Z+1	; 0x01
    21b6:	8d 93       	st	X+, r24
    21b8:	9c 93       	st	X, r25
    21ba:	fe 01       	movw	r30, r28
    21bc:	e3 50       	subi	r30, 0x03	; 3
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	80 81       	ld	r24, Z
    21c2:	91 81       	ldd	r25, Z+1	; 0x01
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <main+0x1e2>
    21c8:	fe 01       	movw	r30, r28
    21ca:	e3 50       	subi	r30, 0x03	; 3
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	91 83       	std	Z+1, r25	; 0x01
    21d0:	80 83       	st	Z, r24
	_delay_ms(500);
	while(1)
	{
		LCD_CLEAR();                                // clear the LCD
    21d2:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_CLEAR>
		Display_Str_Row_Col(0,2,"Choose a Mode");   //sending a string to the LCD choose a mode
    21d6:	2f e6       	ldi	r18, 0x6F	; 111
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	62 e0       	ldi	r22, 0x02	; 2
    21de:	a9 01       	movw	r20, r18
    21e0:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <Display_Str_Row_Col>
    21e4:	fe 01       	movw	r30, r28
    21e6:	e7 50       	subi	r30, 0x07	; 7
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	a8 ec       	ldi	r26, 0xC8	; 200
    21f0:	b3 e4       	ldi	r27, 0x43	; 67
    21f2:	80 83       	st	Z, r24
    21f4:	91 83       	std	Z+1, r25	; 0x01
    21f6:	a2 83       	std	Z+2, r26	; 0x02
    21f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fa:	8e 01       	movw	r16, r28
    21fc:	0b 50       	subi	r16, 0x0B	; 11
    21fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2200:	fe 01       	movw	r30, r28
    2202:	e7 50       	subi	r30, 0x07	; 7
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	60 81       	ld	r22, Z
    2208:	71 81       	ldd	r23, Z+1	; 0x01
    220a:	82 81       	ldd	r24, Z+2	; 0x02
    220c:	93 81       	ldd	r25, Z+3	; 0x03
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	4a e7       	ldi	r20, 0x7A	; 122
    2214:	55 e4       	ldi	r21, 0x45	; 69
    2216:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	f8 01       	movw	r30, r16
    2220:	80 83       	st	Z, r24
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	a2 83       	std	Z+2, r26	; 0x02
    2226:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2228:	fe 01       	movw	r30, r28
    222a:	eb 50       	subi	r30, 0x0B	; 11
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	60 81       	ld	r22, Z
    2230:	71 81       	ldd	r23, Z+1	; 0x01
    2232:	82 81       	ldd	r24, Z+2	; 0x02
    2234:	93 81       	ldd	r25, Z+3	; 0x03
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e8       	ldi	r20, 0x80	; 128
    223c:	5f e3       	ldi	r21, 0x3F	; 63
    223e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2242:	88 23       	and	r24, r24
    2244:	44 f4       	brge	.+16     	; 0x2256 <main+0x274>
		__ticks = 1;
    2246:	fe 01       	movw	r30, r28
    2248:	ed 50       	subi	r30, 0x0D	; 13
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	91 83       	std	Z+1, r25	; 0x01
    2252:	80 83       	st	Z, r24
    2254:	64 c0       	rjmp	.+200    	; 0x231e <main+0x33c>
	else if (__tmp > 65535)
    2256:	fe 01       	movw	r30, r28
    2258:	eb 50       	subi	r30, 0x0B	; 11
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	60 81       	ld	r22, Z
    225e:	71 81       	ldd	r23, Z+1	; 0x01
    2260:	82 81       	ldd	r24, Z+2	; 0x02
    2262:	93 81       	ldd	r25, Z+3	; 0x03
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	3f ef       	ldi	r19, 0xFF	; 255
    2268:	4f e7       	ldi	r20, 0x7F	; 127
    226a:	57 e4       	ldi	r21, 0x47	; 71
    226c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2270:	18 16       	cp	r1, r24
    2272:	0c f0       	brlt	.+2      	; 0x2276 <main+0x294>
    2274:	43 c0       	rjmp	.+134    	; 0x22fc <main+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2276:	fe 01       	movw	r30, r28
    2278:	e7 50       	subi	r30, 0x07	; 7
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	60 81       	ld	r22, Z
    227e:	71 81       	ldd	r23, Z+1	; 0x01
    2280:	82 81       	ldd	r24, Z+2	; 0x02
    2282:	93 81       	ldd	r25, Z+3	; 0x03
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e2       	ldi	r20, 0x20	; 32
    228a:	51 e4       	ldi	r21, 0x41	; 65
    228c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	8e 01       	movw	r16, r28
    2296:	0d 50       	subi	r16, 0x0D	; 13
    2298:	1f 4f       	sbci	r17, 0xFF	; 255
    229a:	bc 01       	movw	r22, r24
    229c:	cd 01       	movw	r24, r26
    229e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	f8 01       	movw	r30, r16
    22a8:	91 83       	std	Z+1, r25	; 0x01
    22aa:	80 83       	st	Z, r24
    22ac:	1f c0       	rjmp	.+62     	; 0x22ec <main+0x30a>
    22ae:	fe 01       	movw	r30, r28
    22b0:	ef 50       	subi	r30, 0x0F	; 15
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	80 e9       	ldi	r24, 0x90	; 144
    22b6:	91 e0       	ldi	r25, 0x01	; 1
    22b8:	91 83       	std	Z+1, r25	; 0x01
    22ba:	80 83       	st	Z, r24
    22bc:	fe 01       	movw	r30, r28
    22be:	ef 50       	subi	r30, 0x0F	; 15
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 81       	ld	r24, Z
    22c4:	91 81       	ldd	r25, Z+1	; 0x01
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	f1 f7       	brne	.-4      	; 0x22c6 <main+0x2e4>
    22ca:	fe 01       	movw	r30, r28
    22cc:	ef 50       	subi	r30, 0x0F	; 15
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	91 83       	std	Z+1, r25	; 0x01
    22d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d4:	de 01       	movw	r26, r28
    22d6:	ad 50       	subi	r26, 0x0D	; 13
    22d8:	bf 4f       	sbci	r27, 0xFF	; 255
    22da:	fe 01       	movw	r30, r28
    22dc:	ed 50       	subi	r30, 0x0D	; 13
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	80 81       	ld	r24, Z
    22e2:	91 81       	ldd	r25, Z+1	; 0x01
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	11 96       	adiw	r26, 0x01	; 1
    22e8:	9c 93       	st	X, r25
    22ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ec:	fe 01       	movw	r30, r28
    22ee:	ed 50       	subi	r30, 0x0D	; 13
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	80 81       	ld	r24, Z
    22f4:	91 81       	ldd	r25, Z+1	; 0x01
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	d1 f6       	brne	.-76     	; 0x22ae <main+0x2cc>
    22fa:	27 c0       	rjmp	.+78     	; 0x234a <main+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fc:	8e 01       	movw	r16, r28
    22fe:	0d 50       	subi	r16, 0x0D	; 13
    2300:	1f 4f       	sbci	r17, 0xFF	; 255
    2302:	fe 01       	movw	r30, r28
    2304:	eb 50       	subi	r30, 0x0B	; 11
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	60 81       	ld	r22, Z
    230a:	71 81       	ldd	r23, Z+1	; 0x01
    230c:	82 81       	ldd	r24, Z+2	; 0x02
    230e:	93 81       	ldd	r25, Z+3	; 0x03
    2310:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	f8 01       	movw	r30, r16
    231a:	91 83       	std	Z+1, r25	; 0x01
    231c:	80 83       	st	Z, r24
    231e:	de 01       	movw	r26, r28
    2320:	a1 51       	subi	r26, 0x11	; 17
    2322:	bf 4f       	sbci	r27, 0xFF	; 255
    2324:	fe 01       	movw	r30, r28
    2326:	ed 50       	subi	r30, 0x0D	; 13
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	80 81       	ld	r24, Z
    232c:	91 81       	ldd	r25, Z+1	; 0x01
    232e:	8d 93       	st	X+, r24
    2330:	9c 93       	st	X, r25
    2332:	fe 01       	movw	r30, r28
    2334:	e1 51       	subi	r30, 0x11	; 17
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 81       	ld	r24, Z
    233a:	91 81       	ldd	r25, Z+1	; 0x01
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	f1 f7       	brne	.-4      	; 0x233c <main+0x35a>
    2340:	fe 01       	movw	r30, r28
    2342:	e1 51       	subi	r30, 0x11	; 17
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	91 83       	std	Z+1, r25	; 0x01
    2348:	80 83       	st	Z, r24
		_delay_ms(400);
		LCD_CLEAR();
    234a:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_CLEAR>
		Display_Str("1-Enter Password");
    234e:	8d e7       	ldi	r24, 0x7D	; 125
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <Display_Str>
		Display_Str_Row_Col(1,0,"2-Change Password");
    2356:	2e e8       	ldi	r18, 0x8E	; 142
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	60 e0       	ldi	r22, 0x00	; 0
    235e:	a9 01       	movw	r20, r18
    2360:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <Display_Str_Row_Col>
		mode = Keypad_GetPressedKey();            // move the data of Keypad_getpressedkey to the variable mode
    2364:	0e 94 3d 09 	call	0x127a	; 0x127a <Keypad_GetPressedKey>
    2368:	fe 01       	movw	r30, r28
    236a:	e8 5e       	subi	r30, 0xE8	; 232
    236c:	fe 4f       	sbci	r31, 0xFE	; 254
    236e:	80 83       	st	Z, r24

		// wait the user to enter the password
		if ( mode == 1)
    2370:	fe 01       	movw	r30, r28
    2372:	e8 5e       	subi	r30, 0xE8	; 232
    2374:	fe 4f       	sbci	r31, 0xFE	; 254
    2376:	80 81       	ld	r24, Z
    2378:	81 30       	cpi	r24, 0x01	; 1
    237a:	09 f0       	breq	.+2      	; 0x237e <main+0x39c>
    237c:	cf c5       	rjmp	.+2974   	; 0x2f1c <main+0xf3a>
		{
			LCD_CLEAR();
    237e:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_CLEAR>
			Display_Str("Password : ");
    2382:	80 ea       	ldi	r24, 0xA0	; 160
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <Display_Str>
			for (u8 i = 0; i<4 ;i++)
    238a:	fe 01       	movw	r30, r28
    238c:	e3 5f       	subi	r30, 0xF3	; 243
    238e:	fe 4f       	sbci	r31, 0xFE	; 254
    2390:	10 82       	st	Z, r1
    2392:	7a c2       	rjmp	.+1268   	; 0x2888 <main+0x8a6>
			{
				Send_CMD(CURSOR_ON); // turn on the cursor
    2394:	8e e0       	ldi	r24, 0x0E	; 14
    2396:	0e 94 2c 0c 	call	0x1858	; 0x1858 <Send_CMD>
    239a:	fe 01       	movw	r30, r28
    239c:	e5 51       	subi	r30, 0x15	; 21
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	a8 ec       	ldi	r26, 0xC8	; 200
    23a6:	b2 e4       	ldi	r27, 0x42	; 66
    23a8:	80 83       	st	Z, r24
    23aa:	91 83       	std	Z+1, r25	; 0x01
    23ac:	a2 83       	std	Z+2, r26	; 0x02
    23ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b0:	8e 01       	movw	r16, r28
    23b2:	09 51       	subi	r16, 0x19	; 25
    23b4:	1f 4f       	sbci	r17, 0xFF	; 255
    23b6:	fe 01       	movw	r30, r28
    23b8:	e5 51       	subi	r30, 0x15	; 21
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	60 81       	ld	r22, Z
    23be:	71 81       	ldd	r23, Z+1	; 0x01
    23c0:	82 81       	ldd	r24, Z+2	; 0x02
    23c2:	93 81       	ldd	r25, Z+3	; 0x03
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	4a e7       	ldi	r20, 0x7A	; 122
    23ca:	55 e4       	ldi	r21, 0x45	; 69
    23cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	f8 01       	movw	r30, r16
    23d6:	80 83       	st	Z, r24
    23d8:	91 83       	std	Z+1, r25	; 0x01
    23da:	a2 83       	std	Z+2, r26	; 0x02
    23dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23de:	fe 01       	movw	r30, r28
    23e0:	e9 51       	subi	r30, 0x19	; 25
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	60 81       	ld	r22, Z
    23e6:	71 81       	ldd	r23, Z+1	; 0x01
    23e8:	82 81       	ldd	r24, Z+2	; 0x02
    23ea:	93 81       	ldd	r25, Z+3	; 0x03
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e8       	ldi	r20, 0x80	; 128
    23f2:	5f e3       	ldi	r21, 0x3F	; 63
    23f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23f8:	88 23       	and	r24, r24
    23fa:	44 f4       	brge	.+16     	; 0x240c <main+0x42a>
		__ticks = 1;
    23fc:	fe 01       	movw	r30, r28
    23fe:	eb 51       	subi	r30, 0x1B	; 27
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	91 83       	std	Z+1, r25	; 0x01
    2408:	80 83       	st	Z, r24
    240a:	64 c0       	rjmp	.+200    	; 0x24d4 <main+0x4f2>
	else if (__tmp > 65535)
    240c:	fe 01       	movw	r30, r28
    240e:	e9 51       	subi	r30, 0x19	; 25
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	60 81       	ld	r22, Z
    2414:	71 81       	ldd	r23, Z+1	; 0x01
    2416:	82 81       	ldd	r24, Z+2	; 0x02
    2418:	93 81       	ldd	r25, Z+3	; 0x03
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	3f ef       	ldi	r19, 0xFF	; 255
    241e:	4f e7       	ldi	r20, 0x7F	; 127
    2420:	57 e4       	ldi	r21, 0x47	; 71
    2422:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2426:	18 16       	cp	r1, r24
    2428:	0c f0       	brlt	.+2      	; 0x242c <main+0x44a>
    242a:	43 c0       	rjmp	.+134    	; 0x24b2 <main+0x4d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242c:	fe 01       	movw	r30, r28
    242e:	e5 51       	subi	r30, 0x15	; 21
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	60 81       	ld	r22, Z
    2434:	71 81       	ldd	r23, Z+1	; 0x01
    2436:	82 81       	ldd	r24, Z+2	; 0x02
    2438:	93 81       	ldd	r25, Z+3	; 0x03
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e2       	ldi	r20, 0x20	; 32
    2440:	51 e4       	ldi	r21, 0x41	; 65
    2442:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	8e 01       	movw	r16, r28
    244c:	0b 51       	subi	r16, 0x1B	; 27
    244e:	1f 4f       	sbci	r17, 0xFF	; 255
    2450:	bc 01       	movw	r22, r24
    2452:	cd 01       	movw	r24, r26
    2454:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	f8 01       	movw	r30, r16
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	80 83       	st	Z, r24
    2462:	1f c0       	rjmp	.+62     	; 0x24a2 <main+0x4c0>
    2464:	fe 01       	movw	r30, r28
    2466:	ed 51       	subi	r30, 0x1D	; 29
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	80 e9       	ldi	r24, 0x90	; 144
    246c:	91 e0       	ldi	r25, 0x01	; 1
    246e:	91 83       	std	Z+1, r25	; 0x01
    2470:	80 83       	st	Z, r24
    2472:	fe 01       	movw	r30, r28
    2474:	ed 51       	subi	r30, 0x1D	; 29
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	80 81       	ld	r24, Z
    247a:	91 81       	ldd	r25, Z+1	; 0x01
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <main+0x49a>
    2480:	fe 01       	movw	r30, r28
    2482:	ed 51       	subi	r30, 0x1D	; 29
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	91 83       	std	Z+1, r25	; 0x01
    2488:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    248a:	de 01       	movw	r26, r28
    248c:	ab 51       	subi	r26, 0x1B	; 27
    248e:	bf 4f       	sbci	r27, 0xFF	; 255
    2490:	fe 01       	movw	r30, r28
    2492:	eb 51       	subi	r30, 0x1B	; 27
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	80 81       	ld	r24, Z
    2498:	91 81       	ldd	r25, Z+1	; 0x01
    249a:	01 97       	sbiw	r24, 0x01	; 1
    249c:	11 96       	adiw	r26, 0x01	; 1
    249e:	9c 93       	st	X, r25
    24a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a2:	fe 01       	movw	r30, r28
    24a4:	eb 51       	subi	r30, 0x1B	; 27
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	80 81       	ld	r24, Z
    24aa:	91 81       	ldd	r25, Z+1	; 0x01
    24ac:	00 97       	sbiw	r24, 0x00	; 0
    24ae:	d1 f6       	brne	.-76     	; 0x2464 <main+0x482>
    24b0:	27 c0       	rjmp	.+78     	; 0x2500 <main+0x51e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b2:	8e 01       	movw	r16, r28
    24b4:	0b 51       	subi	r16, 0x1B	; 27
    24b6:	1f 4f       	sbci	r17, 0xFF	; 255
    24b8:	fe 01       	movw	r30, r28
    24ba:	e9 51       	subi	r30, 0x19	; 25
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	60 81       	ld	r22, Z
    24c0:	71 81       	ldd	r23, Z+1	; 0x01
    24c2:	82 81       	ldd	r24, Z+2	; 0x02
    24c4:	93 81       	ldd	r25, Z+3	; 0x03
    24c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	f8 01       	movw	r30, r16
    24d0:	91 83       	std	Z+1, r25	; 0x01
    24d2:	80 83       	st	Z, r24
    24d4:	de 01       	movw	r26, r28
    24d6:	af 51       	subi	r26, 0x1F	; 31
    24d8:	bf 4f       	sbci	r27, 0xFF	; 255
    24da:	fe 01       	movw	r30, r28
    24dc:	eb 51       	subi	r30, 0x1B	; 27
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	80 81       	ld	r24, Z
    24e2:	91 81       	ldd	r25, Z+1	; 0x01
    24e4:	8d 93       	st	X+, r24
    24e6:	9c 93       	st	X, r25
    24e8:	fe 01       	movw	r30, r28
    24ea:	ef 51       	subi	r30, 0x1F	; 31
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	80 81       	ld	r24, Z
    24f0:	91 81       	ldd	r25, Z+1	; 0x01
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <main+0x510>
    24f6:	fe 01       	movw	r30, r28
    24f8:	ef 51       	subi	r30, 0x1F	; 31
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	80 83       	st	Z, r24
				_delay_ms(100);      // delay before sending another command
				Send_CMD(CURSOR_OFF);// turn off the cursor
    2500:	8c e0       	ldi	r24, 0x0C	; 12
    2502:	0e 94 2c 0c 	call	0x1858	; 0x1858 <Send_CMD>

				key = Keypad_GetPressedKey();
    2506:	0e 94 3d 09 	call	0x127a	; 0x127a <Keypad_GetPressedKey>
    250a:	fe 01       	movw	r30, r28
    250c:	e7 5e       	subi	r30, 0xE7	; 231
    250e:	fe 4f       	sbci	r31, 0xFE	; 254
    2510:	80 83       	st	Z, r24
				if ((key>=0) && (key <=9))  // to make the password only numbers
    2512:	fe 01       	movw	r30, r28
    2514:	e7 5e       	subi	r30, 0xE7	; 231
    2516:	fe 4f       	sbci	r31, 0xFE	; 254
    2518:	80 81       	ld	r24, Z
    251a:	8a 30       	cpi	r24, 0x0A	; 10
    251c:	08 f0       	brcs	.+2      	; 0x2520 <main+0x53e>
    251e:	f6 c0       	rjmp	.+492    	; 0x270c <main+0x72a>
				{
					Integer_TO_String (key);
    2520:	fe 01       	movw	r30, r28
    2522:	e7 5e       	subi	r30, 0xE7	; 231
    2524:	fe 4f       	sbci	r31, 0xFE	; 254
    2526:	80 81       	ld	r24, Z
    2528:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <Integer_TO_String>
    252c:	fe 01       	movw	r30, r28
    252e:	e3 52       	subi	r30, 0x23	; 35
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	a8 e4       	ldi	r26, 0x48	; 72
    2538:	b3 e4       	ldi	r27, 0x43	; 67
    253a:	80 83       	st	Z, r24
    253c:	91 83       	std	Z+1, r25	; 0x01
    253e:	a2 83       	std	Z+2, r26	; 0x02
    2540:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2542:	8e 01       	movw	r16, r28
    2544:	07 52       	subi	r16, 0x27	; 39
    2546:	1f 4f       	sbci	r17, 0xFF	; 255
    2548:	fe 01       	movw	r30, r28
    254a:	e3 52       	subi	r30, 0x23	; 35
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	60 81       	ld	r22, Z
    2550:	71 81       	ldd	r23, Z+1	; 0x01
    2552:	82 81       	ldd	r24, Z+2	; 0x02
    2554:	93 81       	ldd	r25, Z+3	; 0x03
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	4a e7       	ldi	r20, 0x7A	; 122
    255c:	55 e4       	ldi	r21, 0x45	; 69
    255e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	f8 01       	movw	r30, r16
    2568:	80 83       	st	Z, r24
    256a:	91 83       	std	Z+1, r25	; 0x01
    256c:	a2 83       	std	Z+2, r26	; 0x02
    256e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2570:	fe 01       	movw	r30, r28
    2572:	e7 52       	subi	r30, 0x27	; 39
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	60 81       	ld	r22, Z
    2578:	71 81       	ldd	r23, Z+1	; 0x01
    257a:	82 81       	ldd	r24, Z+2	; 0x02
    257c:	93 81       	ldd	r25, Z+3	; 0x03
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e8       	ldi	r20, 0x80	; 128
    2584:	5f e3       	ldi	r21, 0x3F	; 63
    2586:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    258a:	88 23       	and	r24, r24
    258c:	44 f4       	brge	.+16     	; 0x259e <main+0x5bc>
		__ticks = 1;
    258e:	fe 01       	movw	r30, r28
    2590:	e9 52       	subi	r30, 0x29	; 41
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	91 83       	std	Z+1, r25	; 0x01
    259a:	80 83       	st	Z, r24
    259c:	64 c0       	rjmp	.+200    	; 0x2666 <main+0x684>
	else if (__tmp > 65535)
    259e:	fe 01       	movw	r30, r28
    25a0:	e7 52       	subi	r30, 0x27	; 39
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	60 81       	ld	r22, Z
    25a6:	71 81       	ldd	r23, Z+1	; 0x01
    25a8:	82 81       	ldd	r24, Z+2	; 0x02
    25aa:	93 81       	ldd	r25, Z+3	; 0x03
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	3f ef       	ldi	r19, 0xFF	; 255
    25b0:	4f e7       	ldi	r20, 0x7F	; 127
    25b2:	57 e4       	ldi	r21, 0x47	; 71
    25b4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25b8:	18 16       	cp	r1, r24
    25ba:	0c f0       	brlt	.+2      	; 0x25be <main+0x5dc>
    25bc:	43 c0       	rjmp	.+134    	; 0x2644 <main+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25be:	fe 01       	movw	r30, r28
    25c0:	e3 52       	subi	r30, 0x23	; 35
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	60 81       	ld	r22, Z
    25c6:	71 81       	ldd	r23, Z+1	; 0x01
    25c8:	82 81       	ldd	r24, Z+2	; 0x02
    25ca:	93 81       	ldd	r25, Z+3	; 0x03
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e2       	ldi	r20, 0x20	; 32
    25d2:	51 e4       	ldi	r21, 0x41	; 65
    25d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	8e 01       	movw	r16, r28
    25de:	09 52       	subi	r16, 0x29	; 41
    25e0:	1f 4f       	sbci	r17, 0xFF	; 255
    25e2:	bc 01       	movw	r22, r24
    25e4:	cd 01       	movw	r24, r26
    25e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	f8 01       	movw	r30, r16
    25f0:	91 83       	std	Z+1, r25	; 0x01
    25f2:	80 83       	st	Z, r24
    25f4:	1f c0       	rjmp	.+62     	; 0x2634 <main+0x652>
    25f6:	fe 01       	movw	r30, r28
    25f8:	eb 52       	subi	r30, 0x2B	; 43
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	80 e9       	ldi	r24, 0x90	; 144
    25fe:	91 e0       	ldi	r25, 0x01	; 1
    2600:	91 83       	std	Z+1, r25	; 0x01
    2602:	80 83       	st	Z, r24
    2604:	fe 01       	movw	r30, r28
    2606:	eb 52       	subi	r30, 0x2B	; 43
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	80 81       	ld	r24, Z
    260c:	91 81       	ldd	r25, Z+1	; 0x01
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	f1 f7       	brne	.-4      	; 0x260e <main+0x62c>
    2612:	fe 01       	movw	r30, r28
    2614:	eb 52       	subi	r30, 0x2B	; 43
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	91 83       	std	Z+1, r25	; 0x01
    261a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    261c:	de 01       	movw	r26, r28
    261e:	a9 52       	subi	r26, 0x29	; 41
    2620:	bf 4f       	sbci	r27, 0xFF	; 255
    2622:	fe 01       	movw	r30, r28
    2624:	e9 52       	subi	r30, 0x29	; 41
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	80 81       	ld	r24, Z
    262a:	91 81       	ldd	r25, Z+1	; 0x01
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	11 96       	adiw	r26, 0x01	; 1
    2630:	9c 93       	st	X, r25
    2632:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2634:	fe 01       	movw	r30, r28
    2636:	e9 52       	subi	r30, 0x29	; 41
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	80 81       	ld	r24, Z
    263c:	91 81       	ldd	r25, Z+1	; 0x01
    263e:	00 97       	sbiw	r24, 0x00	; 0
    2640:	d1 f6       	brne	.-76     	; 0x25f6 <main+0x614>
    2642:	27 c0       	rjmp	.+78     	; 0x2692 <main+0x6b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2644:	8e 01       	movw	r16, r28
    2646:	09 52       	subi	r16, 0x29	; 41
    2648:	1f 4f       	sbci	r17, 0xFF	; 255
    264a:	fe 01       	movw	r30, r28
    264c:	e7 52       	subi	r30, 0x27	; 39
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	60 81       	ld	r22, Z
    2652:	71 81       	ldd	r23, Z+1	; 0x01
    2654:	82 81       	ldd	r24, Z+2	; 0x02
    2656:	93 81       	ldd	r25, Z+3	; 0x03
    2658:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	f8 01       	movw	r30, r16
    2662:	91 83       	std	Z+1, r25	; 0x01
    2664:	80 83       	st	Z, r24
    2666:	de 01       	movw	r26, r28
    2668:	ad 52       	subi	r26, 0x2D	; 45
    266a:	bf 4f       	sbci	r27, 0xFF	; 255
    266c:	fe 01       	movw	r30, r28
    266e:	e9 52       	subi	r30, 0x29	; 41
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	80 81       	ld	r24, Z
    2674:	91 81       	ldd	r25, Z+1	; 0x01
    2676:	8d 93       	st	X+, r24
    2678:	9c 93       	st	X, r25
    267a:	fe 01       	movw	r30, r28
    267c:	ed 52       	subi	r30, 0x2D	; 45
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	80 81       	ld	r24, Z
    2682:	91 81       	ldd	r25, Z+1	; 0x01
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	f1 f7       	brne	.-4      	; 0x2684 <main+0x6a2>
    2688:	fe 01       	movw	r30, r28
    268a:	ed 52       	subi	r30, 0x2D	; 45
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	91 83       	std	Z+1, r25	; 0x01
    2690:	80 83       	st	Z, r24
					_delay_ms(200);
					Display_Str_Row_Col(0,11+i,"*");
    2692:	fe 01       	movw	r30, r28
    2694:	e3 5f       	subi	r30, 0xF3	; 243
    2696:	fe 4f       	sbci	r31, 0xFE	; 254
    2698:	80 81       	ld	r24, Z
    269a:	98 2f       	mov	r25, r24
    269c:	95 5f       	subi	r25, 0xF5	; 245
    269e:	2c ea       	ldi	r18, 0xAC	; 172
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	80 e0       	ldi	r24, 0x00	; 0
    26a4:	69 2f       	mov	r22, r25
    26a6:	a9 01       	movw	r20, r18
    26a8:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <Display_Str_Row_Col>
					Display_Str_Row_Col(0,1,"Invalid Input");
					_delay_ms(400);
					break;
				}
				// to write an integer number
				Comp_Pass += key;
    26ac:	fe 01       	movw	r30, r28
    26ae:	e7 5e       	subi	r30, 0xE7	; 231
    26b0:	fe 4f       	sbci	r31, 0xFE	; 254
    26b2:	80 81       	ld	r24, Z
    26b4:	28 2f       	mov	r18, r24
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	de 01       	movw	r26, r28
    26ba:	a2 5f       	subi	r26, 0xF2	; 242
    26bc:	be 4f       	sbci	r27, 0xFE	; 254
    26be:	fe 01       	movw	r30, r28
    26c0:	e2 5f       	subi	r30, 0xF2	; 242
    26c2:	fe 4f       	sbci	r31, 0xFE	; 254
    26c4:	80 81       	ld	r24, Z
    26c6:	91 81       	ldd	r25, Z+1	; 0x01
    26c8:	82 0f       	add	r24, r18
    26ca:	93 1f       	adc	r25, r19
    26cc:	8d 93       	st	X+, r24
    26ce:	9c 93       	st	X, r25
				Comp_Pass = Comp_Pass * 10;
    26d0:	de 01       	movw	r26, r28
    26d2:	a2 5f       	subi	r26, 0xF2	; 242
    26d4:	be 4f       	sbci	r27, 0xFE	; 254
    26d6:	fe 01       	movw	r30, r28
    26d8:	e2 5f       	subi	r30, 0xF2	; 242
    26da:	fe 4f       	sbci	r31, 0xFE	; 254
    26dc:	80 81       	ld	r24, Z
    26de:	91 81       	ldd	r25, Z+1	; 0x01
    26e0:	9c 01       	movw	r18, r24
    26e2:	22 0f       	add	r18, r18
    26e4:	33 1f       	adc	r19, r19
    26e6:	c9 01       	movw	r24, r18
    26e8:	88 0f       	add	r24, r24
    26ea:	99 1f       	adc	r25, r25
    26ec:	88 0f       	add	r24, r24
    26ee:	99 1f       	adc	r25, r25
    26f0:	82 0f       	add	r24, r18
    26f2:	93 1f       	adc	r25, r19
    26f4:	8d 93       	st	X+, r24
    26f6:	9c 93       	st	X, r25
		// wait the user to enter the password
		if ( mode == 1)
		{
			LCD_CLEAR();
			Display_Str("Password : ");
			for (u8 i = 0; i<4 ;i++)
    26f8:	de 01       	movw	r26, r28
    26fa:	a3 5f       	subi	r26, 0xF3	; 243
    26fc:	be 4f       	sbci	r27, 0xFE	; 254
    26fe:	fe 01       	movw	r30, r28
    2700:	e3 5f       	subi	r30, 0xF3	; 243
    2702:	fe 4f       	sbci	r31, 0xFE	; 254
    2704:	80 81       	ld	r24, Z
    2706:	8f 5f       	subi	r24, 0xFF	; 255
    2708:	8c 93       	st	X, r24
    270a:	be c0       	rjmp	.+380    	; 0x2888 <main+0x8a6>
					_delay_ms(200);
					Display_Str_Row_Col(0,11+i,"*");
				}
				else
				{
					LCD_CLEAR();         //clear the LCD
    270c:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_CLEAR>
					Display_Str_Row_Col(0,1,"Invalid Input");
    2710:	2e ea       	ldi	r18, 0xAE	; 174
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	61 e0       	ldi	r22, 0x01	; 1
    2718:	a9 01       	movw	r20, r18
    271a:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <Display_Str_Row_Col>
    271e:	fe 01       	movw	r30, r28
    2720:	e1 53       	subi	r30, 0x31	; 49
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	a8 ec       	ldi	r26, 0xC8	; 200
    272a:	b3 e4       	ldi	r27, 0x43	; 67
    272c:	80 83       	st	Z, r24
    272e:	91 83       	std	Z+1, r25	; 0x01
    2730:	a2 83       	std	Z+2, r26	; 0x02
    2732:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2734:	8e 01       	movw	r16, r28
    2736:	05 53       	subi	r16, 0x35	; 53
    2738:	1f 4f       	sbci	r17, 0xFF	; 255
    273a:	fe 01       	movw	r30, r28
    273c:	e1 53       	subi	r30, 0x31	; 49
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	60 81       	ld	r22, Z
    2742:	71 81       	ldd	r23, Z+1	; 0x01
    2744:	82 81       	ldd	r24, Z+2	; 0x02
    2746:	93 81       	ldd	r25, Z+3	; 0x03
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	4a e7       	ldi	r20, 0x7A	; 122
    274e:	55 e4       	ldi	r21, 0x45	; 69
    2750:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	f8 01       	movw	r30, r16
    275a:	80 83       	st	Z, r24
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	a2 83       	std	Z+2, r26	; 0x02
    2760:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2762:	fe 01       	movw	r30, r28
    2764:	e5 53       	subi	r30, 0x35	; 53
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	60 81       	ld	r22, Z
    276a:	71 81       	ldd	r23, Z+1	; 0x01
    276c:	82 81       	ldd	r24, Z+2	; 0x02
    276e:	93 81       	ldd	r25, Z+3	; 0x03
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	40 e8       	ldi	r20, 0x80	; 128
    2776:	5f e3       	ldi	r21, 0x3F	; 63
    2778:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    277c:	88 23       	and	r24, r24
    277e:	44 f4       	brge	.+16     	; 0x2790 <main+0x7ae>
		__ticks = 1;
    2780:	fe 01       	movw	r30, r28
    2782:	e7 53       	subi	r30, 0x37	; 55
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	91 83       	std	Z+1, r25	; 0x01
    278c:	80 83       	st	Z, r24
    278e:	64 c0       	rjmp	.+200    	; 0x2858 <main+0x876>
	else if (__tmp > 65535)
    2790:	fe 01       	movw	r30, r28
    2792:	e5 53       	subi	r30, 0x35	; 53
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	60 81       	ld	r22, Z
    2798:	71 81       	ldd	r23, Z+1	; 0x01
    279a:	82 81       	ldd	r24, Z+2	; 0x02
    279c:	93 81       	ldd	r25, Z+3	; 0x03
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	3f ef       	ldi	r19, 0xFF	; 255
    27a2:	4f e7       	ldi	r20, 0x7F	; 127
    27a4:	57 e4       	ldi	r21, 0x47	; 71
    27a6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27aa:	18 16       	cp	r1, r24
    27ac:	0c f0       	brlt	.+2      	; 0x27b0 <main+0x7ce>
    27ae:	43 c0       	rjmp	.+134    	; 0x2836 <main+0x854>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b0:	fe 01       	movw	r30, r28
    27b2:	e1 53       	subi	r30, 0x31	; 49
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	60 81       	ld	r22, Z
    27b8:	71 81       	ldd	r23, Z+1	; 0x01
    27ba:	82 81       	ldd	r24, Z+2	; 0x02
    27bc:	93 81       	ldd	r25, Z+3	; 0x03
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	40 e2       	ldi	r20, 0x20	; 32
    27c4:	51 e4       	ldi	r21, 0x41	; 65
    27c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	8e 01       	movw	r16, r28
    27d0:	07 53       	subi	r16, 0x37	; 55
    27d2:	1f 4f       	sbci	r17, 0xFF	; 255
    27d4:	bc 01       	movw	r22, r24
    27d6:	cd 01       	movw	r24, r26
    27d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	f8 01       	movw	r30, r16
    27e2:	91 83       	std	Z+1, r25	; 0x01
    27e4:	80 83       	st	Z, r24
    27e6:	1f c0       	rjmp	.+62     	; 0x2826 <main+0x844>
    27e8:	fe 01       	movw	r30, r28
    27ea:	e9 53       	subi	r30, 0x39	; 57
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	80 e9       	ldi	r24, 0x90	; 144
    27f0:	91 e0       	ldi	r25, 0x01	; 1
    27f2:	91 83       	std	Z+1, r25	; 0x01
    27f4:	80 83       	st	Z, r24
    27f6:	fe 01       	movw	r30, r28
    27f8:	e9 53       	subi	r30, 0x39	; 57
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	80 81       	ld	r24, Z
    27fe:	91 81       	ldd	r25, Z+1	; 0x01
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <main+0x81e>
    2804:	fe 01       	movw	r30, r28
    2806:	e9 53       	subi	r30, 0x39	; 57
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280e:	de 01       	movw	r26, r28
    2810:	a7 53       	subi	r26, 0x37	; 55
    2812:	bf 4f       	sbci	r27, 0xFF	; 255
    2814:	fe 01       	movw	r30, r28
    2816:	e7 53       	subi	r30, 0x37	; 55
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	80 81       	ld	r24, Z
    281c:	91 81       	ldd	r25, Z+1	; 0x01
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	11 96       	adiw	r26, 0x01	; 1
    2822:	9c 93       	st	X, r25
    2824:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2826:	fe 01       	movw	r30, r28
    2828:	e7 53       	subi	r30, 0x37	; 55
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	80 81       	ld	r24, Z
    282e:	91 81       	ldd	r25, Z+1	; 0x01
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	d1 f6       	brne	.-76     	; 0x27e8 <main+0x806>
    2834:	30 c0       	rjmp	.+96     	; 0x2896 <main+0x8b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2836:	8e 01       	movw	r16, r28
    2838:	07 53       	subi	r16, 0x37	; 55
    283a:	1f 4f       	sbci	r17, 0xFF	; 255
    283c:	fe 01       	movw	r30, r28
    283e:	e5 53       	subi	r30, 0x35	; 53
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	60 81       	ld	r22, Z
    2844:	71 81       	ldd	r23, Z+1	; 0x01
    2846:	82 81       	ldd	r24, Z+2	; 0x02
    2848:	93 81       	ldd	r25, Z+3	; 0x03
    284a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	f8 01       	movw	r30, r16
    2854:	91 83       	std	Z+1, r25	; 0x01
    2856:	80 83       	st	Z, r24
    2858:	de 01       	movw	r26, r28
    285a:	ab 53       	subi	r26, 0x3B	; 59
    285c:	bf 4f       	sbci	r27, 0xFF	; 255
    285e:	fe 01       	movw	r30, r28
    2860:	e7 53       	subi	r30, 0x37	; 55
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	80 81       	ld	r24, Z
    2866:	91 81       	ldd	r25, Z+1	; 0x01
    2868:	11 96       	adiw	r26, 0x01	; 1
    286a:	9c 93       	st	X, r25
    286c:	8e 93       	st	-X, r24
    286e:	fe 01       	movw	r30, r28
    2870:	eb 53       	subi	r30, 0x3B	; 59
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	80 81       	ld	r24, Z
    2876:	91 81       	ldd	r25, Z+1	; 0x01
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	f1 f7       	brne	.-4      	; 0x2878 <main+0x896>
    287c:	fe 01       	movw	r30, r28
    287e:	eb 53       	subi	r30, 0x3B	; 59
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	91 83       	std	Z+1, r25	; 0x01
    2884:	80 83       	st	Z, r24
    2886:	07 c0       	rjmp	.+14     	; 0x2896 <main+0x8b4>
		// wait the user to enter the password
		if ( mode == 1)
		{
			LCD_CLEAR();
			Display_Str("Password : ");
			for (u8 i = 0; i<4 ;i++)
    2888:	fe 01       	movw	r30, r28
    288a:	e3 5f       	subi	r30, 0xF3	; 243
    288c:	fe 4f       	sbci	r31, 0xFE	; 254
    288e:	80 81       	ld	r24, Z
    2890:	84 30       	cpi	r24, 0x04	; 4
    2892:	08 f4       	brcc	.+2      	; 0x2896 <main+0x8b4>
    2894:	7f cd       	rjmp	.-1282   	; 0x2394 <main+0x3b2>
				}
				// to write an integer number
				Comp_Pass += key;
				Comp_Pass = Comp_Pass * 10;
			}
			Comp_Pass = Comp_Pass / 10;
    2896:	8e 01       	movw	r16, r28
    2898:	02 5f       	subi	r16, 0xF2	; 242
    289a:	1e 4f       	sbci	r17, 0xFE	; 254
    289c:	fe 01       	movw	r30, r28
    289e:	e2 5f       	subi	r30, 0xF2	; 242
    28a0:	fe 4f       	sbci	r31, 0xFE	; 254
    28a2:	80 81       	ld	r24, Z
    28a4:	91 81       	ldd	r25, Z+1	; 0x01
    28a6:	2a e0       	ldi	r18, 0x0A	; 10
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	b9 01       	movw	r22, r18
    28ac:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <__udivmodhi4>
    28b0:	cb 01       	movw	r24, r22
    28b2:	f8 01       	movw	r30, r16
    28b4:	91 83       	std	Z+1, r25	; 0x01
    28b6:	80 83       	st	Z, r24
    28b8:	fe 01       	movw	r30, r28
    28ba:	ef 53       	subi	r30, 0x3F	; 63
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	a8 ec       	ldi	r26, 0xC8	; 200
    28c4:	b3 e4       	ldi	r27, 0x43	; 67
    28c6:	80 83       	st	Z, r24
    28c8:	91 83       	std	Z+1, r25	; 0x01
    28ca:	a2 83       	std	Z+2, r26	; 0x02
    28cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ce:	8e 01       	movw	r16, r28
    28d0:	03 54       	subi	r16, 0x43	; 67
    28d2:	1f 4f       	sbci	r17, 0xFF	; 255
    28d4:	fe 01       	movw	r30, r28
    28d6:	ef 53       	subi	r30, 0x3F	; 63
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	60 81       	ld	r22, Z
    28dc:	71 81       	ldd	r23, Z+1	; 0x01
    28de:	82 81       	ldd	r24, Z+2	; 0x02
    28e0:	93 81       	ldd	r25, Z+3	; 0x03
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	4a e7       	ldi	r20, 0x7A	; 122
    28e8:	55 e4       	ldi	r21, 0x45	; 69
    28ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	f8 01       	movw	r30, r16
    28f4:	80 83       	st	Z, r24
    28f6:	91 83       	std	Z+1, r25	; 0x01
    28f8:	a2 83       	std	Z+2, r26	; 0x02
    28fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28fc:	fe 01       	movw	r30, r28
    28fe:	e3 54       	subi	r30, 0x43	; 67
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	60 81       	ld	r22, Z
    2904:	71 81       	ldd	r23, Z+1	; 0x01
    2906:	82 81       	ldd	r24, Z+2	; 0x02
    2908:	93 81       	ldd	r25, Z+3	; 0x03
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	40 e8       	ldi	r20, 0x80	; 128
    2910:	5f e3       	ldi	r21, 0x3F	; 63
    2912:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2916:	88 23       	and	r24, r24
    2918:	44 f4       	brge	.+16     	; 0x292a <main+0x948>
		__ticks = 1;
    291a:	fe 01       	movw	r30, r28
    291c:	e5 54       	subi	r30, 0x45	; 69
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	91 83       	std	Z+1, r25	; 0x01
    2926:	80 83       	st	Z, r24
    2928:	64 c0       	rjmp	.+200    	; 0x29f2 <main+0xa10>
	else if (__tmp > 65535)
    292a:	fe 01       	movw	r30, r28
    292c:	e3 54       	subi	r30, 0x43	; 67
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	60 81       	ld	r22, Z
    2932:	71 81       	ldd	r23, Z+1	; 0x01
    2934:	82 81       	ldd	r24, Z+2	; 0x02
    2936:	93 81       	ldd	r25, Z+3	; 0x03
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	3f ef       	ldi	r19, 0xFF	; 255
    293c:	4f e7       	ldi	r20, 0x7F	; 127
    293e:	57 e4       	ldi	r21, 0x47	; 71
    2940:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2944:	18 16       	cp	r1, r24
    2946:	0c f0       	brlt	.+2      	; 0x294a <main+0x968>
    2948:	43 c0       	rjmp	.+134    	; 0x29d0 <main+0x9ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294a:	fe 01       	movw	r30, r28
    294c:	ef 53       	subi	r30, 0x3F	; 63
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	60 81       	ld	r22, Z
    2952:	71 81       	ldd	r23, Z+1	; 0x01
    2954:	82 81       	ldd	r24, Z+2	; 0x02
    2956:	93 81       	ldd	r25, Z+3	; 0x03
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	40 e2       	ldi	r20, 0x20	; 32
    295e:	51 e4       	ldi	r21, 0x41	; 65
    2960:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	8e 01       	movw	r16, r28
    296a:	05 54       	subi	r16, 0x45	; 69
    296c:	1f 4f       	sbci	r17, 0xFF	; 255
    296e:	bc 01       	movw	r22, r24
    2970:	cd 01       	movw	r24, r26
    2972:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	f8 01       	movw	r30, r16
    297c:	91 83       	std	Z+1, r25	; 0x01
    297e:	80 83       	st	Z, r24
    2980:	1f c0       	rjmp	.+62     	; 0x29c0 <main+0x9de>
    2982:	fe 01       	movw	r30, r28
    2984:	e7 54       	subi	r30, 0x47	; 71
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	80 e9       	ldi	r24, 0x90	; 144
    298a:	91 e0       	ldi	r25, 0x01	; 1
    298c:	91 83       	std	Z+1, r25	; 0x01
    298e:	80 83       	st	Z, r24
    2990:	fe 01       	movw	r30, r28
    2992:	e7 54       	subi	r30, 0x47	; 71
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	80 81       	ld	r24, Z
    2998:	91 81       	ldd	r25, Z+1	; 0x01
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	f1 f7       	brne	.-4      	; 0x299a <main+0x9b8>
    299e:	fe 01       	movw	r30, r28
    29a0:	e7 54       	subi	r30, 0x47	; 71
    29a2:	ff 4f       	sbci	r31, 0xFF	; 255
    29a4:	91 83       	std	Z+1, r25	; 0x01
    29a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a8:	de 01       	movw	r26, r28
    29aa:	a5 54       	subi	r26, 0x45	; 69
    29ac:	bf 4f       	sbci	r27, 0xFF	; 255
    29ae:	fe 01       	movw	r30, r28
    29b0:	e5 54       	subi	r30, 0x45	; 69
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	80 81       	ld	r24, Z
    29b6:	91 81       	ldd	r25, Z+1	; 0x01
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	11 96       	adiw	r26, 0x01	; 1
    29bc:	9c 93       	st	X, r25
    29be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c0:	fe 01       	movw	r30, r28
    29c2:	e5 54       	subi	r30, 0x45	; 69
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	80 81       	ld	r24, Z
    29c8:	91 81       	ldd	r25, Z+1	; 0x01
    29ca:	00 97       	sbiw	r24, 0x00	; 0
    29cc:	d1 f6       	brne	.-76     	; 0x2982 <main+0x9a0>
    29ce:	27 c0       	rjmp	.+78     	; 0x2a1e <main+0xa3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d0:	8e 01       	movw	r16, r28
    29d2:	05 54       	subi	r16, 0x45	; 69
    29d4:	1f 4f       	sbci	r17, 0xFF	; 255
    29d6:	fe 01       	movw	r30, r28
    29d8:	e3 54       	subi	r30, 0x43	; 67
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	60 81       	ld	r22, Z
    29de:	71 81       	ldd	r23, Z+1	; 0x01
    29e0:	82 81       	ldd	r24, Z+2	; 0x02
    29e2:	93 81       	ldd	r25, Z+3	; 0x03
    29e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	f8 01       	movw	r30, r16
    29ee:	91 83       	std	Z+1, r25	; 0x01
    29f0:	80 83       	st	Z, r24
    29f2:	de 01       	movw	r26, r28
    29f4:	a9 54       	subi	r26, 0x49	; 73
    29f6:	bf 4f       	sbci	r27, 0xFF	; 255
    29f8:	fe 01       	movw	r30, r28
    29fa:	e5 54       	subi	r30, 0x45	; 69
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	80 81       	ld	r24, Z
    2a00:	91 81       	ldd	r25, Z+1	; 0x01
    2a02:	8d 93       	st	X+, r24
    2a04:	9c 93       	st	X, r25
    2a06:	fe 01       	movw	r30, r28
    2a08:	e9 54       	subi	r30, 0x49	; 73
    2a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0c:	80 81       	ld	r24, Z
    2a0e:	91 81       	ldd	r25, Z+1	; 0x01
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <main+0xa2e>
    2a14:	fe 01       	movw	r30, r28
    2a16:	e9 54       	subi	r30, 0x49	; 73
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	91 83       	std	Z+1, r25	; 0x01
    2a1c:	80 83       	st	Z, r24
			_delay_ms(400);
			LCD_CLEAR();
    2a1e:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_CLEAR>
			if (Saved_Pass == Comp_Pass)
    2a22:	fe 01       	movw	r30, r28
    2a24:	ea 5e       	subi	r30, 0xEA	; 234
    2a26:	fe 4f       	sbci	r31, 0xFE	; 254
    2a28:	de 01       	movw	r26, r28
    2a2a:	a2 5f       	subi	r26, 0xF2	; 242
    2a2c:	be 4f       	sbci	r27, 0xFE	; 254
    2a2e:	20 81       	ld	r18, Z
    2a30:	31 81       	ldd	r19, Z+1	; 0x01
    2a32:	8d 91       	ld	r24, X+
    2a34:	9c 91       	ld	r25, X
    2a36:	11 97       	sbiw	r26, 0x01	; 1
    2a38:	28 17       	cp	r18, r24
    2a3a:	39 07       	cpc	r19, r25
    2a3c:	09 f0       	breq	.+2      	; 0x2a40 <main+0xa5e>
    2a3e:	db c0       	rjmp	.+438    	; 0x2bf6 <main+0xc14>
			{
				Display_Str("Welcome Back");
    2a40:	8c eb       	ldi	r24, 0xBC	; 188
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <Display_Str>
				PORTC = (PORTC & 0xF0) | (motor_steps[1] & 0x0F);  // 90
    2a48:	a5 e3       	ldi	r26, 0x35	; 53
    2a4a:	b0 e0       	ldi	r27, 0x00	; 0
    2a4c:	e5 e3       	ldi	r30, 0x35	; 53
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	80 81       	ld	r24, Z
    2a52:	98 2f       	mov	r25, r24
    2a54:	90 7f       	andi	r25, 0xF0	; 240
    2a56:	fe 01       	movw	r30, r28
    2a58:	e6 5e       	subi	r30, 0xE6	; 230
    2a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a5c:	81 81       	ldd	r24, Z+1	; 0x01
    2a5e:	8f 70       	andi	r24, 0x0F	; 15
    2a60:	89 2b       	or	r24, r25
    2a62:	8c 93       	st	X, r24
    2a64:	fe 01       	movw	r30, r28
    2a66:	ed 54       	subi	r30, 0x4D	; 77
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	90 e4       	ldi	r25, 0x40	; 64
    2a6e:	ac e1       	ldi	r26, 0x1C	; 28
    2a70:	b5 e4       	ldi	r27, 0x45	; 69
    2a72:	80 83       	st	Z, r24
    2a74:	91 83       	std	Z+1, r25	; 0x01
    2a76:	a2 83       	std	Z+2, r26	; 0x02
    2a78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7a:	8e 01       	movw	r16, r28
    2a7c:	01 55       	subi	r16, 0x51	; 81
    2a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a80:	fe 01       	movw	r30, r28
    2a82:	ed 54       	subi	r30, 0x4D	; 77
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	60 81       	ld	r22, Z
    2a88:	71 81       	ldd	r23, Z+1	; 0x01
    2a8a:	82 81       	ldd	r24, Z+2	; 0x02
    2a8c:	93 81       	ldd	r25, Z+3	; 0x03
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	4a e7       	ldi	r20, 0x7A	; 122
    2a94:	55 e4       	ldi	r21, 0x45	; 69
    2a96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	f8 01       	movw	r30, r16
    2aa0:	80 83       	st	Z, r24
    2aa2:	91 83       	std	Z+1, r25	; 0x01
    2aa4:	a2 83       	std	Z+2, r26	; 0x02
    2aa6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	e1 55       	subi	r30, 0x51	; 81
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	60 81       	ld	r22, Z
    2ab0:	71 81       	ldd	r23, Z+1	; 0x01
    2ab2:	82 81       	ldd	r24, Z+2	; 0x02
    2ab4:	93 81       	ldd	r25, Z+3	; 0x03
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e8       	ldi	r20, 0x80	; 128
    2abc:	5f e3       	ldi	r21, 0x3F	; 63
    2abe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ac2:	88 23       	and	r24, r24
    2ac4:	44 f4       	brge	.+16     	; 0x2ad6 <main+0xaf4>
		__ticks = 1;
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	e3 55       	subi	r30, 0x53	; 83
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	91 83       	std	Z+1, r25	; 0x01
    2ad2:	80 83       	st	Z, r24
    2ad4:	64 c0       	rjmp	.+200    	; 0x2b9e <main+0xbbc>
	else if (__tmp > 65535)
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	e1 55       	subi	r30, 0x51	; 81
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	60 81       	ld	r22, Z
    2ade:	71 81       	ldd	r23, Z+1	; 0x01
    2ae0:	82 81       	ldd	r24, Z+2	; 0x02
    2ae2:	93 81       	ldd	r25, Z+3	; 0x03
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	3f ef       	ldi	r19, 0xFF	; 255
    2ae8:	4f e7       	ldi	r20, 0x7F	; 127
    2aea:	57 e4       	ldi	r21, 0x47	; 71
    2aec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2af0:	18 16       	cp	r1, r24
    2af2:	0c f0       	brlt	.+2      	; 0x2af6 <main+0xb14>
    2af4:	43 c0       	rjmp	.+134    	; 0x2b7c <main+0xb9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af6:	fe 01       	movw	r30, r28
    2af8:	ed 54       	subi	r30, 0x4D	; 77
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	60 81       	ld	r22, Z
    2afe:	71 81       	ldd	r23, Z+1	; 0x01
    2b00:	82 81       	ldd	r24, Z+2	; 0x02
    2b02:	93 81       	ldd	r25, Z+3	; 0x03
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	40 e2       	ldi	r20, 0x20	; 32
    2b0a:	51 e4       	ldi	r21, 0x41	; 65
    2b0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	8e 01       	movw	r16, r28
    2b16:	03 55       	subi	r16, 0x53	; 83
    2b18:	1f 4f       	sbci	r17, 0xFF	; 255
    2b1a:	bc 01       	movw	r22, r24
    2b1c:	cd 01       	movw	r24, r26
    2b1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	f8 01       	movw	r30, r16
    2b28:	91 83       	std	Z+1, r25	; 0x01
    2b2a:	80 83       	st	Z, r24
    2b2c:	1f c0       	rjmp	.+62     	; 0x2b6c <main+0xb8a>
    2b2e:	fe 01       	movw	r30, r28
    2b30:	e5 55       	subi	r30, 0x55	; 85
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	80 e9       	ldi	r24, 0x90	; 144
    2b36:	91 e0       	ldi	r25, 0x01	; 1
    2b38:	91 83       	std	Z+1, r25	; 0x01
    2b3a:	80 83       	st	Z, r24
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	e5 55       	subi	r30, 0x55	; 85
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	80 81       	ld	r24, Z
    2b44:	91 81       	ldd	r25, Z+1	; 0x01
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	f1 f7       	brne	.-4      	; 0x2b46 <main+0xb64>
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	e5 55       	subi	r30, 0x55	; 85
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	91 83       	std	Z+1, r25	; 0x01
    2b52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b54:	de 01       	movw	r26, r28
    2b56:	a3 55       	subi	r26, 0x53	; 83
    2b58:	bf 4f       	sbci	r27, 0xFF	; 255
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	e3 55       	subi	r30, 0x53	; 83
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	80 81       	ld	r24, Z
    2b62:	91 81       	ldd	r25, Z+1	; 0x01
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	11 96       	adiw	r26, 0x01	; 1
    2b68:	9c 93       	st	X, r25
    2b6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	e3 55       	subi	r30, 0x53	; 83
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	80 81       	ld	r24, Z
    2b74:	91 81       	ldd	r25, Z+1	; 0x01
    2b76:	00 97       	sbiw	r24, 0x00	; 0
    2b78:	d1 f6       	brne	.-76     	; 0x2b2e <main+0xb4c>
    2b7a:	27 c0       	rjmp	.+78     	; 0x2bca <main+0xbe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b7c:	8e 01       	movw	r16, r28
    2b7e:	03 55       	subi	r16, 0x53	; 83
    2b80:	1f 4f       	sbci	r17, 0xFF	; 255
    2b82:	fe 01       	movw	r30, r28
    2b84:	e1 55       	subi	r30, 0x51	; 81
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	60 81       	ld	r22, Z
    2b8a:	71 81       	ldd	r23, Z+1	; 0x01
    2b8c:	82 81       	ldd	r24, Z+2	; 0x02
    2b8e:	93 81       	ldd	r25, Z+3	; 0x03
    2b90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	f8 01       	movw	r30, r16
    2b9a:	91 83       	std	Z+1, r25	; 0x01
    2b9c:	80 83       	st	Z, r24
    2b9e:	de 01       	movw	r26, r28
    2ba0:	a7 55       	subi	r26, 0x57	; 87
    2ba2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	e3 55       	subi	r30, 0x53	; 83
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	80 81       	ld	r24, Z
    2bac:	91 81       	ldd	r25, Z+1	; 0x01
    2bae:	8d 93       	st	X+, r24
    2bb0:	9c 93       	st	X, r25
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	e7 55       	subi	r30, 0x57	; 87
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	80 81       	ld	r24, Z
    2bba:	91 81       	ldd	r25, Z+1	; 0x01
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	f1 f7       	brne	.-4      	; 0x2bbc <main+0xbda>
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	e7 55       	subi	r30, 0x57	; 87
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	91 83       	std	Z+1, r25	; 0x01
    2bc8:	80 83       	st	Z, r24
				_delay_ms(2500);
				PORTC = (PORTC & 0xF0) | (motor_steps[0] & 0x0F);  //   0
    2bca:	a5 e3       	ldi	r26, 0x35	; 53
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	e5 e3       	ldi	r30, 0x35	; 53
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	98 2f       	mov	r25, r24
    2bd6:	90 7f       	andi	r25, 0xF0	; 240
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e6 5e       	subi	r30, 0xE6	; 230
    2bdc:	fe 4f       	sbci	r31, 0xFE	; 254
    2bde:	80 81       	ld	r24, Z
    2be0:	8f 70       	andi	r24, 0x0F	; 15
    2be2:	89 2b       	or	r24, r25
    2be4:	8c 93       	st	X, r24
				LCD_CLEAR();
    2be6:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_CLEAR>
				Comp_Pass = 0;
    2bea:	fe 01       	movw	r30, r28
    2bec:	e2 5f       	subi	r30, 0xF2	; 242
    2bee:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf0:	11 82       	std	Z+1, r1	; 0x01
    2bf2:	10 82       	st	Z, r1
    2bf4:	ee ca       	rjmp	.-2596   	; 0x21d2 <main+0x1f0>
			}
			else if (Reversed_Pass == Comp_Pass)
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	ec 5e       	subi	r30, 0xEC	; 236
    2bfa:	fe 4f       	sbci	r31, 0xFE	; 254
    2bfc:	de 01       	movw	r26, r28
    2bfe:	a2 5f       	subi	r26, 0xF2	; 242
    2c00:	be 4f       	sbci	r27, 0xFE	; 254
    2c02:	20 81       	ld	r18, Z
    2c04:	31 81       	ldd	r19, Z+1	; 0x01
    2c06:	8d 91       	ld	r24, X+
    2c08:	9c 91       	ld	r25, X
    2c0a:	11 97       	sbiw	r26, 0x01	; 1
    2c0c:	28 17       	cp	r18, r24
    2c0e:	39 07       	cpc	r19, r25
    2c10:	09 f0       	breq	.+2      	; 0x2c14 <main+0xc32>
    2c12:	c2 c0       	rjmp	.+388    	; 0x2d98 <main+0xdb6>
			{
				Display_Str_Row_Col(0,1,"Calling  911");
    2c14:	29 ec       	ldi	r18, 0xC9	; 201
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	61 e0       	ldi	r22, 0x01	; 1
    2c1c:	a9 01       	movw	r20, r18
    2c1e:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <Display_Str_Row_Col>
    2c22:	fe 01       	movw	r30, r28
    2c24:	eb 55       	subi	r30, 0x5B	; 91
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	aa e7       	ldi	r26, 0x7A	; 122
    2c2e:	b4 e4       	ldi	r27, 0x44	; 68
    2c30:	80 83       	st	Z, r24
    2c32:	91 83       	std	Z+1, r25	; 0x01
    2c34:	a2 83       	std	Z+2, r26	; 0x02
    2c36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c38:	8e 01       	movw	r16, r28
    2c3a:	0f 55       	subi	r16, 0x5F	; 95
    2c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c3e:	fe 01       	movw	r30, r28
    2c40:	eb 55       	subi	r30, 0x5B	; 91
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	60 81       	ld	r22, Z
    2c46:	71 81       	ldd	r23, Z+1	; 0x01
    2c48:	82 81       	ldd	r24, Z+2	; 0x02
    2c4a:	93 81       	ldd	r25, Z+3	; 0x03
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	4a e7       	ldi	r20, 0x7A	; 122
    2c52:	55 e4       	ldi	r21, 0x45	; 69
    2c54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	f8 01       	movw	r30, r16
    2c5e:	80 83       	st	Z, r24
    2c60:	91 83       	std	Z+1, r25	; 0x01
    2c62:	a2 83       	std	Z+2, r26	; 0x02
    2c64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c66:	fe 01       	movw	r30, r28
    2c68:	ef 55       	subi	r30, 0x5F	; 95
    2c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6c:	60 81       	ld	r22, Z
    2c6e:	71 81       	ldd	r23, Z+1	; 0x01
    2c70:	82 81       	ldd	r24, Z+2	; 0x02
    2c72:	93 81       	ldd	r25, Z+3	; 0x03
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	40 e8       	ldi	r20, 0x80	; 128
    2c7a:	5f e3       	ldi	r21, 0x3F	; 63
    2c7c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c80:	88 23       	and	r24, r24
    2c82:	44 f4       	brge	.+16     	; 0x2c94 <main+0xcb2>
		__ticks = 1;
    2c84:	fe 01       	movw	r30, r28
    2c86:	e1 56       	subi	r30, 0x61	; 97
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	91 83       	std	Z+1, r25	; 0x01
    2c90:	80 83       	st	Z, r24
    2c92:	64 c0       	rjmp	.+200    	; 0x2d5c <main+0xd7a>
	else if (__tmp > 65535)
    2c94:	fe 01       	movw	r30, r28
    2c96:	ef 55       	subi	r30, 0x5F	; 95
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	60 81       	ld	r22, Z
    2c9c:	71 81       	ldd	r23, Z+1	; 0x01
    2c9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ca0:	93 81       	ldd	r25, Z+3	; 0x03
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	3f ef       	ldi	r19, 0xFF	; 255
    2ca6:	4f e7       	ldi	r20, 0x7F	; 127
    2ca8:	57 e4       	ldi	r21, 0x47	; 71
    2caa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2cae:	18 16       	cp	r1, r24
    2cb0:	0c f0       	brlt	.+2      	; 0x2cb4 <main+0xcd2>
    2cb2:	43 c0       	rjmp	.+134    	; 0x2d3a <main+0xd58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	eb 55       	subi	r30, 0x5B	; 91
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	60 81       	ld	r22, Z
    2cbc:	71 81       	ldd	r23, Z+1	; 0x01
    2cbe:	82 81       	ldd	r24, Z+2	; 0x02
    2cc0:	93 81       	ldd	r25, Z+3	; 0x03
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	40 e2       	ldi	r20, 0x20	; 32
    2cc8:	51 e4       	ldi	r21, 0x41	; 65
    2cca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	8e 01       	movw	r16, r28
    2cd4:	01 56       	subi	r16, 0x61	; 97
    2cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd8:	bc 01       	movw	r22, r24
    2cda:	cd 01       	movw	r24, r26
    2cdc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	f8 01       	movw	r30, r16
    2ce6:	91 83       	std	Z+1, r25	; 0x01
    2ce8:	80 83       	st	Z, r24
    2cea:	1f c0       	rjmp	.+62     	; 0x2d2a <main+0xd48>
    2cec:	fe 01       	movw	r30, r28
    2cee:	e3 56       	subi	r30, 0x63	; 99
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	80 e9       	ldi	r24, 0x90	; 144
    2cf4:	91 e0       	ldi	r25, 0x01	; 1
    2cf6:	91 83       	std	Z+1, r25	; 0x01
    2cf8:	80 83       	st	Z, r24
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	e3 56       	subi	r30, 0x63	; 99
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	80 81       	ld	r24, Z
    2d02:	91 81       	ldd	r25, Z+1	; 0x01
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	f1 f7       	brne	.-4      	; 0x2d04 <main+0xd22>
    2d08:	fe 01       	movw	r30, r28
    2d0a:	e3 56       	subi	r30, 0x63	; 99
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	91 83       	std	Z+1, r25	; 0x01
    2d10:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d12:	de 01       	movw	r26, r28
    2d14:	a1 56       	subi	r26, 0x61	; 97
    2d16:	bf 4f       	sbci	r27, 0xFF	; 255
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e1 56       	subi	r30, 0x61	; 97
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	80 81       	ld	r24, Z
    2d20:	91 81       	ldd	r25, Z+1	; 0x01
    2d22:	01 97       	sbiw	r24, 0x01	; 1
    2d24:	11 96       	adiw	r26, 0x01	; 1
    2d26:	9c 93       	st	X, r25
    2d28:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	e1 56       	subi	r30, 0x61	; 97
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	80 81       	ld	r24, Z
    2d32:	91 81       	ldd	r25, Z+1	; 0x01
    2d34:	00 97       	sbiw	r24, 0x00	; 0
    2d36:	d1 f6       	brne	.-76     	; 0x2cec <main+0xd0a>
    2d38:	27 c0       	rjmp	.+78     	; 0x2d88 <main+0xda6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d3a:	8e 01       	movw	r16, r28
    2d3c:	01 56       	subi	r16, 0x61	; 97
    2d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d40:	fe 01       	movw	r30, r28
    2d42:	ef 55       	subi	r30, 0x5F	; 95
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	60 81       	ld	r22, Z
    2d48:	71 81       	ldd	r23, Z+1	; 0x01
    2d4a:	82 81       	ldd	r24, Z+2	; 0x02
    2d4c:	93 81       	ldd	r25, Z+3	; 0x03
    2d4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	f8 01       	movw	r30, r16
    2d58:	91 83       	std	Z+1, r25	; 0x01
    2d5a:	80 83       	st	Z, r24
    2d5c:	de 01       	movw	r26, r28
    2d5e:	a5 56       	subi	r26, 0x65	; 101
    2d60:	bf 4f       	sbci	r27, 0xFF	; 255
    2d62:	fe 01       	movw	r30, r28
    2d64:	e1 56       	subi	r30, 0x61	; 97
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	80 81       	ld	r24, Z
    2d6a:	91 81       	ldd	r25, Z+1	; 0x01
    2d6c:	8d 93       	st	X+, r24
    2d6e:	9c 93       	st	X, r25
    2d70:	fe 01       	movw	r30, r28
    2d72:	e5 56       	subi	r30, 0x65	; 101
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	80 81       	ld	r24, Z
    2d78:	91 81       	ldd	r25, Z+1	; 0x01
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	f1 f7       	brne	.-4      	; 0x2d7a <main+0xd98>
    2d7e:	fe 01       	movw	r30, r28
    2d80:	e5 56       	subi	r30, 0x65	; 101
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	91 83       	std	Z+1, r25	; 0x01
    2d86:	80 83       	st	Z, r24
				_delay_ms(1000);
				LCD_CLEAR();
    2d88:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_CLEAR>
				Comp_Pass = 0;
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	e2 5f       	subi	r30, 0xF2	; 242
    2d90:	fe 4f       	sbci	r31, 0xFE	; 254
    2d92:	11 82       	std	Z+1, r1	; 0x01
    2d94:	10 82       	st	Z, r1
    2d96:	1d ca       	rjmp	.-3014   	; 0x21d2 <main+0x1f0>
			}
			else
			{
				Display_Str_Row_Col(0,1,"Wrong Password");
    2d98:	26 ed       	ldi	r18, 0xD6	; 214
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	61 e0       	ldi	r22, 0x01	; 1
    2da0:	a9 01       	movw	r20, r18
    2da2:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <Display_Str_Row_Col>
    2da6:	fe 01       	movw	r30, r28
    2da8:	e9 56       	subi	r30, 0x69	; 105
    2daa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	aa ef       	ldi	r26, 0xFA	; 250
    2db2:	b3 e4       	ldi	r27, 0x43	; 67
    2db4:	80 83       	st	Z, r24
    2db6:	91 83       	std	Z+1, r25	; 0x01
    2db8:	a2 83       	std	Z+2, r26	; 0x02
    2dba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dbc:	8e 01       	movw	r16, r28
    2dbe:	0d 56       	subi	r16, 0x6D	; 109
    2dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	e9 56       	subi	r30, 0x69	; 105
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	60 81       	ld	r22, Z
    2dca:	71 81       	ldd	r23, Z+1	; 0x01
    2dcc:	82 81       	ldd	r24, Z+2	; 0x02
    2dce:	93 81       	ldd	r25, Z+3	; 0x03
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	4a e7       	ldi	r20, 0x7A	; 122
    2dd6:	55 e4       	ldi	r21, 0x45	; 69
    2dd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	f8 01       	movw	r30, r16
    2de2:	80 83       	st	Z, r24
    2de4:	91 83       	std	Z+1, r25	; 0x01
    2de6:	a2 83       	std	Z+2, r26	; 0x02
    2de8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dea:	fe 01       	movw	r30, r28
    2dec:	ed 56       	subi	r30, 0x6D	; 109
    2dee:	ff 4f       	sbci	r31, 0xFF	; 255
    2df0:	60 81       	ld	r22, Z
    2df2:	71 81       	ldd	r23, Z+1	; 0x01
    2df4:	82 81       	ldd	r24, Z+2	; 0x02
    2df6:	93 81       	ldd	r25, Z+3	; 0x03
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	40 e8       	ldi	r20, 0x80	; 128
    2dfe:	5f e3       	ldi	r21, 0x3F	; 63
    2e00:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e04:	88 23       	and	r24, r24
    2e06:	44 f4       	brge	.+16     	; 0x2e18 <main+0xe36>
		__ticks = 1;
    2e08:	fe 01       	movw	r30, r28
    2e0a:	ef 56       	subi	r30, 0x6F	; 111
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	91 83       	std	Z+1, r25	; 0x01
    2e14:	80 83       	st	Z, r24
    2e16:	64 c0       	rjmp	.+200    	; 0x2ee0 <main+0xefe>
	else if (__tmp > 65535)
    2e18:	fe 01       	movw	r30, r28
    2e1a:	ed 56       	subi	r30, 0x6D	; 109
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	60 81       	ld	r22, Z
    2e20:	71 81       	ldd	r23, Z+1	; 0x01
    2e22:	82 81       	ldd	r24, Z+2	; 0x02
    2e24:	93 81       	ldd	r25, Z+3	; 0x03
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	3f ef       	ldi	r19, 0xFF	; 255
    2e2a:	4f e7       	ldi	r20, 0x7F	; 127
    2e2c:	57 e4       	ldi	r21, 0x47	; 71
    2e2e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e32:	18 16       	cp	r1, r24
    2e34:	0c f0       	brlt	.+2      	; 0x2e38 <main+0xe56>
    2e36:	43 c0       	rjmp	.+134    	; 0x2ebe <main+0xedc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e38:	fe 01       	movw	r30, r28
    2e3a:	e9 56       	subi	r30, 0x69	; 105
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	60 81       	ld	r22, Z
    2e40:	71 81       	ldd	r23, Z+1	; 0x01
    2e42:	82 81       	ldd	r24, Z+2	; 0x02
    2e44:	93 81       	ldd	r25, Z+3	; 0x03
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	40 e2       	ldi	r20, 0x20	; 32
    2e4c:	51 e4       	ldi	r21, 0x41	; 65
    2e4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	8e 01       	movw	r16, r28
    2e58:	0f 56       	subi	r16, 0x6F	; 111
    2e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5c:	bc 01       	movw	r22, r24
    2e5e:	cd 01       	movw	r24, r26
    2e60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	f8 01       	movw	r30, r16
    2e6a:	91 83       	std	Z+1, r25	; 0x01
    2e6c:	80 83       	st	Z, r24
    2e6e:	1f c0       	rjmp	.+62     	; 0x2eae <main+0xecc>
    2e70:	fe 01       	movw	r30, r28
    2e72:	e1 57       	subi	r30, 0x71	; 113
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	80 e9       	ldi	r24, 0x90	; 144
    2e78:	91 e0       	ldi	r25, 0x01	; 1
    2e7a:	91 83       	std	Z+1, r25	; 0x01
    2e7c:	80 83       	st	Z, r24
    2e7e:	fe 01       	movw	r30, r28
    2e80:	e1 57       	subi	r30, 0x71	; 113
    2e82:	ff 4f       	sbci	r31, 0xFF	; 255
    2e84:	80 81       	ld	r24, Z
    2e86:	91 81       	ldd	r25, Z+1	; 0x01
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	f1 f7       	brne	.-4      	; 0x2e88 <main+0xea6>
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	e1 57       	subi	r30, 0x71	; 113
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	91 83       	std	Z+1, r25	; 0x01
    2e94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e96:	de 01       	movw	r26, r28
    2e98:	af 56       	subi	r26, 0x6F	; 111
    2e9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	ef 56       	subi	r30, 0x6F	; 111
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	80 81       	ld	r24, Z
    2ea4:	91 81       	ldd	r25, Z+1	; 0x01
    2ea6:	01 97       	sbiw	r24, 0x01	; 1
    2ea8:	11 96       	adiw	r26, 0x01	; 1
    2eaa:	9c 93       	st	X, r25
    2eac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eae:	fe 01       	movw	r30, r28
    2eb0:	ef 56       	subi	r30, 0x6F	; 111
    2eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb4:	80 81       	ld	r24, Z
    2eb6:	91 81       	ldd	r25, Z+1	; 0x01
    2eb8:	00 97       	sbiw	r24, 0x00	; 0
    2eba:	d1 f6       	brne	.-76     	; 0x2e70 <main+0xe8e>
    2ebc:	27 c0       	rjmp	.+78     	; 0x2f0c <main+0xf2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ebe:	8e 01       	movw	r16, r28
    2ec0:	0f 56       	subi	r16, 0x6F	; 111
    2ec2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	ed 56       	subi	r30, 0x6D	; 109
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	60 81       	ld	r22, Z
    2ecc:	71 81       	ldd	r23, Z+1	; 0x01
    2ece:	82 81       	ldd	r24, Z+2	; 0x02
    2ed0:	93 81       	ldd	r25, Z+3	; 0x03
    2ed2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	f8 01       	movw	r30, r16
    2edc:	91 83       	std	Z+1, r25	; 0x01
    2ede:	80 83       	st	Z, r24
    2ee0:	de 01       	movw	r26, r28
    2ee2:	a3 57       	subi	r26, 0x73	; 115
    2ee4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ee6:	fe 01       	movw	r30, r28
    2ee8:	ef 56       	subi	r30, 0x6F	; 111
    2eea:	ff 4f       	sbci	r31, 0xFF	; 255
    2eec:	80 81       	ld	r24, Z
    2eee:	91 81       	ldd	r25, Z+1	; 0x01
    2ef0:	8d 93       	st	X+, r24
    2ef2:	9c 93       	st	X, r25
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	e3 57       	subi	r30, 0x73	; 115
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	80 81       	ld	r24, Z
    2efc:	91 81       	ldd	r25, Z+1	; 0x01
    2efe:	01 97       	sbiw	r24, 0x01	; 1
    2f00:	f1 f7       	brne	.-4      	; 0x2efe <main+0xf1c>
    2f02:	fe 01       	movw	r30, r28
    2f04:	e3 57       	subi	r30, 0x73	; 115
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	91 83       	std	Z+1, r25	; 0x01
    2f0a:	80 83       	st	Z, r24
				_delay_ms(500);
				LCD_CLEAR();
    2f0c:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_CLEAR>
				Comp_Pass = 0;
    2f10:	fe 01       	movw	r30, r28
    2f12:	e2 5f       	subi	r30, 0xF2	; 242
    2f14:	fe 4f       	sbci	r31, 0xFE	; 254
    2f16:	11 82       	std	Z+1, r1	; 0x01
    2f18:	10 82       	st	Z, r1
    2f1a:	5b c9       	rjmp	.-3402   	; 0x21d2 <main+0x1f0>
			}
		}

		// for changing the Password
		else if (mode == 2)
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	e8 5e       	subi	r30, 0xE8	; 232
    2f20:	fe 4f       	sbci	r31, 0xFE	; 254
    2f22:	80 81       	ld	r24, Z
    2f24:	82 30       	cpi	r24, 0x02	; 2
    2f26:	09 f0       	breq	.+2      	; 0x2f2a <main+0xf48>
    2f28:	f5 c6       	rjmp	.+3562   	; 0x3d14 <main+0x1d32>
		{
			LCD_CLEAR();
    2f2a:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_CLEAR>
			Display_Str("Old Pass : ");
    2f2e:	85 ee       	ldi	r24, 0xE5	; 229
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <Display_Str>
			for (u8 i = 0; i<4 ;i++)
    2f36:	fe 01       	movw	r30, r28
    2f38:	e4 5f       	subi	r30, 0xF4	; 244
    2f3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f3c:	10 82       	st	Z, r1
    2f3e:	7a c2       	rjmp	.+1268   	; 0x3434 <main+0x1452>
			{
				Send_CMD(CURSOR_ON);
    2f40:	8e e0       	ldi	r24, 0x0E	; 14
    2f42:	0e 94 2c 0c 	call	0x1858	; 0x1858 <Send_CMD>
    2f46:	fe 01       	movw	r30, r28
    2f48:	e7 57       	subi	r30, 0x77	; 119
    2f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	a8 ec       	ldi	r26, 0xC8	; 200
    2f52:	b2 e4       	ldi	r27, 0x42	; 66
    2f54:	80 83       	st	Z, r24
    2f56:	91 83       	std	Z+1, r25	; 0x01
    2f58:	a2 83       	std	Z+2, r26	; 0x02
    2f5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f5c:	8e 01       	movw	r16, r28
    2f5e:	0b 57       	subi	r16, 0x7B	; 123
    2f60:	1f 4f       	sbci	r17, 0xFF	; 255
    2f62:	fe 01       	movw	r30, r28
    2f64:	e7 57       	subi	r30, 0x77	; 119
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	60 81       	ld	r22, Z
    2f6a:	71 81       	ldd	r23, Z+1	; 0x01
    2f6c:	82 81       	ldd	r24, Z+2	; 0x02
    2f6e:	93 81       	ldd	r25, Z+3	; 0x03
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	4a e7       	ldi	r20, 0x7A	; 122
    2f76:	55 e4       	ldi	r21, 0x45	; 69
    2f78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	f8 01       	movw	r30, r16
    2f82:	80 83       	st	Z, r24
    2f84:	91 83       	std	Z+1, r25	; 0x01
    2f86:	a2 83       	std	Z+2, r26	; 0x02
    2f88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f8a:	fe 01       	movw	r30, r28
    2f8c:	eb 57       	subi	r30, 0x7B	; 123
    2f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f90:	60 81       	ld	r22, Z
    2f92:	71 81       	ldd	r23, Z+1	; 0x01
    2f94:	82 81       	ldd	r24, Z+2	; 0x02
    2f96:	93 81       	ldd	r25, Z+3	; 0x03
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	40 e8       	ldi	r20, 0x80	; 128
    2f9e:	5f e3       	ldi	r21, 0x3F	; 63
    2fa0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2fa4:	88 23       	and	r24, r24
    2fa6:	44 f4       	brge	.+16     	; 0x2fb8 <main+0xfd6>
		__ticks = 1;
    2fa8:	fe 01       	movw	r30, r28
    2faa:	ed 57       	subi	r30, 0x7D	; 125
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	91 83       	std	Z+1, r25	; 0x01
    2fb4:	80 83       	st	Z, r24
    2fb6:	64 c0       	rjmp	.+200    	; 0x3080 <main+0x109e>
	else if (__tmp > 65535)
    2fb8:	fe 01       	movw	r30, r28
    2fba:	eb 57       	subi	r30, 0x7B	; 123
    2fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbe:	60 81       	ld	r22, Z
    2fc0:	71 81       	ldd	r23, Z+1	; 0x01
    2fc2:	82 81       	ldd	r24, Z+2	; 0x02
    2fc4:	93 81       	ldd	r25, Z+3	; 0x03
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	3f ef       	ldi	r19, 0xFF	; 255
    2fca:	4f e7       	ldi	r20, 0x7F	; 127
    2fcc:	57 e4       	ldi	r21, 0x47	; 71
    2fce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2fd2:	18 16       	cp	r1, r24
    2fd4:	0c f0       	brlt	.+2      	; 0x2fd8 <main+0xff6>
    2fd6:	43 c0       	rjmp	.+134    	; 0x305e <main+0x107c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fd8:	fe 01       	movw	r30, r28
    2fda:	e7 57       	subi	r30, 0x77	; 119
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	60 81       	ld	r22, Z
    2fe0:	71 81       	ldd	r23, Z+1	; 0x01
    2fe2:	82 81       	ldd	r24, Z+2	; 0x02
    2fe4:	93 81       	ldd	r25, Z+3	; 0x03
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	40 e2       	ldi	r20, 0x20	; 32
    2fec:	51 e4       	ldi	r21, 0x41	; 65
    2fee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	8e 01       	movw	r16, r28
    2ff8:	0d 57       	subi	r16, 0x7D	; 125
    2ffa:	1f 4f       	sbci	r17, 0xFF	; 255
    2ffc:	bc 01       	movw	r22, r24
    2ffe:	cd 01       	movw	r24, r26
    3000:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3004:	dc 01       	movw	r26, r24
    3006:	cb 01       	movw	r24, r22
    3008:	f8 01       	movw	r30, r16
    300a:	91 83       	std	Z+1, r25	; 0x01
    300c:	80 83       	st	Z, r24
    300e:	1f c0       	rjmp	.+62     	; 0x304e <main+0x106c>
    3010:	fe 01       	movw	r30, r28
    3012:	ef 57       	subi	r30, 0x7F	; 127
    3014:	ff 4f       	sbci	r31, 0xFF	; 255
    3016:	80 e9       	ldi	r24, 0x90	; 144
    3018:	91 e0       	ldi	r25, 0x01	; 1
    301a:	91 83       	std	Z+1, r25	; 0x01
    301c:	80 83       	st	Z, r24
    301e:	fe 01       	movw	r30, r28
    3020:	ef 57       	subi	r30, 0x7F	; 127
    3022:	ff 4f       	sbci	r31, 0xFF	; 255
    3024:	80 81       	ld	r24, Z
    3026:	91 81       	ldd	r25, Z+1	; 0x01
    3028:	01 97       	sbiw	r24, 0x01	; 1
    302a:	f1 f7       	brne	.-4      	; 0x3028 <main+0x1046>
    302c:	fe 01       	movw	r30, r28
    302e:	ef 57       	subi	r30, 0x7F	; 127
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	91 83       	std	Z+1, r25	; 0x01
    3034:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3036:	de 01       	movw	r26, r28
    3038:	ad 57       	subi	r26, 0x7D	; 125
    303a:	bf 4f       	sbci	r27, 0xFF	; 255
    303c:	fe 01       	movw	r30, r28
    303e:	ed 57       	subi	r30, 0x7D	; 125
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	80 81       	ld	r24, Z
    3044:	91 81       	ldd	r25, Z+1	; 0x01
    3046:	01 97       	sbiw	r24, 0x01	; 1
    3048:	11 96       	adiw	r26, 0x01	; 1
    304a:	9c 93       	st	X, r25
    304c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304e:	fe 01       	movw	r30, r28
    3050:	ed 57       	subi	r30, 0x7D	; 125
    3052:	ff 4f       	sbci	r31, 0xFF	; 255
    3054:	80 81       	ld	r24, Z
    3056:	91 81       	ldd	r25, Z+1	; 0x01
    3058:	00 97       	sbiw	r24, 0x00	; 0
    305a:	d1 f6       	brne	.-76     	; 0x3010 <main+0x102e>
    305c:	27 c0       	rjmp	.+78     	; 0x30ac <main+0x10ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    305e:	8e 01       	movw	r16, r28
    3060:	0d 57       	subi	r16, 0x7D	; 125
    3062:	1f 4f       	sbci	r17, 0xFF	; 255
    3064:	fe 01       	movw	r30, r28
    3066:	eb 57       	subi	r30, 0x7B	; 123
    3068:	ff 4f       	sbci	r31, 0xFF	; 255
    306a:	60 81       	ld	r22, Z
    306c:	71 81       	ldd	r23, Z+1	; 0x01
    306e:	82 81       	ldd	r24, Z+2	; 0x02
    3070:	93 81       	ldd	r25, Z+3	; 0x03
    3072:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3076:	dc 01       	movw	r26, r24
    3078:	cb 01       	movw	r24, r22
    307a:	f8 01       	movw	r30, r16
    307c:	91 83       	std	Z+1, r25	; 0x01
    307e:	80 83       	st	Z, r24
    3080:	de 01       	movw	r26, r28
    3082:	a1 58       	subi	r26, 0x81	; 129
    3084:	bf 4f       	sbci	r27, 0xFF	; 255
    3086:	fe 01       	movw	r30, r28
    3088:	ed 57       	subi	r30, 0x7D	; 125
    308a:	ff 4f       	sbci	r31, 0xFF	; 255
    308c:	80 81       	ld	r24, Z
    308e:	91 81       	ldd	r25, Z+1	; 0x01
    3090:	8d 93       	st	X+, r24
    3092:	9c 93       	st	X, r25
    3094:	fe 01       	movw	r30, r28
    3096:	e1 58       	subi	r30, 0x81	; 129
    3098:	ff 4f       	sbci	r31, 0xFF	; 255
    309a:	80 81       	ld	r24, Z
    309c:	91 81       	ldd	r25, Z+1	; 0x01
    309e:	01 97       	sbiw	r24, 0x01	; 1
    30a0:	f1 f7       	brne	.-4      	; 0x309e <main+0x10bc>
    30a2:	fe 01       	movw	r30, r28
    30a4:	e1 58       	subi	r30, 0x81	; 129
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	91 83       	std	Z+1, r25	; 0x01
    30aa:	80 83       	st	Z, r24
				_delay_ms(100);
				Send_CMD(CURSOR_OFF);
    30ac:	8c e0       	ldi	r24, 0x0C	; 12
    30ae:	0e 94 2c 0c 	call	0x1858	; 0x1858 <Send_CMD>
				key = Keypad_GetPressedKey();
    30b2:	0e 94 3d 09 	call	0x127a	; 0x127a <Keypad_GetPressedKey>
    30b6:	fe 01       	movw	r30, r28
    30b8:	e7 5e       	subi	r30, 0xE7	; 231
    30ba:	fe 4f       	sbci	r31, 0xFE	; 254
    30bc:	80 83       	st	Z, r24
				if ((key>=0) && (key <=9))
    30be:	fe 01       	movw	r30, r28
    30c0:	e7 5e       	subi	r30, 0xE7	; 231
    30c2:	fe 4f       	sbci	r31, 0xFE	; 254
    30c4:	80 81       	ld	r24, Z
    30c6:	8a 30       	cpi	r24, 0x0A	; 10
    30c8:	08 f0       	brcs	.+2      	; 0x30cc <main+0x10ea>
    30ca:	f6 c0       	rjmp	.+492    	; 0x32b8 <main+0x12d6>
				{
					Integer_TO_String (key);
    30cc:	fe 01       	movw	r30, r28
    30ce:	e7 5e       	subi	r30, 0xE7	; 231
    30d0:	fe 4f       	sbci	r31, 0xFE	; 254
    30d2:	80 81       	ld	r24, Z
    30d4:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <Integer_TO_String>
    30d8:	fe 01       	movw	r30, r28
    30da:	e5 58       	subi	r30, 0x85	; 133
    30dc:	ff 4f       	sbci	r31, 0xFF	; 255
    30de:	80 e0       	ldi	r24, 0x00	; 0
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	a8 e4       	ldi	r26, 0x48	; 72
    30e4:	b3 e4       	ldi	r27, 0x43	; 67
    30e6:	80 83       	st	Z, r24
    30e8:	91 83       	std	Z+1, r25	; 0x01
    30ea:	a2 83       	std	Z+2, r26	; 0x02
    30ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ee:	8e 01       	movw	r16, r28
    30f0:	09 58       	subi	r16, 0x89	; 137
    30f2:	1f 4f       	sbci	r17, 0xFF	; 255
    30f4:	fe 01       	movw	r30, r28
    30f6:	e5 58       	subi	r30, 0x85	; 133
    30f8:	ff 4f       	sbci	r31, 0xFF	; 255
    30fa:	60 81       	ld	r22, Z
    30fc:	71 81       	ldd	r23, Z+1	; 0x01
    30fe:	82 81       	ldd	r24, Z+2	; 0x02
    3100:	93 81       	ldd	r25, Z+3	; 0x03
    3102:	20 e0       	ldi	r18, 0x00	; 0
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	4a e7       	ldi	r20, 0x7A	; 122
    3108:	55 e4       	ldi	r21, 0x45	; 69
    310a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	f8 01       	movw	r30, r16
    3114:	80 83       	st	Z, r24
    3116:	91 83       	std	Z+1, r25	; 0x01
    3118:	a2 83       	std	Z+2, r26	; 0x02
    311a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    311c:	fe 01       	movw	r30, r28
    311e:	e9 58       	subi	r30, 0x89	; 137
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	60 81       	ld	r22, Z
    3124:	71 81       	ldd	r23, Z+1	; 0x01
    3126:	82 81       	ldd	r24, Z+2	; 0x02
    3128:	93 81       	ldd	r25, Z+3	; 0x03
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	40 e8       	ldi	r20, 0x80	; 128
    3130:	5f e3       	ldi	r21, 0x3F	; 63
    3132:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3136:	88 23       	and	r24, r24
    3138:	44 f4       	brge	.+16     	; 0x314a <main+0x1168>
		__ticks = 1;
    313a:	fe 01       	movw	r30, r28
    313c:	eb 58       	subi	r30, 0x8B	; 139
    313e:	ff 4f       	sbci	r31, 0xFF	; 255
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	91 83       	std	Z+1, r25	; 0x01
    3146:	80 83       	st	Z, r24
    3148:	64 c0       	rjmp	.+200    	; 0x3212 <main+0x1230>
	else if (__tmp > 65535)
    314a:	fe 01       	movw	r30, r28
    314c:	e9 58       	subi	r30, 0x89	; 137
    314e:	ff 4f       	sbci	r31, 0xFF	; 255
    3150:	60 81       	ld	r22, Z
    3152:	71 81       	ldd	r23, Z+1	; 0x01
    3154:	82 81       	ldd	r24, Z+2	; 0x02
    3156:	93 81       	ldd	r25, Z+3	; 0x03
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	3f ef       	ldi	r19, 0xFF	; 255
    315c:	4f e7       	ldi	r20, 0x7F	; 127
    315e:	57 e4       	ldi	r21, 0x47	; 71
    3160:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3164:	18 16       	cp	r1, r24
    3166:	0c f0       	brlt	.+2      	; 0x316a <main+0x1188>
    3168:	43 c0       	rjmp	.+134    	; 0x31f0 <main+0x120e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    316a:	fe 01       	movw	r30, r28
    316c:	e5 58       	subi	r30, 0x85	; 133
    316e:	ff 4f       	sbci	r31, 0xFF	; 255
    3170:	60 81       	ld	r22, Z
    3172:	71 81       	ldd	r23, Z+1	; 0x01
    3174:	82 81       	ldd	r24, Z+2	; 0x02
    3176:	93 81       	ldd	r25, Z+3	; 0x03
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	40 e2       	ldi	r20, 0x20	; 32
    317e:	51 e4       	ldi	r21, 0x41	; 65
    3180:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3184:	dc 01       	movw	r26, r24
    3186:	cb 01       	movw	r24, r22
    3188:	8e 01       	movw	r16, r28
    318a:	0b 58       	subi	r16, 0x8B	; 139
    318c:	1f 4f       	sbci	r17, 0xFF	; 255
    318e:	bc 01       	movw	r22, r24
    3190:	cd 01       	movw	r24, r26
    3192:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	f8 01       	movw	r30, r16
    319c:	91 83       	std	Z+1, r25	; 0x01
    319e:	80 83       	st	Z, r24
    31a0:	1f c0       	rjmp	.+62     	; 0x31e0 <main+0x11fe>
    31a2:	fe 01       	movw	r30, r28
    31a4:	ed 58       	subi	r30, 0x8D	; 141
    31a6:	ff 4f       	sbci	r31, 0xFF	; 255
    31a8:	80 e9       	ldi	r24, 0x90	; 144
    31aa:	91 e0       	ldi	r25, 0x01	; 1
    31ac:	91 83       	std	Z+1, r25	; 0x01
    31ae:	80 83       	st	Z, r24
    31b0:	fe 01       	movw	r30, r28
    31b2:	ed 58       	subi	r30, 0x8D	; 141
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	80 81       	ld	r24, Z
    31b8:	91 81       	ldd	r25, Z+1	; 0x01
    31ba:	01 97       	sbiw	r24, 0x01	; 1
    31bc:	f1 f7       	brne	.-4      	; 0x31ba <main+0x11d8>
    31be:	fe 01       	movw	r30, r28
    31c0:	ed 58       	subi	r30, 0x8D	; 141
    31c2:	ff 4f       	sbci	r31, 0xFF	; 255
    31c4:	91 83       	std	Z+1, r25	; 0x01
    31c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c8:	de 01       	movw	r26, r28
    31ca:	ab 58       	subi	r26, 0x8B	; 139
    31cc:	bf 4f       	sbci	r27, 0xFF	; 255
    31ce:	fe 01       	movw	r30, r28
    31d0:	eb 58       	subi	r30, 0x8B	; 139
    31d2:	ff 4f       	sbci	r31, 0xFF	; 255
    31d4:	80 81       	ld	r24, Z
    31d6:	91 81       	ldd	r25, Z+1	; 0x01
    31d8:	01 97       	sbiw	r24, 0x01	; 1
    31da:	11 96       	adiw	r26, 0x01	; 1
    31dc:	9c 93       	st	X, r25
    31de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e0:	fe 01       	movw	r30, r28
    31e2:	eb 58       	subi	r30, 0x8B	; 139
    31e4:	ff 4f       	sbci	r31, 0xFF	; 255
    31e6:	80 81       	ld	r24, Z
    31e8:	91 81       	ldd	r25, Z+1	; 0x01
    31ea:	00 97       	sbiw	r24, 0x00	; 0
    31ec:	d1 f6       	brne	.-76     	; 0x31a2 <main+0x11c0>
    31ee:	27 c0       	rjmp	.+78     	; 0x323e <main+0x125c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f0:	8e 01       	movw	r16, r28
    31f2:	0b 58       	subi	r16, 0x8B	; 139
    31f4:	1f 4f       	sbci	r17, 0xFF	; 255
    31f6:	fe 01       	movw	r30, r28
    31f8:	e9 58       	subi	r30, 0x89	; 137
    31fa:	ff 4f       	sbci	r31, 0xFF	; 255
    31fc:	60 81       	ld	r22, Z
    31fe:	71 81       	ldd	r23, Z+1	; 0x01
    3200:	82 81       	ldd	r24, Z+2	; 0x02
    3202:	93 81       	ldd	r25, Z+3	; 0x03
    3204:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	f8 01       	movw	r30, r16
    320e:	91 83       	std	Z+1, r25	; 0x01
    3210:	80 83       	st	Z, r24
    3212:	de 01       	movw	r26, r28
    3214:	af 58       	subi	r26, 0x8F	; 143
    3216:	bf 4f       	sbci	r27, 0xFF	; 255
    3218:	fe 01       	movw	r30, r28
    321a:	eb 58       	subi	r30, 0x8B	; 139
    321c:	ff 4f       	sbci	r31, 0xFF	; 255
    321e:	80 81       	ld	r24, Z
    3220:	91 81       	ldd	r25, Z+1	; 0x01
    3222:	8d 93       	st	X+, r24
    3224:	9c 93       	st	X, r25
    3226:	fe 01       	movw	r30, r28
    3228:	ef 58       	subi	r30, 0x8F	; 143
    322a:	ff 4f       	sbci	r31, 0xFF	; 255
    322c:	80 81       	ld	r24, Z
    322e:	91 81       	ldd	r25, Z+1	; 0x01
    3230:	01 97       	sbiw	r24, 0x01	; 1
    3232:	f1 f7       	brne	.-4      	; 0x3230 <main+0x124e>
    3234:	fe 01       	movw	r30, r28
    3236:	ef 58       	subi	r30, 0x8F	; 143
    3238:	ff 4f       	sbci	r31, 0xFF	; 255
    323a:	91 83       	std	Z+1, r25	; 0x01
    323c:	80 83       	st	Z, r24
					_delay_ms(200);
					Display_Str_Row_Col(0,11+i,"*");
    323e:	fe 01       	movw	r30, r28
    3240:	e4 5f       	subi	r30, 0xF4	; 244
    3242:	fe 4f       	sbci	r31, 0xFE	; 254
    3244:	80 81       	ld	r24, Z
    3246:	98 2f       	mov	r25, r24
    3248:	95 5f       	subi	r25, 0xF5	; 245
    324a:	2c ea       	ldi	r18, 0xAC	; 172
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	80 e0       	ldi	r24, 0x00	; 0
    3250:	69 2f       	mov	r22, r25
    3252:	a9 01       	movw	r20, r18
    3254:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <Display_Str_Row_Col>
					LCD_CLEAR();
					Display_Str_Row_Col(0,1,"Invalid Input");
					_delay_ms(400);
					break;
				}
				Comp_Pass += key;
    3258:	fe 01       	movw	r30, r28
    325a:	e7 5e       	subi	r30, 0xE7	; 231
    325c:	fe 4f       	sbci	r31, 0xFE	; 254
    325e:	80 81       	ld	r24, Z
    3260:	28 2f       	mov	r18, r24
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	de 01       	movw	r26, r28
    3266:	a2 5f       	subi	r26, 0xF2	; 242
    3268:	be 4f       	sbci	r27, 0xFE	; 254
    326a:	fe 01       	movw	r30, r28
    326c:	e2 5f       	subi	r30, 0xF2	; 242
    326e:	fe 4f       	sbci	r31, 0xFE	; 254
    3270:	80 81       	ld	r24, Z
    3272:	91 81       	ldd	r25, Z+1	; 0x01
    3274:	82 0f       	add	r24, r18
    3276:	93 1f       	adc	r25, r19
    3278:	8d 93       	st	X+, r24
    327a:	9c 93       	st	X, r25
				Comp_Pass = Comp_Pass * 10;
    327c:	de 01       	movw	r26, r28
    327e:	a2 5f       	subi	r26, 0xF2	; 242
    3280:	be 4f       	sbci	r27, 0xFE	; 254
    3282:	fe 01       	movw	r30, r28
    3284:	e2 5f       	subi	r30, 0xF2	; 242
    3286:	fe 4f       	sbci	r31, 0xFE	; 254
    3288:	80 81       	ld	r24, Z
    328a:	91 81       	ldd	r25, Z+1	; 0x01
    328c:	9c 01       	movw	r18, r24
    328e:	22 0f       	add	r18, r18
    3290:	33 1f       	adc	r19, r19
    3292:	c9 01       	movw	r24, r18
    3294:	88 0f       	add	r24, r24
    3296:	99 1f       	adc	r25, r25
    3298:	88 0f       	add	r24, r24
    329a:	99 1f       	adc	r25, r25
    329c:	82 0f       	add	r24, r18
    329e:	93 1f       	adc	r25, r19
    32a0:	8d 93       	st	X+, r24
    32a2:	9c 93       	st	X, r25
		// for changing the Password
		else if (mode == 2)
		{
			LCD_CLEAR();
			Display_Str("Old Pass : ");
			for (u8 i = 0; i<4 ;i++)
    32a4:	de 01       	movw	r26, r28
    32a6:	a4 5f       	subi	r26, 0xF4	; 244
    32a8:	be 4f       	sbci	r27, 0xFE	; 254
    32aa:	fe 01       	movw	r30, r28
    32ac:	e4 5f       	subi	r30, 0xF4	; 244
    32ae:	fe 4f       	sbci	r31, 0xFE	; 254
    32b0:	80 81       	ld	r24, Z
    32b2:	8f 5f       	subi	r24, 0xFF	; 255
    32b4:	8c 93       	st	X, r24
    32b6:	be c0       	rjmp	.+380    	; 0x3434 <main+0x1452>
					_delay_ms(200);
					Display_Str_Row_Col(0,11+i,"*");
				}
				else
				{
					LCD_CLEAR();
    32b8:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_CLEAR>
					Display_Str_Row_Col(0,1,"Invalid Input");
    32bc:	2e ea       	ldi	r18, 0xAE	; 174
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	80 e0       	ldi	r24, 0x00	; 0
    32c2:	61 e0       	ldi	r22, 0x01	; 1
    32c4:	a9 01       	movw	r20, r18
    32c6:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <Display_Str_Row_Col>
    32ca:	fe 01       	movw	r30, r28
    32cc:	e3 59       	subi	r30, 0x93	; 147
    32ce:	ff 4f       	sbci	r31, 0xFF	; 255
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	a8 ec       	ldi	r26, 0xC8	; 200
    32d6:	b3 e4       	ldi	r27, 0x43	; 67
    32d8:	80 83       	st	Z, r24
    32da:	91 83       	std	Z+1, r25	; 0x01
    32dc:	a2 83       	std	Z+2, r26	; 0x02
    32de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e0:	8e 01       	movw	r16, r28
    32e2:	07 59       	subi	r16, 0x97	; 151
    32e4:	1f 4f       	sbci	r17, 0xFF	; 255
    32e6:	fe 01       	movw	r30, r28
    32e8:	e3 59       	subi	r30, 0x93	; 147
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
    32ec:	60 81       	ld	r22, Z
    32ee:	71 81       	ldd	r23, Z+1	; 0x01
    32f0:	82 81       	ldd	r24, Z+2	; 0x02
    32f2:	93 81       	ldd	r25, Z+3	; 0x03
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	4a e7       	ldi	r20, 0x7A	; 122
    32fa:	55 e4       	ldi	r21, 0x45	; 69
    32fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3300:	dc 01       	movw	r26, r24
    3302:	cb 01       	movw	r24, r22
    3304:	f8 01       	movw	r30, r16
    3306:	80 83       	st	Z, r24
    3308:	91 83       	std	Z+1, r25	; 0x01
    330a:	a2 83       	std	Z+2, r26	; 0x02
    330c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    330e:	fe 01       	movw	r30, r28
    3310:	e7 59       	subi	r30, 0x97	; 151
    3312:	ff 4f       	sbci	r31, 0xFF	; 255
    3314:	60 81       	ld	r22, Z
    3316:	71 81       	ldd	r23, Z+1	; 0x01
    3318:	82 81       	ldd	r24, Z+2	; 0x02
    331a:	93 81       	ldd	r25, Z+3	; 0x03
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	40 e8       	ldi	r20, 0x80	; 128
    3322:	5f e3       	ldi	r21, 0x3F	; 63
    3324:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3328:	88 23       	and	r24, r24
    332a:	44 f4       	brge	.+16     	; 0x333c <main+0x135a>
		__ticks = 1;
    332c:	fe 01       	movw	r30, r28
    332e:	e9 59       	subi	r30, 0x99	; 153
    3330:	ff 4f       	sbci	r31, 0xFF	; 255
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	91 83       	std	Z+1, r25	; 0x01
    3338:	80 83       	st	Z, r24
    333a:	64 c0       	rjmp	.+200    	; 0x3404 <main+0x1422>
	else if (__tmp > 65535)
    333c:	fe 01       	movw	r30, r28
    333e:	e7 59       	subi	r30, 0x97	; 151
    3340:	ff 4f       	sbci	r31, 0xFF	; 255
    3342:	60 81       	ld	r22, Z
    3344:	71 81       	ldd	r23, Z+1	; 0x01
    3346:	82 81       	ldd	r24, Z+2	; 0x02
    3348:	93 81       	ldd	r25, Z+3	; 0x03
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	3f ef       	ldi	r19, 0xFF	; 255
    334e:	4f e7       	ldi	r20, 0x7F	; 127
    3350:	57 e4       	ldi	r21, 0x47	; 71
    3352:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3356:	18 16       	cp	r1, r24
    3358:	0c f0       	brlt	.+2      	; 0x335c <main+0x137a>
    335a:	43 c0       	rjmp	.+134    	; 0x33e2 <main+0x1400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    335c:	fe 01       	movw	r30, r28
    335e:	e3 59       	subi	r30, 0x93	; 147
    3360:	ff 4f       	sbci	r31, 0xFF	; 255
    3362:	60 81       	ld	r22, Z
    3364:	71 81       	ldd	r23, Z+1	; 0x01
    3366:	82 81       	ldd	r24, Z+2	; 0x02
    3368:	93 81       	ldd	r25, Z+3	; 0x03
    336a:	20 e0       	ldi	r18, 0x00	; 0
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	40 e2       	ldi	r20, 0x20	; 32
    3370:	51 e4       	ldi	r21, 0x41	; 65
    3372:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3376:	dc 01       	movw	r26, r24
    3378:	cb 01       	movw	r24, r22
    337a:	8e 01       	movw	r16, r28
    337c:	09 59       	subi	r16, 0x99	; 153
    337e:	1f 4f       	sbci	r17, 0xFF	; 255
    3380:	bc 01       	movw	r22, r24
    3382:	cd 01       	movw	r24, r26
    3384:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3388:	dc 01       	movw	r26, r24
    338a:	cb 01       	movw	r24, r22
    338c:	f8 01       	movw	r30, r16
    338e:	91 83       	std	Z+1, r25	; 0x01
    3390:	80 83       	st	Z, r24
    3392:	1f c0       	rjmp	.+62     	; 0x33d2 <main+0x13f0>
    3394:	fe 01       	movw	r30, r28
    3396:	eb 59       	subi	r30, 0x9B	; 155
    3398:	ff 4f       	sbci	r31, 0xFF	; 255
    339a:	80 e9       	ldi	r24, 0x90	; 144
    339c:	91 e0       	ldi	r25, 0x01	; 1
    339e:	91 83       	std	Z+1, r25	; 0x01
    33a0:	80 83       	st	Z, r24
    33a2:	fe 01       	movw	r30, r28
    33a4:	eb 59       	subi	r30, 0x9B	; 155
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	80 81       	ld	r24, Z
    33aa:	91 81       	ldd	r25, Z+1	; 0x01
    33ac:	01 97       	sbiw	r24, 0x01	; 1
    33ae:	f1 f7       	brne	.-4      	; 0x33ac <main+0x13ca>
    33b0:	fe 01       	movw	r30, r28
    33b2:	eb 59       	subi	r30, 0x9B	; 155
    33b4:	ff 4f       	sbci	r31, 0xFF	; 255
    33b6:	91 83       	std	Z+1, r25	; 0x01
    33b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ba:	de 01       	movw	r26, r28
    33bc:	a9 59       	subi	r26, 0x99	; 153
    33be:	bf 4f       	sbci	r27, 0xFF	; 255
    33c0:	fe 01       	movw	r30, r28
    33c2:	e9 59       	subi	r30, 0x99	; 153
    33c4:	ff 4f       	sbci	r31, 0xFF	; 255
    33c6:	80 81       	ld	r24, Z
    33c8:	91 81       	ldd	r25, Z+1	; 0x01
    33ca:	01 97       	sbiw	r24, 0x01	; 1
    33cc:	11 96       	adiw	r26, 0x01	; 1
    33ce:	9c 93       	st	X, r25
    33d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d2:	fe 01       	movw	r30, r28
    33d4:	e9 59       	subi	r30, 0x99	; 153
    33d6:	ff 4f       	sbci	r31, 0xFF	; 255
    33d8:	80 81       	ld	r24, Z
    33da:	91 81       	ldd	r25, Z+1	; 0x01
    33dc:	00 97       	sbiw	r24, 0x00	; 0
    33de:	d1 f6       	brne	.-76     	; 0x3394 <main+0x13b2>
    33e0:	30 c0       	rjmp	.+96     	; 0x3442 <main+0x1460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33e2:	8e 01       	movw	r16, r28
    33e4:	09 59       	subi	r16, 0x99	; 153
    33e6:	1f 4f       	sbci	r17, 0xFF	; 255
    33e8:	fe 01       	movw	r30, r28
    33ea:	e7 59       	subi	r30, 0x97	; 151
    33ec:	ff 4f       	sbci	r31, 0xFF	; 255
    33ee:	60 81       	ld	r22, Z
    33f0:	71 81       	ldd	r23, Z+1	; 0x01
    33f2:	82 81       	ldd	r24, Z+2	; 0x02
    33f4:	93 81       	ldd	r25, Z+3	; 0x03
    33f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	f8 01       	movw	r30, r16
    3400:	91 83       	std	Z+1, r25	; 0x01
    3402:	80 83       	st	Z, r24
    3404:	de 01       	movw	r26, r28
    3406:	ad 59       	subi	r26, 0x9D	; 157
    3408:	bf 4f       	sbci	r27, 0xFF	; 255
    340a:	fe 01       	movw	r30, r28
    340c:	e9 59       	subi	r30, 0x99	; 153
    340e:	ff 4f       	sbci	r31, 0xFF	; 255
    3410:	80 81       	ld	r24, Z
    3412:	91 81       	ldd	r25, Z+1	; 0x01
    3414:	11 96       	adiw	r26, 0x01	; 1
    3416:	9c 93       	st	X, r25
    3418:	8e 93       	st	-X, r24
    341a:	fe 01       	movw	r30, r28
    341c:	ed 59       	subi	r30, 0x9D	; 157
    341e:	ff 4f       	sbci	r31, 0xFF	; 255
    3420:	80 81       	ld	r24, Z
    3422:	91 81       	ldd	r25, Z+1	; 0x01
    3424:	01 97       	sbiw	r24, 0x01	; 1
    3426:	f1 f7       	brne	.-4      	; 0x3424 <main+0x1442>
    3428:	fe 01       	movw	r30, r28
    342a:	ed 59       	subi	r30, 0x9D	; 157
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	91 83       	std	Z+1, r25	; 0x01
    3430:	80 83       	st	Z, r24
    3432:	07 c0       	rjmp	.+14     	; 0x3442 <main+0x1460>
		// for changing the Password
		else if (mode == 2)
		{
			LCD_CLEAR();
			Display_Str("Old Pass : ");
			for (u8 i = 0; i<4 ;i++)
    3434:	fe 01       	movw	r30, r28
    3436:	e4 5f       	subi	r30, 0xF4	; 244
    3438:	fe 4f       	sbci	r31, 0xFE	; 254
    343a:	80 81       	ld	r24, Z
    343c:	84 30       	cpi	r24, 0x04	; 4
    343e:	08 f4       	brcc	.+2      	; 0x3442 <main+0x1460>
    3440:	7f cd       	rjmp	.-1282   	; 0x2f40 <main+0xf5e>
					break;
				}
				Comp_Pass += key;
				Comp_Pass = Comp_Pass * 10;
			}
			Comp_Pass = Comp_Pass / 10;
    3442:	8e 01       	movw	r16, r28
    3444:	02 5f       	subi	r16, 0xF2	; 242
    3446:	1e 4f       	sbci	r17, 0xFE	; 254
    3448:	fe 01       	movw	r30, r28
    344a:	e2 5f       	subi	r30, 0xF2	; 242
    344c:	fe 4f       	sbci	r31, 0xFE	; 254
    344e:	80 81       	ld	r24, Z
    3450:	91 81       	ldd	r25, Z+1	; 0x01
    3452:	2a e0       	ldi	r18, 0x0A	; 10
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	b9 01       	movw	r22, r18
    3458:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <__udivmodhi4>
    345c:	cb 01       	movw	r24, r22
    345e:	f8 01       	movw	r30, r16
    3460:	91 83       	std	Z+1, r25	; 0x01
    3462:	80 83       	st	Z, r24
    3464:	fe 01       	movw	r30, r28
    3466:	e1 5a       	subi	r30, 0xA1	; 161
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	80 e0       	ldi	r24, 0x00	; 0
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	a8 ec       	ldi	r26, 0xC8	; 200
    3470:	b3 e4       	ldi	r27, 0x43	; 67
    3472:	80 83       	st	Z, r24
    3474:	91 83       	std	Z+1, r25	; 0x01
    3476:	a2 83       	std	Z+2, r26	; 0x02
    3478:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    347a:	8e 01       	movw	r16, r28
    347c:	05 5a       	subi	r16, 0xA5	; 165
    347e:	1f 4f       	sbci	r17, 0xFF	; 255
    3480:	fe 01       	movw	r30, r28
    3482:	e1 5a       	subi	r30, 0xA1	; 161
    3484:	ff 4f       	sbci	r31, 0xFF	; 255
    3486:	60 81       	ld	r22, Z
    3488:	71 81       	ldd	r23, Z+1	; 0x01
    348a:	82 81       	ldd	r24, Z+2	; 0x02
    348c:	93 81       	ldd	r25, Z+3	; 0x03
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	4a e7       	ldi	r20, 0x7A	; 122
    3494:	55 e4       	ldi	r21, 0x45	; 69
    3496:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	f8 01       	movw	r30, r16
    34a0:	80 83       	st	Z, r24
    34a2:	91 83       	std	Z+1, r25	; 0x01
    34a4:	a2 83       	std	Z+2, r26	; 0x02
    34a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34a8:	fe 01       	movw	r30, r28
    34aa:	e5 5a       	subi	r30, 0xA5	; 165
    34ac:	ff 4f       	sbci	r31, 0xFF	; 255
    34ae:	60 81       	ld	r22, Z
    34b0:	71 81       	ldd	r23, Z+1	; 0x01
    34b2:	82 81       	ldd	r24, Z+2	; 0x02
    34b4:	93 81       	ldd	r25, Z+3	; 0x03
    34b6:	20 e0       	ldi	r18, 0x00	; 0
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	40 e8       	ldi	r20, 0x80	; 128
    34bc:	5f e3       	ldi	r21, 0x3F	; 63
    34be:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    34c2:	88 23       	and	r24, r24
    34c4:	44 f4       	brge	.+16     	; 0x34d6 <main+0x14f4>
		__ticks = 1;
    34c6:	fe 01       	movw	r30, r28
    34c8:	e7 5a       	subi	r30, 0xA7	; 167
    34ca:	ff 4f       	sbci	r31, 0xFF	; 255
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	91 83       	std	Z+1, r25	; 0x01
    34d2:	80 83       	st	Z, r24
    34d4:	64 c0       	rjmp	.+200    	; 0x359e <main+0x15bc>
	else if (__tmp > 65535)
    34d6:	fe 01       	movw	r30, r28
    34d8:	e5 5a       	subi	r30, 0xA5	; 165
    34da:	ff 4f       	sbci	r31, 0xFF	; 255
    34dc:	60 81       	ld	r22, Z
    34de:	71 81       	ldd	r23, Z+1	; 0x01
    34e0:	82 81       	ldd	r24, Z+2	; 0x02
    34e2:	93 81       	ldd	r25, Z+3	; 0x03
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	3f ef       	ldi	r19, 0xFF	; 255
    34e8:	4f e7       	ldi	r20, 0x7F	; 127
    34ea:	57 e4       	ldi	r21, 0x47	; 71
    34ec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    34f0:	18 16       	cp	r1, r24
    34f2:	0c f0       	brlt	.+2      	; 0x34f6 <main+0x1514>
    34f4:	43 c0       	rjmp	.+134    	; 0x357c <main+0x159a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34f6:	fe 01       	movw	r30, r28
    34f8:	e1 5a       	subi	r30, 0xA1	; 161
    34fa:	ff 4f       	sbci	r31, 0xFF	; 255
    34fc:	60 81       	ld	r22, Z
    34fe:	71 81       	ldd	r23, Z+1	; 0x01
    3500:	82 81       	ldd	r24, Z+2	; 0x02
    3502:	93 81       	ldd	r25, Z+3	; 0x03
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	40 e2       	ldi	r20, 0x20	; 32
    350a:	51 e4       	ldi	r21, 0x41	; 65
    350c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3510:	dc 01       	movw	r26, r24
    3512:	cb 01       	movw	r24, r22
    3514:	8e 01       	movw	r16, r28
    3516:	07 5a       	subi	r16, 0xA7	; 167
    3518:	1f 4f       	sbci	r17, 0xFF	; 255
    351a:	bc 01       	movw	r22, r24
    351c:	cd 01       	movw	r24, r26
    351e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	f8 01       	movw	r30, r16
    3528:	91 83       	std	Z+1, r25	; 0x01
    352a:	80 83       	st	Z, r24
    352c:	1f c0       	rjmp	.+62     	; 0x356c <main+0x158a>
    352e:	fe 01       	movw	r30, r28
    3530:	e9 5a       	subi	r30, 0xA9	; 169
    3532:	ff 4f       	sbci	r31, 0xFF	; 255
    3534:	80 e9       	ldi	r24, 0x90	; 144
    3536:	91 e0       	ldi	r25, 0x01	; 1
    3538:	91 83       	std	Z+1, r25	; 0x01
    353a:	80 83       	st	Z, r24
    353c:	fe 01       	movw	r30, r28
    353e:	e9 5a       	subi	r30, 0xA9	; 169
    3540:	ff 4f       	sbci	r31, 0xFF	; 255
    3542:	80 81       	ld	r24, Z
    3544:	91 81       	ldd	r25, Z+1	; 0x01
    3546:	01 97       	sbiw	r24, 0x01	; 1
    3548:	f1 f7       	brne	.-4      	; 0x3546 <main+0x1564>
    354a:	fe 01       	movw	r30, r28
    354c:	e9 5a       	subi	r30, 0xA9	; 169
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	91 83       	std	Z+1, r25	; 0x01
    3552:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3554:	de 01       	movw	r26, r28
    3556:	a7 5a       	subi	r26, 0xA7	; 167
    3558:	bf 4f       	sbci	r27, 0xFF	; 255
    355a:	fe 01       	movw	r30, r28
    355c:	e7 5a       	subi	r30, 0xA7	; 167
    355e:	ff 4f       	sbci	r31, 0xFF	; 255
    3560:	80 81       	ld	r24, Z
    3562:	91 81       	ldd	r25, Z+1	; 0x01
    3564:	01 97       	sbiw	r24, 0x01	; 1
    3566:	11 96       	adiw	r26, 0x01	; 1
    3568:	9c 93       	st	X, r25
    356a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    356c:	fe 01       	movw	r30, r28
    356e:	e7 5a       	subi	r30, 0xA7	; 167
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	80 81       	ld	r24, Z
    3574:	91 81       	ldd	r25, Z+1	; 0x01
    3576:	00 97       	sbiw	r24, 0x00	; 0
    3578:	d1 f6       	brne	.-76     	; 0x352e <main+0x154c>
    357a:	27 c0       	rjmp	.+78     	; 0x35ca <main+0x15e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    357c:	8e 01       	movw	r16, r28
    357e:	07 5a       	subi	r16, 0xA7	; 167
    3580:	1f 4f       	sbci	r17, 0xFF	; 255
    3582:	fe 01       	movw	r30, r28
    3584:	e5 5a       	subi	r30, 0xA5	; 165
    3586:	ff 4f       	sbci	r31, 0xFF	; 255
    3588:	60 81       	ld	r22, Z
    358a:	71 81       	ldd	r23, Z+1	; 0x01
    358c:	82 81       	ldd	r24, Z+2	; 0x02
    358e:	93 81       	ldd	r25, Z+3	; 0x03
    3590:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	f8 01       	movw	r30, r16
    359a:	91 83       	std	Z+1, r25	; 0x01
    359c:	80 83       	st	Z, r24
    359e:	de 01       	movw	r26, r28
    35a0:	ab 5a       	subi	r26, 0xAB	; 171
    35a2:	bf 4f       	sbci	r27, 0xFF	; 255
    35a4:	fe 01       	movw	r30, r28
    35a6:	e7 5a       	subi	r30, 0xA7	; 167
    35a8:	ff 4f       	sbci	r31, 0xFF	; 255
    35aa:	80 81       	ld	r24, Z
    35ac:	91 81       	ldd	r25, Z+1	; 0x01
    35ae:	8d 93       	st	X+, r24
    35b0:	9c 93       	st	X, r25
    35b2:	fe 01       	movw	r30, r28
    35b4:	eb 5a       	subi	r30, 0xAB	; 171
    35b6:	ff 4f       	sbci	r31, 0xFF	; 255
    35b8:	80 81       	ld	r24, Z
    35ba:	91 81       	ldd	r25, Z+1	; 0x01
    35bc:	01 97       	sbiw	r24, 0x01	; 1
    35be:	f1 f7       	brne	.-4      	; 0x35bc <main+0x15da>
    35c0:	fe 01       	movw	r30, r28
    35c2:	eb 5a       	subi	r30, 0xAB	; 171
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	91 83       	std	Z+1, r25	; 0x01
    35c8:	80 83       	st	Z, r24
			_delay_ms(400);
			LCD_CLEAR();
    35ca:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_CLEAR>
			if (Saved_Pass == Comp_Pass)
    35ce:	fe 01       	movw	r30, r28
    35d0:	ea 5e       	subi	r30, 0xEA	; 234
    35d2:	fe 4f       	sbci	r31, 0xFE	; 254
    35d4:	de 01       	movw	r26, r28
    35d6:	a2 5f       	subi	r26, 0xF2	; 242
    35d8:	be 4f       	sbci	r27, 0xFE	; 254
    35da:	20 81       	ld	r18, Z
    35dc:	31 81       	ldd	r19, Z+1	; 0x01
    35de:	8d 91       	ld	r24, X+
    35e0:	9c 91       	ld	r25, X
    35e2:	11 97       	sbiw	r26, 0x01	; 1
    35e4:	28 17       	cp	r18, r24
    35e6:	39 07       	cpc	r19, r25
    35e8:	09 f0       	breq	.+2      	; 0x35ec <main+0x160a>
    35ea:	12 c3       	rjmp	.+1572   	; 0x3c10 <main+0x1c2e>
			{

				Comp_Pass = 0;
    35ec:	fe 01       	movw	r30, r28
    35ee:	e2 5f       	subi	r30, 0xF2	; 242
    35f0:	fe 4f       	sbci	r31, 0xFE	; 254
    35f2:	11 82       	std	Z+1, r1	; 0x01
    35f4:	10 82       	st	Z, r1
				Saved_Pass = 0;
    35f6:	fe 01       	movw	r30, r28
    35f8:	ea 5e       	subi	r30, 0xEA	; 234
    35fa:	fe 4f       	sbci	r31, 0xFE	; 254
    35fc:	11 82       	std	Z+1, r1	; 0x01
    35fe:	10 82       	st	Z, r1
				Reversed_Pass = 0;
    3600:	fe 01       	movw	r30, r28
    3602:	ec 5e       	subi	r30, 0xEC	; 236
    3604:	fe 4f       	sbci	r31, 0xFE	; 254
    3606:	11 82       	std	Z+1, r1	; 0x01
    3608:	10 82       	st	Z, r1
				Get_Reversed_Pass = 0;
    360a:	fe 01       	movw	r30, r28
    360c:	ee 5e       	subi	r30, 0xEE	; 238
    360e:	fe 4f       	sbci	r31, 0xFE	; 254
    3610:	11 82       	std	Z+1, r1	; 0x01
    3612:	10 82       	st	Z, r1
				Display_Str("New Pass : ");
    3614:	81 ef       	ldi	r24, 0xF1	; 241
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <Display_Str>
				Display_Str_Row_Col(1,0,"only Numbers");
    361c:	2d ef       	ldi	r18, 0xFD	; 253
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	81 e0       	ldi	r24, 0x01	; 1
    3622:	60 e0       	ldi	r22, 0x00	; 0
    3624:	a9 01       	movw	r20, r18
    3626:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <Display_Str_Row_Col>
				for (u8 i = 0; i<4 ;i++)
    362a:	fe 01       	movw	r30, r28
    362c:	e5 5f       	subi	r30, 0xF5	; 245
    362e:	fe 4f       	sbci	r31, 0xFE	; 254
    3630:	10 82       	st	Z, r1
    3632:	97 c1       	rjmp	.+814    	; 0x3962 <main+0x1980>
				{
					Send_CMD(CURSOR_ON);
    3634:	8e e0       	ldi	r24, 0x0E	; 14
    3636:	0e 94 2c 0c 	call	0x1858	; 0x1858 <Send_CMD>
    363a:	fe 01       	movw	r30, r28
    363c:	ef 5a       	subi	r30, 0xAF	; 175
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	a8 ec       	ldi	r26, 0xC8	; 200
    3646:	b2 e4       	ldi	r27, 0x42	; 66
    3648:	80 83       	st	Z, r24
    364a:	91 83       	std	Z+1, r25	; 0x01
    364c:	a2 83       	std	Z+2, r26	; 0x02
    364e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3650:	8e 01       	movw	r16, r28
    3652:	03 5b       	subi	r16, 0xB3	; 179
    3654:	1f 4f       	sbci	r17, 0xFF	; 255
    3656:	fe 01       	movw	r30, r28
    3658:	ef 5a       	subi	r30, 0xAF	; 175
    365a:	ff 4f       	sbci	r31, 0xFF	; 255
    365c:	60 81       	ld	r22, Z
    365e:	71 81       	ldd	r23, Z+1	; 0x01
    3660:	82 81       	ldd	r24, Z+2	; 0x02
    3662:	93 81       	ldd	r25, Z+3	; 0x03
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	4a e7       	ldi	r20, 0x7A	; 122
    366a:	55 e4       	ldi	r21, 0x45	; 69
    366c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3670:	dc 01       	movw	r26, r24
    3672:	cb 01       	movw	r24, r22
    3674:	f8 01       	movw	r30, r16
    3676:	80 83       	st	Z, r24
    3678:	91 83       	std	Z+1, r25	; 0x01
    367a:	a2 83       	std	Z+2, r26	; 0x02
    367c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    367e:	fe 01       	movw	r30, r28
    3680:	e3 5b       	subi	r30, 0xB3	; 179
    3682:	ff 4f       	sbci	r31, 0xFF	; 255
    3684:	60 81       	ld	r22, Z
    3686:	71 81       	ldd	r23, Z+1	; 0x01
    3688:	82 81       	ldd	r24, Z+2	; 0x02
    368a:	93 81       	ldd	r25, Z+3	; 0x03
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	40 e8       	ldi	r20, 0x80	; 128
    3692:	5f e3       	ldi	r21, 0x3F	; 63
    3694:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3698:	88 23       	and	r24, r24
    369a:	44 f4       	brge	.+16     	; 0x36ac <main+0x16ca>
		__ticks = 1;
    369c:	fe 01       	movw	r30, r28
    369e:	e5 5b       	subi	r30, 0xB5	; 181
    36a0:	ff 4f       	sbci	r31, 0xFF	; 255
    36a2:	81 e0       	ldi	r24, 0x01	; 1
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	91 83       	std	Z+1, r25	; 0x01
    36a8:	80 83       	st	Z, r24
    36aa:	64 c0       	rjmp	.+200    	; 0x3774 <main+0x1792>
	else if (__tmp > 65535)
    36ac:	fe 01       	movw	r30, r28
    36ae:	e3 5b       	subi	r30, 0xB3	; 179
    36b0:	ff 4f       	sbci	r31, 0xFF	; 255
    36b2:	60 81       	ld	r22, Z
    36b4:	71 81       	ldd	r23, Z+1	; 0x01
    36b6:	82 81       	ldd	r24, Z+2	; 0x02
    36b8:	93 81       	ldd	r25, Z+3	; 0x03
    36ba:	20 e0       	ldi	r18, 0x00	; 0
    36bc:	3f ef       	ldi	r19, 0xFF	; 255
    36be:	4f e7       	ldi	r20, 0x7F	; 127
    36c0:	57 e4       	ldi	r21, 0x47	; 71
    36c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    36c6:	18 16       	cp	r1, r24
    36c8:	0c f0       	brlt	.+2      	; 0x36cc <main+0x16ea>
    36ca:	43 c0       	rjmp	.+134    	; 0x3752 <main+0x1770>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36cc:	fe 01       	movw	r30, r28
    36ce:	ef 5a       	subi	r30, 0xAF	; 175
    36d0:	ff 4f       	sbci	r31, 0xFF	; 255
    36d2:	60 81       	ld	r22, Z
    36d4:	71 81       	ldd	r23, Z+1	; 0x01
    36d6:	82 81       	ldd	r24, Z+2	; 0x02
    36d8:	93 81       	ldd	r25, Z+3	; 0x03
    36da:	20 e0       	ldi	r18, 0x00	; 0
    36dc:	30 e0       	ldi	r19, 0x00	; 0
    36de:	40 e2       	ldi	r20, 0x20	; 32
    36e0:	51 e4       	ldi	r21, 0x41	; 65
    36e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36e6:	dc 01       	movw	r26, r24
    36e8:	cb 01       	movw	r24, r22
    36ea:	8e 01       	movw	r16, r28
    36ec:	05 5b       	subi	r16, 0xB5	; 181
    36ee:	1f 4f       	sbci	r17, 0xFF	; 255
    36f0:	bc 01       	movw	r22, r24
    36f2:	cd 01       	movw	r24, r26
    36f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36f8:	dc 01       	movw	r26, r24
    36fa:	cb 01       	movw	r24, r22
    36fc:	f8 01       	movw	r30, r16
    36fe:	91 83       	std	Z+1, r25	; 0x01
    3700:	80 83       	st	Z, r24
    3702:	1f c0       	rjmp	.+62     	; 0x3742 <main+0x1760>
    3704:	fe 01       	movw	r30, r28
    3706:	e7 5b       	subi	r30, 0xB7	; 183
    3708:	ff 4f       	sbci	r31, 0xFF	; 255
    370a:	80 e9       	ldi	r24, 0x90	; 144
    370c:	91 e0       	ldi	r25, 0x01	; 1
    370e:	91 83       	std	Z+1, r25	; 0x01
    3710:	80 83       	st	Z, r24
    3712:	fe 01       	movw	r30, r28
    3714:	e7 5b       	subi	r30, 0xB7	; 183
    3716:	ff 4f       	sbci	r31, 0xFF	; 255
    3718:	80 81       	ld	r24, Z
    371a:	91 81       	ldd	r25, Z+1	; 0x01
    371c:	01 97       	sbiw	r24, 0x01	; 1
    371e:	f1 f7       	brne	.-4      	; 0x371c <main+0x173a>
    3720:	fe 01       	movw	r30, r28
    3722:	e7 5b       	subi	r30, 0xB7	; 183
    3724:	ff 4f       	sbci	r31, 0xFF	; 255
    3726:	91 83       	std	Z+1, r25	; 0x01
    3728:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    372a:	de 01       	movw	r26, r28
    372c:	a5 5b       	subi	r26, 0xB5	; 181
    372e:	bf 4f       	sbci	r27, 0xFF	; 255
    3730:	fe 01       	movw	r30, r28
    3732:	e5 5b       	subi	r30, 0xB5	; 181
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	80 81       	ld	r24, Z
    3738:	91 81       	ldd	r25, Z+1	; 0x01
    373a:	01 97       	sbiw	r24, 0x01	; 1
    373c:	11 96       	adiw	r26, 0x01	; 1
    373e:	9c 93       	st	X, r25
    3740:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3742:	fe 01       	movw	r30, r28
    3744:	e5 5b       	subi	r30, 0xB5	; 181
    3746:	ff 4f       	sbci	r31, 0xFF	; 255
    3748:	80 81       	ld	r24, Z
    374a:	91 81       	ldd	r25, Z+1	; 0x01
    374c:	00 97       	sbiw	r24, 0x00	; 0
    374e:	d1 f6       	brne	.-76     	; 0x3704 <main+0x1722>
    3750:	27 c0       	rjmp	.+78     	; 0x37a0 <main+0x17be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3752:	8e 01       	movw	r16, r28
    3754:	05 5b       	subi	r16, 0xB5	; 181
    3756:	1f 4f       	sbci	r17, 0xFF	; 255
    3758:	fe 01       	movw	r30, r28
    375a:	e3 5b       	subi	r30, 0xB3	; 179
    375c:	ff 4f       	sbci	r31, 0xFF	; 255
    375e:	60 81       	ld	r22, Z
    3760:	71 81       	ldd	r23, Z+1	; 0x01
    3762:	82 81       	ldd	r24, Z+2	; 0x02
    3764:	93 81       	ldd	r25, Z+3	; 0x03
    3766:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	f8 01       	movw	r30, r16
    3770:	91 83       	std	Z+1, r25	; 0x01
    3772:	80 83       	st	Z, r24
    3774:	de 01       	movw	r26, r28
    3776:	a9 5b       	subi	r26, 0xB9	; 185
    3778:	bf 4f       	sbci	r27, 0xFF	; 255
    377a:	fe 01       	movw	r30, r28
    377c:	e5 5b       	subi	r30, 0xB5	; 181
    377e:	ff 4f       	sbci	r31, 0xFF	; 255
    3780:	80 81       	ld	r24, Z
    3782:	91 81       	ldd	r25, Z+1	; 0x01
    3784:	8d 93       	st	X+, r24
    3786:	9c 93       	st	X, r25
    3788:	fe 01       	movw	r30, r28
    378a:	e9 5b       	subi	r30, 0xB9	; 185
    378c:	ff 4f       	sbci	r31, 0xFF	; 255
    378e:	80 81       	ld	r24, Z
    3790:	91 81       	ldd	r25, Z+1	; 0x01
    3792:	01 97       	sbiw	r24, 0x01	; 1
    3794:	f1 f7       	brne	.-4      	; 0x3792 <main+0x17b0>
    3796:	fe 01       	movw	r30, r28
    3798:	e9 5b       	subi	r30, 0xB9	; 185
    379a:	ff 4f       	sbci	r31, 0xFF	; 255
    379c:	91 83       	std	Z+1, r25	; 0x01
    379e:	80 83       	st	Z, r24
					_delay_ms(100);
					Send_CMD(CURSOR_OFF);
    37a0:	8c e0       	ldi	r24, 0x0C	; 12
    37a2:	0e 94 2c 0c 	call	0x1858	; 0x1858 <Send_CMD>

					key = Keypad_GetPressedKey();
    37a6:	0e 94 3d 09 	call	0x127a	; 0x127a <Keypad_GetPressedKey>
    37aa:	fe 01       	movw	r30, r28
    37ac:	e7 5e       	subi	r30, 0xE7	; 231
    37ae:	fe 4f       	sbci	r31, 0xFE	; 254
    37b0:	80 83       	st	Z, r24
					if ((key>=0) && (key <=9))
    37b2:	fe 01       	movw	r30, r28
    37b4:	e7 5e       	subi	r30, 0xE7	; 231
    37b6:	fe 4f       	sbci	r31, 0xFE	; 254
    37b8:	80 81       	ld	r24, Z
    37ba:	8a 30       	cpi	r24, 0x0A	; 10
    37bc:	08 f0       	brcs	.+2      	; 0x37c0 <main+0x17de>
    37be:	a2 c0       	rjmp	.+324    	; 0x3904 <main+0x1922>
					{
						Go_To_Row_Col(0,11+i);
    37c0:	fe 01       	movw	r30, r28
    37c2:	e5 5f       	subi	r30, 0xF5	; 245
    37c4:	fe 4f       	sbci	r31, 0xFE	; 254
    37c6:	80 81       	ld	r24, Z
    37c8:	98 2f       	mov	r25, r24
    37ca:	95 5f       	subi	r25, 0xF5	; 245
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	69 2f       	mov	r22, r25
    37d0:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <Go_To_Row_Col>
						Integer_TO_String (key);
    37d4:	fe 01       	movw	r30, r28
    37d6:	e7 5e       	subi	r30, 0xE7	; 231
    37d8:	fe 4f       	sbci	r31, 0xFE	; 254
    37da:	80 81       	ld	r24, Z
    37dc:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <Integer_TO_String>
    37e0:	fe 01       	movw	r30, r28
    37e2:	ed 5b       	subi	r30, 0xBD	; 189
    37e4:	ff 4f       	sbci	r31, 0xFF	; 255
    37e6:	80 e0       	ldi	r24, 0x00	; 0
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	a8 e4       	ldi	r26, 0x48	; 72
    37ec:	b3 e4       	ldi	r27, 0x43	; 67
    37ee:	80 83       	st	Z, r24
    37f0:	91 83       	std	Z+1, r25	; 0x01
    37f2:	a2 83       	std	Z+2, r26	; 0x02
    37f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37f6:	8e 01       	movw	r16, r28
    37f8:	01 5c       	subi	r16, 0xC1	; 193
    37fa:	1f 4f       	sbci	r17, 0xFF	; 255
    37fc:	fe 01       	movw	r30, r28
    37fe:	ed 5b       	subi	r30, 0xBD	; 189
    3800:	ff 4f       	sbci	r31, 0xFF	; 255
    3802:	60 81       	ld	r22, Z
    3804:	71 81       	ldd	r23, Z+1	; 0x01
    3806:	82 81       	ldd	r24, Z+2	; 0x02
    3808:	93 81       	ldd	r25, Z+3	; 0x03
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	4a e7       	ldi	r20, 0x7A	; 122
    3810:	55 e4       	ldi	r21, 0x45	; 69
    3812:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3816:	dc 01       	movw	r26, r24
    3818:	cb 01       	movw	r24, r22
    381a:	f8 01       	movw	r30, r16
    381c:	80 83       	st	Z, r24
    381e:	91 83       	std	Z+1, r25	; 0x01
    3820:	a2 83       	std	Z+2, r26	; 0x02
    3822:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3824:	fe 01       	movw	r30, r28
    3826:	ff 96       	adiw	r30, 0x3f	; 63
    3828:	60 81       	ld	r22, Z
    382a:	71 81       	ldd	r23, Z+1	; 0x01
    382c:	82 81       	ldd	r24, Z+2	; 0x02
    382e:	93 81       	ldd	r25, Z+3	; 0x03
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	40 e8       	ldi	r20, 0x80	; 128
    3836:	5f e3       	ldi	r21, 0x3F	; 63
    3838:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    383c:	88 23       	and	r24, r24
    383e:	2c f4       	brge	.+10     	; 0x384a <main+0x1868>
		__ticks = 1;
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	9e af       	std	Y+62, r25	; 0x3e
    3846:	8d af       	std	Y+61, r24	; 0x3d
    3848:	46 c0       	rjmp	.+140    	; 0x38d6 <main+0x18f4>
	else if (__tmp > 65535)
    384a:	fe 01       	movw	r30, r28
    384c:	ff 96       	adiw	r30, 0x3f	; 63
    384e:	60 81       	ld	r22, Z
    3850:	71 81       	ldd	r23, Z+1	; 0x01
    3852:	82 81       	ldd	r24, Z+2	; 0x02
    3854:	93 81       	ldd	r25, Z+3	; 0x03
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	3f ef       	ldi	r19, 0xFF	; 255
    385a:	4f e7       	ldi	r20, 0x7F	; 127
    385c:	57 e4       	ldi	r21, 0x47	; 71
    385e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3862:	18 16       	cp	r1, r24
    3864:	64 f5       	brge	.+88     	; 0x38be <main+0x18dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3866:	fe 01       	movw	r30, r28
    3868:	ed 5b       	subi	r30, 0xBD	; 189
    386a:	ff 4f       	sbci	r31, 0xFF	; 255
    386c:	60 81       	ld	r22, Z
    386e:	71 81       	ldd	r23, Z+1	; 0x01
    3870:	82 81       	ldd	r24, Z+2	; 0x02
    3872:	93 81       	ldd	r25, Z+3	; 0x03
    3874:	20 e0       	ldi	r18, 0x00	; 0
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	40 e2       	ldi	r20, 0x20	; 32
    387a:	51 e4       	ldi	r21, 0x41	; 65
    387c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3880:	dc 01       	movw	r26, r24
    3882:	cb 01       	movw	r24, r22
    3884:	bc 01       	movw	r22, r24
    3886:	cd 01       	movw	r24, r26
    3888:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    388c:	dc 01       	movw	r26, r24
    388e:	cb 01       	movw	r24, r22
    3890:	9e af       	std	Y+62, r25	; 0x3e
    3892:	8d af       	std	Y+61, r24	; 0x3d
    3894:	0f c0       	rjmp	.+30     	; 0x38b4 <main+0x18d2>
    3896:	80 e9       	ldi	r24, 0x90	; 144
    3898:	91 e0       	ldi	r25, 0x01	; 1
    389a:	9c af       	std	Y+60, r25	; 0x3c
    389c:	8b af       	std	Y+59, r24	; 0x3b
    389e:	8b ad       	ldd	r24, Y+59	; 0x3b
    38a0:	9c ad       	ldd	r25, Y+60	; 0x3c
    38a2:	01 97       	sbiw	r24, 0x01	; 1
    38a4:	f1 f7       	brne	.-4      	; 0x38a2 <main+0x18c0>
    38a6:	9c af       	std	Y+60, r25	; 0x3c
    38a8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    38ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    38ae:	01 97       	sbiw	r24, 0x01	; 1
    38b0:	9e af       	std	Y+62, r25	; 0x3e
    38b2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    38b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    38b8:	00 97       	sbiw	r24, 0x00	; 0
    38ba:	69 f7       	brne	.-38     	; 0x3896 <main+0x18b4>
    38bc:	16 c0       	rjmp	.+44     	; 0x38ea <main+0x1908>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38be:	fe 01       	movw	r30, r28
    38c0:	ff 96       	adiw	r30, 0x3f	; 63
    38c2:	60 81       	ld	r22, Z
    38c4:	71 81       	ldd	r23, Z+1	; 0x01
    38c6:	82 81       	ldd	r24, Z+2	; 0x02
    38c8:	93 81       	ldd	r25, Z+3	; 0x03
    38ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	9e af       	std	Y+62, r25	; 0x3e
    38d4:	8d af       	std	Y+61, r24	; 0x3d
    38d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    38d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    38da:	9a af       	std	Y+58, r25	; 0x3a
    38dc:	89 af       	std	Y+57, r24	; 0x39
    38de:	89 ad       	ldd	r24, Y+57	; 0x39
    38e0:	9a ad       	ldd	r25, Y+58	; 0x3a
    38e2:	01 97       	sbiw	r24, 0x01	; 1
    38e4:	f1 f7       	brne	.-4      	; 0x38e2 <main+0x1900>
    38e6:	9a af       	std	Y+58, r25	; 0x3a
    38e8:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(200);
						Display_Str_Row_Col(0,11+i,"*");
    38ea:	fe 01       	movw	r30, r28
    38ec:	e5 5f       	subi	r30, 0xF5	; 245
    38ee:	fe 4f       	sbci	r31, 0xFE	; 254
    38f0:	80 81       	ld	r24, Z
    38f2:	98 2f       	mov	r25, r24
    38f4:	95 5f       	subi	r25, 0xF5	; 245
    38f6:	2c ea       	ldi	r18, 0xAC	; 172
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	80 e0       	ldi	r24, 0x00	; 0
    38fc:	69 2f       	mov	r22, r25
    38fe:	a9 01       	movw	r20, r18
    3900:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <Display_Str_Row_Col>
					}

					Saved_Pass += key;
    3904:	fe 01       	movw	r30, r28
    3906:	e7 5e       	subi	r30, 0xE7	; 231
    3908:	fe 4f       	sbci	r31, 0xFE	; 254
    390a:	80 81       	ld	r24, Z
    390c:	28 2f       	mov	r18, r24
    390e:	30 e0       	ldi	r19, 0x00	; 0
    3910:	de 01       	movw	r26, r28
    3912:	aa 5e       	subi	r26, 0xEA	; 234
    3914:	be 4f       	sbci	r27, 0xFE	; 254
    3916:	fe 01       	movw	r30, r28
    3918:	ea 5e       	subi	r30, 0xEA	; 234
    391a:	fe 4f       	sbci	r31, 0xFE	; 254
    391c:	80 81       	ld	r24, Z
    391e:	91 81       	ldd	r25, Z+1	; 0x01
    3920:	82 0f       	add	r24, r18
    3922:	93 1f       	adc	r25, r19
    3924:	8d 93       	st	X+, r24
    3926:	9c 93       	st	X, r25
					Saved_Pass = Saved_Pass * 10;
    3928:	de 01       	movw	r26, r28
    392a:	aa 5e       	subi	r26, 0xEA	; 234
    392c:	be 4f       	sbci	r27, 0xFE	; 254
    392e:	fe 01       	movw	r30, r28
    3930:	ea 5e       	subi	r30, 0xEA	; 234
    3932:	fe 4f       	sbci	r31, 0xFE	; 254
    3934:	80 81       	ld	r24, Z
    3936:	91 81       	ldd	r25, Z+1	; 0x01
    3938:	9c 01       	movw	r18, r24
    393a:	22 0f       	add	r18, r18
    393c:	33 1f       	adc	r19, r19
    393e:	c9 01       	movw	r24, r18
    3940:	88 0f       	add	r24, r24
    3942:	99 1f       	adc	r25, r25
    3944:	88 0f       	add	r24, r24
    3946:	99 1f       	adc	r25, r25
    3948:	82 0f       	add	r24, r18
    394a:	93 1f       	adc	r25, r19
    394c:	8d 93       	st	X+, r24
    394e:	9c 93       	st	X, r25
				Saved_Pass = 0;
				Reversed_Pass = 0;
				Get_Reversed_Pass = 0;
				Display_Str("New Pass : ");
				Display_Str_Row_Col(1,0,"only Numbers");
				for (u8 i = 0; i<4 ;i++)
    3950:	de 01       	movw	r26, r28
    3952:	a5 5f       	subi	r26, 0xF5	; 245
    3954:	be 4f       	sbci	r27, 0xFE	; 254
    3956:	fe 01       	movw	r30, r28
    3958:	e5 5f       	subi	r30, 0xF5	; 245
    395a:	fe 4f       	sbci	r31, 0xFE	; 254
    395c:	80 81       	ld	r24, Z
    395e:	8f 5f       	subi	r24, 0xFF	; 255
    3960:	8c 93       	st	X, r24
    3962:	fe 01       	movw	r30, r28
    3964:	e5 5f       	subi	r30, 0xF5	; 245
    3966:	fe 4f       	sbci	r31, 0xFE	; 254
    3968:	80 81       	ld	r24, Z
    396a:	84 30       	cpi	r24, 0x04	; 4
    396c:	08 f4       	brcc	.+2      	; 0x3970 <main+0x198e>
    396e:	62 ce       	rjmp	.-828    	; 0x3634 <main+0x1652>
					}

					Saved_Pass += key;
					Saved_Pass = Saved_Pass * 10;
				}
				Saved_Pass = Saved_Pass / 10;
    3970:	8e 01       	movw	r16, r28
    3972:	0a 5e       	subi	r16, 0xEA	; 234
    3974:	1e 4f       	sbci	r17, 0xFE	; 254
    3976:	fe 01       	movw	r30, r28
    3978:	ea 5e       	subi	r30, 0xEA	; 234
    397a:	fe 4f       	sbci	r31, 0xFE	; 254
    397c:	80 81       	ld	r24, Z
    397e:	91 81       	ldd	r25, Z+1	; 0x01
    3980:	2a e0       	ldi	r18, 0x0A	; 10
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	b9 01       	movw	r22, r18
    3986:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <__udivmodhi4>
    398a:	cb 01       	movw	r24, r22
    398c:	f8 01       	movw	r30, r16
    398e:	91 83       	std	Z+1, r25	; 0x01
    3990:	80 83       	st	Z, r24
				Temp_Pass = Saved_Pass;
    3992:	de 01       	movw	r26, r28
    3994:	a0 5f       	subi	r26, 0xF0	; 240
    3996:	be 4f       	sbci	r27, 0xFE	; 254
    3998:	fe 01       	movw	r30, r28
    399a:	ea 5e       	subi	r30, 0xEA	; 234
    399c:	fe 4f       	sbci	r31, 0xFE	; 254
    399e:	80 81       	ld	r24, Z
    39a0:	91 81       	ldd	r25, Z+1	; 0x01
    39a2:	11 96       	adiw	r26, 0x01	; 1
    39a4:	9c 93       	st	X, r25
    39a6:	8e 93       	st	-X, r24
    39a8:	3d c0       	rjmp	.+122    	; 0x3a24 <main+0x1a42>
				while (Temp_Pass > 0)
				{
					Get_Reversed_Pass = Temp_Pass % 10;
    39aa:	8e 01       	movw	r16, r28
    39ac:	0e 5e       	subi	r16, 0xEE	; 238
    39ae:	1e 4f       	sbci	r17, 0xFE	; 254
    39b0:	fe 01       	movw	r30, r28
    39b2:	e0 5f       	subi	r30, 0xF0	; 240
    39b4:	fe 4f       	sbci	r31, 0xFE	; 254
    39b6:	80 81       	ld	r24, Z
    39b8:	91 81       	ldd	r25, Z+1	; 0x01
    39ba:	2a e0       	ldi	r18, 0x0A	; 10
    39bc:	30 e0       	ldi	r19, 0x00	; 0
    39be:	b9 01       	movw	r22, r18
    39c0:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <__udivmodhi4>
    39c4:	f8 01       	movw	r30, r16
    39c6:	91 83       	std	Z+1, r25	; 0x01
    39c8:	80 83       	st	Z, r24
					Reversed_Pass = (Reversed_Pass * 10) + Get_Reversed_Pass;
    39ca:	fe 01       	movw	r30, r28
    39cc:	ec 5e       	subi	r30, 0xEC	; 236
    39ce:	fe 4f       	sbci	r31, 0xFE	; 254
    39d0:	80 81       	ld	r24, Z
    39d2:	91 81       	ldd	r25, Z+1	; 0x01
    39d4:	9c 01       	movw	r18, r24
    39d6:	22 0f       	add	r18, r18
    39d8:	33 1f       	adc	r19, r19
    39da:	c9 01       	movw	r24, r18
    39dc:	88 0f       	add	r24, r24
    39de:	99 1f       	adc	r25, r25
    39e0:	88 0f       	add	r24, r24
    39e2:	99 1f       	adc	r25, r25
    39e4:	28 0f       	add	r18, r24
    39e6:	39 1f       	adc	r19, r25
    39e8:	de 01       	movw	r26, r28
    39ea:	ac 5e       	subi	r26, 0xEC	; 236
    39ec:	be 4f       	sbci	r27, 0xFE	; 254
    39ee:	fe 01       	movw	r30, r28
    39f0:	ee 5e       	subi	r30, 0xEE	; 238
    39f2:	fe 4f       	sbci	r31, 0xFE	; 254
    39f4:	80 81       	ld	r24, Z
    39f6:	91 81       	ldd	r25, Z+1	; 0x01
    39f8:	82 0f       	add	r24, r18
    39fa:	93 1f       	adc	r25, r19
    39fc:	11 96       	adiw	r26, 0x01	; 1
    39fe:	9c 93       	st	X, r25
    3a00:	8e 93       	st	-X, r24
					Temp_Pass = Temp_Pass / 10;
    3a02:	8e 01       	movw	r16, r28
    3a04:	00 5f       	subi	r16, 0xF0	; 240
    3a06:	1e 4f       	sbci	r17, 0xFE	; 254
    3a08:	fe 01       	movw	r30, r28
    3a0a:	e0 5f       	subi	r30, 0xF0	; 240
    3a0c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a0e:	80 81       	ld	r24, Z
    3a10:	91 81       	ldd	r25, Z+1	; 0x01
    3a12:	2a e0       	ldi	r18, 0x0A	; 10
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	b9 01       	movw	r22, r18
    3a18:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <__udivmodhi4>
    3a1c:	cb 01       	movw	r24, r22
    3a1e:	f8 01       	movw	r30, r16
    3a20:	91 83       	std	Z+1, r25	; 0x01
    3a22:	80 83       	st	Z, r24
					Saved_Pass += key;
					Saved_Pass = Saved_Pass * 10;
				}
				Saved_Pass = Saved_Pass / 10;
				Temp_Pass = Saved_Pass;
				while (Temp_Pass > 0)
    3a24:	fe 01       	movw	r30, r28
    3a26:	e0 5f       	subi	r30, 0xF0	; 240
    3a28:	fe 4f       	sbci	r31, 0xFE	; 254
    3a2a:	80 81       	ld	r24, Z
    3a2c:	91 81       	ldd	r25, Z+1	; 0x01
    3a2e:	00 97       	sbiw	r24, 0x00	; 0
    3a30:	09 f0       	breq	.+2      	; 0x3a34 <main+0x1a52>
    3a32:	bb cf       	rjmp	.-138    	; 0x39aa <main+0x19c8>
    3a34:	80 e0       	ldi	r24, 0x00	; 0
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	a8 ec       	ldi	r26, 0xC8	; 200
    3a3a:	b3 e4       	ldi	r27, 0x43	; 67
    3a3c:	8d ab       	std	Y+53, r24	; 0x35
    3a3e:	9e ab       	std	Y+54, r25	; 0x36
    3a40:	af ab       	std	Y+55, r26	; 0x37
    3a42:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a44:	6d a9       	ldd	r22, Y+53	; 0x35
    3a46:	7e a9       	ldd	r23, Y+54	; 0x36
    3a48:	8f a9       	ldd	r24, Y+55	; 0x37
    3a4a:	98 ad       	ldd	r25, Y+56	; 0x38
    3a4c:	20 e0       	ldi	r18, 0x00	; 0
    3a4e:	30 e0       	ldi	r19, 0x00	; 0
    3a50:	4a e7       	ldi	r20, 0x7A	; 122
    3a52:	55 e4       	ldi	r21, 0x45	; 69
    3a54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a58:	dc 01       	movw	r26, r24
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	89 ab       	std	Y+49, r24	; 0x31
    3a5e:	9a ab       	std	Y+50, r25	; 0x32
    3a60:	ab ab       	std	Y+51, r26	; 0x33
    3a62:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a64:	69 a9       	ldd	r22, Y+49	; 0x31
    3a66:	7a a9       	ldd	r23, Y+50	; 0x32
    3a68:	8b a9       	ldd	r24, Y+51	; 0x33
    3a6a:	9c a9       	ldd	r25, Y+52	; 0x34
    3a6c:	20 e0       	ldi	r18, 0x00	; 0
    3a6e:	30 e0       	ldi	r19, 0x00	; 0
    3a70:	40 e8       	ldi	r20, 0x80	; 128
    3a72:	5f e3       	ldi	r21, 0x3F	; 63
    3a74:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3a78:	88 23       	and	r24, r24
    3a7a:	2c f4       	brge	.+10     	; 0x3a86 <main+0x1aa4>
		__ticks = 1;
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	98 ab       	std	Y+48, r25	; 0x30
    3a82:	8f a7       	std	Y+47, r24	; 0x2f
    3a84:	3f c0       	rjmp	.+126    	; 0x3b04 <main+0x1b22>
	else if (__tmp > 65535)
    3a86:	69 a9       	ldd	r22, Y+49	; 0x31
    3a88:	7a a9       	ldd	r23, Y+50	; 0x32
    3a8a:	8b a9       	ldd	r24, Y+51	; 0x33
    3a8c:	9c a9       	ldd	r25, Y+52	; 0x34
    3a8e:	20 e0       	ldi	r18, 0x00	; 0
    3a90:	3f ef       	ldi	r19, 0xFF	; 255
    3a92:	4f e7       	ldi	r20, 0x7F	; 127
    3a94:	57 e4       	ldi	r21, 0x47	; 71
    3a96:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3a9a:	18 16       	cp	r1, r24
    3a9c:	4c f5       	brge	.+82     	; 0x3af0 <main+0x1b0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a9e:	6d a9       	ldd	r22, Y+53	; 0x35
    3aa0:	7e a9       	ldd	r23, Y+54	; 0x36
    3aa2:	8f a9       	ldd	r24, Y+55	; 0x37
    3aa4:	98 ad       	ldd	r25, Y+56	; 0x38
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	40 e2       	ldi	r20, 0x20	; 32
    3aac:	51 e4       	ldi	r21, 0x41	; 65
    3aae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	bc 01       	movw	r22, r24
    3ab8:	cd 01       	movw	r24, r26
    3aba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3abe:	dc 01       	movw	r26, r24
    3ac0:	cb 01       	movw	r24, r22
    3ac2:	98 ab       	std	Y+48, r25	; 0x30
    3ac4:	8f a7       	std	Y+47, r24	; 0x2f
    3ac6:	0f c0       	rjmp	.+30     	; 0x3ae6 <main+0x1b04>
    3ac8:	80 e9       	ldi	r24, 0x90	; 144
    3aca:	91 e0       	ldi	r25, 0x01	; 1
    3acc:	9e a7       	std	Y+46, r25	; 0x2e
    3ace:	8d a7       	std	Y+45, r24	; 0x2d
    3ad0:	8d a5       	ldd	r24, Y+45	; 0x2d
    3ad2:	9e a5       	ldd	r25, Y+46	; 0x2e
    3ad4:	01 97       	sbiw	r24, 0x01	; 1
    3ad6:	f1 f7       	brne	.-4      	; 0x3ad4 <main+0x1af2>
    3ad8:	9e a7       	std	Y+46, r25	; 0x2e
    3ada:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3adc:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ade:	98 a9       	ldd	r25, Y+48	; 0x30
    3ae0:	01 97       	sbiw	r24, 0x01	; 1
    3ae2:	98 ab       	std	Y+48, r25	; 0x30
    3ae4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ae6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ae8:	98 a9       	ldd	r25, Y+48	; 0x30
    3aea:	00 97       	sbiw	r24, 0x00	; 0
    3aec:	69 f7       	brne	.-38     	; 0x3ac8 <main+0x1ae6>
    3aee:	14 c0       	rjmp	.+40     	; 0x3b18 <main+0x1b36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3af0:	69 a9       	ldd	r22, Y+49	; 0x31
    3af2:	7a a9       	ldd	r23, Y+50	; 0x32
    3af4:	8b a9       	ldd	r24, Y+51	; 0x33
    3af6:	9c a9       	ldd	r25, Y+52	; 0x34
    3af8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3afc:	dc 01       	movw	r26, r24
    3afe:	cb 01       	movw	r24, r22
    3b00:	98 ab       	std	Y+48, r25	; 0x30
    3b02:	8f a7       	std	Y+47, r24	; 0x2f
    3b04:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b06:	98 a9       	ldd	r25, Y+48	; 0x30
    3b08:	9c a7       	std	Y+44, r25	; 0x2c
    3b0a:	8b a7       	std	Y+43, r24	; 0x2b
    3b0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b0e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b10:	01 97       	sbiw	r24, 0x01	; 1
    3b12:	f1 f7       	brne	.-4      	; 0x3b10 <main+0x1b2e>
    3b14:	9c a7       	std	Y+44, r25	; 0x2c
    3b16:	8b a7       	std	Y+43, r24	; 0x2b
					Get_Reversed_Pass = Temp_Pass % 10;
					Reversed_Pass = (Reversed_Pass * 10) + Get_Reversed_Pass;
					Temp_Pass = Temp_Pass / 10;
				}
				_delay_ms(400);
				LCD_CLEAR();
    3b18:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_CLEAR>
				Display_Str("Password changed");
    3b1c:	8a e0       	ldi	r24, 0x0A	; 10
    3b1e:	91 e0       	ldi	r25, 0x01	; 1
    3b20:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <Display_Str>
    3b24:	80 e0       	ldi	r24, 0x00	; 0
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	a8 ec       	ldi	r26, 0xC8	; 200
    3b2a:	b3 e4       	ldi	r27, 0x43	; 67
    3b2c:	8f a3       	std	Y+39, r24	; 0x27
    3b2e:	98 a7       	std	Y+40, r25	; 0x28
    3b30:	a9 a7       	std	Y+41, r26	; 0x29
    3b32:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b34:	6f a1       	ldd	r22, Y+39	; 0x27
    3b36:	78 a5       	ldd	r23, Y+40	; 0x28
    3b38:	89 a5       	ldd	r24, Y+41	; 0x29
    3b3a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b3c:	20 e0       	ldi	r18, 0x00	; 0
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	4a e7       	ldi	r20, 0x7A	; 122
    3b42:	55 e4       	ldi	r21, 0x45	; 69
    3b44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b48:	dc 01       	movw	r26, r24
    3b4a:	cb 01       	movw	r24, r22
    3b4c:	8b a3       	std	Y+35, r24	; 0x23
    3b4e:	9c a3       	std	Y+36, r25	; 0x24
    3b50:	ad a3       	std	Y+37, r26	; 0x25
    3b52:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b54:	6b a1       	ldd	r22, Y+35	; 0x23
    3b56:	7c a1       	ldd	r23, Y+36	; 0x24
    3b58:	8d a1       	ldd	r24, Y+37	; 0x25
    3b5a:	9e a1       	ldd	r25, Y+38	; 0x26
    3b5c:	20 e0       	ldi	r18, 0x00	; 0
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	40 e8       	ldi	r20, 0x80	; 128
    3b62:	5f e3       	ldi	r21, 0x3F	; 63
    3b64:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3b68:	88 23       	and	r24, r24
    3b6a:	2c f4       	brge	.+10     	; 0x3b76 <main+0x1b94>
		__ticks = 1;
    3b6c:	81 e0       	ldi	r24, 0x01	; 1
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	9a a3       	std	Y+34, r25	; 0x22
    3b72:	89 a3       	std	Y+33, r24	; 0x21
    3b74:	3f c0       	rjmp	.+126    	; 0x3bf4 <main+0x1c12>
	else if (__tmp > 65535)
    3b76:	6b a1       	ldd	r22, Y+35	; 0x23
    3b78:	7c a1       	ldd	r23, Y+36	; 0x24
    3b7a:	8d a1       	ldd	r24, Y+37	; 0x25
    3b7c:	9e a1       	ldd	r25, Y+38	; 0x26
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	3f ef       	ldi	r19, 0xFF	; 255
    3b82:	4f e7       	ldi	r20, 0x7F	; 127
    3b84:	57 e4       	ldi	r21, 0x47	; 71
    3b86:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3b8a:	18 16       	cp	r1, r24
    3b8c:	4c f5       	brge	.+82     	; 0x3be0 <main+0x1bfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b8e:	6f a1       	ldd	r22, Y+39	; 0x27
    3b90:	78 a5       	ldd	r23, Y+40	; 0x28
    3b92:	89 a5       	ldd	r24, Y+41	; 0x29
    3b94:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b96:	20 e0       	ldi	r18, 0x00	; 0
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	40 e2       	ldi	r20, 0x20	; 32
    3b9c:	51 e4       	ldi	r21, 0x41	; 65
    3b9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ba2:	dc 01       	movw	r26, r24
    3ba4:	cb 01       	movw	r24, r22
    3ba6:	bc 01       	movw	r22, r24
    3ba8:	cd 01       	movw	r24, r26
    3baa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bae:	dc 01       	movw	r26, r24
    3bb0:	cb 01       	movw	r24, r22
    3bb2:	9a a3       	std	Y+34, r25	; 0x22
    3bb4:	89 a3       	std	Y+33, r24	; 0x21
    3bb6:	0f c0       	rjmp	.+30     	; 0x3bd6 <main+0x1bf4>
    3bb8:	80 e9       	ldi	r24, 0x90	; 144
    3bba:	91 e0       	ldi	r25, 0x01	; 1
    3bbc:	98 a3       	std	Y+32, r25	; 0x20
    3bbe:	8f 8f       	std	Y+31, r24	; 0x1f
    3bc0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bc2:	98 a1       	ldd	r25, Y+32	; 0x20
    3bc4:	01 97       	sbiw	r24, 0x01	; 1
    3bc6:	f1 f7       	brne	.-4      	; 0x3bc4 <main+0x1be2>
    3bc8:	98 a3       	std	Y+32, r25	; 0x20
    3bca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bcc:	89 a1       	ldd	r24, Y+33	; 0x21
    3bce:	9a a1       	ldd	r25, Y+34	; 0x22
    3bd0:	01 97       	sbiw	r24, 0x01	; 1
    3bd2:	9a a3       	std	Y+34, r25	; 0x22
    3bd4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bd6:	89 a1       	ldd	r24, Y+33	; 0x21
    3bd8:	9a a1       	ldd	r25, Y+34	; 0x22
    3bda:	00 97       	sbiw	r24, 0x00	; 0
    3bdc:	69 f7       	brne	.-38     	; 0x3bb8 <main+0x1bd6>
    3bde:	14 c0       	rjmp	.+40     	; 0x3c08 <main+0x1c26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3be0:	6b a1       	ldd	r22, Y+35	; 0x23
    3be2:	7c a1       	ldd	r23, Y+36	; 0x24
    3be4:	8d a1       	ldd	r24, Y+37	; 0x25
    3be6:	9e a1       	ldd	r25, Y+38	; 0x26
    3be8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bec:	dc 01       	movw	r26, r24
    3bee:	cb 01       	movw	r24, r22
    3bf0:	9a a3       	std	Y+34, r25	; 0x22
    3bf2:	89 a3       	std	Y+33, r24	; 0x21
    3bf4:	89 a1       	ldd	r24, Y+33	; 0x21
    3bf6:	9a a1       	ldd	r25, Y+34	; 0x22
    3bf8:	9e 8f       	std	Y+30, r25	; 0x1e
    3bfa:	8d 8f       	std	Y+29, r24	; 0x1d
    3bfc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bfe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c00:	01 97       	sbiw	r24, 0x01	; 1
    3c02:	f1 f7       	brne	.-4      	; 0x3c00 <main+0x1c1e>
    3c04:	9e 8f       	std	Y+30, r25	; 0x1e
    3c06:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(400);
				LCD_CLEAR();
    3c08:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_CLEAR>
    3c0c:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <main+0x1f0>
			}
			else
			{
				Display_Str_Row_Col(0,1,"Wrong Password");
    3c10:	26 ed       	ldi	r18, 0xD6	; 214
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	80 e0       	ldi	r24, 0x00	; 0
    3c16:	61 e0       	ldi	r22, 0x01	; 1
    3c18:	a9 01       	movw	r20, r18
    3c1a:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <Display_Str_Row_Col>
    3c1e:	80 e0       	ldi	r24, 0x00	; 0
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	a8 ec       	ldi	r26, 0xC8	; 200
    3c24:	b3 e4       	ldi	r27, 0x43	; 67
    3c26:	89 8f       	std	Y+25, r24	; 0x19
    3c28:	9a 8f       	std	Y+26, r25	; 0x1a
    3c2a:	ab 8f       	std	Y+27, r26	; 0x1b
    3c2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c2e:	69 8d       	ldd	r22, Y+25	; 0x19
    3c30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c36:	20 e0       	ldi	r18, 0x00	; 0
    3c38:	30 e0       	ldi	r19, 0x00	; 0
    3c3a:	4a e7       	ldi	r20, 0x7A	; 122
    3c3c:	55 e4       	ldi	r21, 0x45	; 69
    3c3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c42:	dc 01       	movw	r26, r24
    3c44:	cb 01       	movw	r24, r22
    3c46:	8d 8b       	std	Y+21, r24	; 0x15
    3c48:	9e 8b       	std	Y+22, r25	; 0x16
    3c4a:	af 8b       	std	Y+23, r26	; 0x17
    3c4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c4e:	6d 89       	ldd	r22, Y+21	; 0x15
    3c50:	7e 89       	ldd	r23, Y+22	; 0x16
    3c52:	8f 89       	ldd	r24, Y+23	; 0x17
    3c54:	98 8d       	ldd	r25, Y+24	; 0x18
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	40 e8       	ldi	r20, 0x80	; 128
    3c5c:	5f e3       	ldi	r21, 0x3F	; 63
    3c5e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3c62:	88 23       	and	r24, r24
    3c64:	2c f4       	brge	.+10     	; 0x3c70 <main+0x1c8e>
		__ticks = 1;
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	9c 8b       	std	Y+20, r25	; 0x14
    3c6c:	8b 8b       	std	Y+19, r24	; 0x13
    3c6e:	3f c0       	rjmp	.+126    	; 0x3cee <main+0x1d0c>
	else if (__tmp > 65535)
    3c70:	6d 89       	ldd	r22, Y+21	; 0x15
    3c72:	7e 89       	ldd	r23, Y+22	; 0x16
    3c74:	8f 89       	ldd	r24, Y+23	; 0x17
    3c76:	98 8d       	ldd	r25, Y+24	; 0x18
    3c78:	20 e0       	ldi	r18, 0x00	; 0
    3c7a:	3f ef       	ldi	r19, 0xFF	; 255
    3c7c:	4f e7       	ldi	r20, 0x7F	; 127
    3c7e:	57 e4       	ldi	r21, 0x47	; 71
    3c80:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3c84:	18 16       	cp	r1, r24
    3c86:	4c f5       	brge	.+82     	; 0x3cda <main+0x1cf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c88:	69 8d       	ldd	r22, Y+25	; 0x19
    3c8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	40 e2       	ldi	r20, 0x20	; 32
    3c96:	51 e4       	ldi	r21, 0x41	; 65
    3c98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c9c:	dc 01       	movw	r26, r24
    3c9e:	cb 01       	movw	r24, r22
    3ca0:	bc 01       	movw	r22, r24
    3ca2:	cd 01       	movw	r24, r26
    3ca4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ca8:	dc 01       	movw	r26, r24
    3caa:	cb 01       	movw	r24, r22
    3cac:	9c 8b       	std	Y+20, r25	; 0x14
    3cae:	8b 8b       	std	Y+19, r24	; 0x13
    3cb0:	0f c0       	rjmp	.+30     	; 0x3cd0 <main+0x1cee>
    3cb2:	80 e9       	ldi	r24, 0x90	; 144
    3cb4:	91 e0       	ldi	r25, 0x01	; 1
    3cb6:	9a 8b       	std	Y+18, r25	; 0x12
    3cb8:	89 8b       	std	Y+17, r24	; 0x11
    3cba:	89 89       	ldd	r24, Y+17	; 0x11
    3cbc:	9a 89       	ldd	r25, Y+18	; 0x12
    3cbe:	01 97       	sbiw	r24, 0x01	; 1
    3cc0:	f1 f7       	brne	.-4      	; 0x3cbe <main+0x1cdc>
    3cc2:	9a 8b       	std	Y+18, r25	; 0x12
    3cc4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cc6:	8b 89       	ldd	r24, Y+19	; 0x13
    3cc8:	9c 89       	ldd	r25, Y+20	; 0x14
    3cca:	01 97       	sbiw	r24, 0x01	; 1
    3ccc:	9c 8b       	std	Y+20, r25	; 0x14
    3cce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd0:	8b 89       	ldd	r24, Y+19	; 0x13
    3cd2:	9c 89       	ldd	r25, Y+20	; 0x14
    3cd4:	00 97       	sbiw	r24, 0x00	; 0
    3cd6:	69 f7       	brne	.-38     	; 0x3cb2 <main+0x1cd0>
    3cd8:	14 c0       	rjmp	.+40     	; 0x3d02 <main+0x1d20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cda:	6d 89       	ldd	r22, Y+21	; 0x15
    3cdc:	7e 89       	ldd	r23, Y+22	; 0x16
    3cde:	8f 89       	ldd	r24, Y+23	; 0x17
    3ce0:	98 8d       	ldd	r25, Y+24	; 0x18
    3ce2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ce6:	dc 01       	movw	r26, r24
    3ce8:	cb 01       	movw	r24, r22
    3cea:	9c 8b       	std	Y+20, r25	; 0x14
    3cec:	8b 8b       	std	Y+19, r24	; 0x13
    3cee:	8b 89       	ldd	r24, Y+19	; 0x13
    3cf0:	9c 89       	ldd	r25, Y+20	; 0x14
    3cf2:	98 8b       	std	Y+16, r25	; 0x10
    3cf4:	8f 87       	std	Y+15, r24	; 0x0f
    3cf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cf8:	98 89       	ldd	r25, Y+16	; 0x10
    3cfa:	01 97       	sbiw	r24, 0x01	; 1
    3cfc:	f1 f7       	brne	.-4      	; 0x3cfa <main+0x1d18>
    3cfe:	98 8b       	std	Y+16, r25	; 0x10
    3d00:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(400);
				LCD_CLEAR();
    3d02:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_CLEAR>
				Comp_Pass = 0;
    3d06:	fe 01       	movw	r30, r28
    3d08:	e2 5f       	subi	r30, 0xF2	; 242
    3d0a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d0c:	11 82       	std	Z+1, r1	; 0x01
    3d0e:	10 82       	st	Z, r1
    3d10:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <main+0x1f0>
			}
		}
		else
		{
			LCD_CLEAR();
    3d14:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_CLEAR>
			Display_Str_Row_Col(0,1,"Invalid Input");
    3d18:	2e ea       	ldi	r18, 0xAE	; 174
    3d1a:	30 e0       	ldi	r19, 0x00	; 0
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	61 e0       	ldi	r22, 0x01	; 1
    3d20:	a9 01       	movw	r20, r18
    3d22:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <Display_Str_Row_Col>
    3d26:	80 e0       	ldi	r24, 0x00	; 0
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	a8 ec       	ldi	r26, 0xC8	; 200
    3d2c:	b3 e4       	ldi	r27, 0x43	; 67
    3d2e:	8b 87       	std	Y+11, r24	; 0x0b
    3d30:	9c 87       	std	Y+12, r25	; 0x0c
    3d32:	ad 87       	std	Y+13, r26	; 0x0d
    3d34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d36:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d38:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d3e:	20 e0       	ldi	r18, 0x00	; 0
    3d40:	30 e0       	ldi	r19, 0x00	; 0
    3d42:	4a e7       	ldi	r20, 0x7A	; 122
    3d44:	55 e4       	ldi	r21, 0x45	; 69
    3d46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d4a:	dc 01       	movw	r26, r24
    3d4c:	cb 01       	movw	r24, r22
    3d4e:	8f 83       	std	Y+7, r24	; 0x07
    3d50:	98 87       	std	Y+8, r25	; 0x08
    3d52:	a9 87       	std	Y+9, r26	; 0x09
    3d54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d56:	6f 81       	ldd	r22, Y+7	; 0x07
    3d58:	78 85       	ldd	r23, Y+8	; 0x08
    3d5a:	89 85       	ldd	r24, Y+9	; 0x09
    3d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	40 e8       	ldi	r20, 0x80	; 128
    3d64:	5f e3       	ldi	r21, 0x3F	; 63
    3d66:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3d6a:	88 23       	and	r24, r24
    3d6c:	2c f4       	brge	.+10     	; 0x3d78 <main+0x1d96>
		__ticks = 1;
    3d6e:	81 e0       	ldi	r24, 0x01	; 1
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	9e 83       	std	Y+6, r25	; 0x06
    3d74:	8d 83       	std	Y+5, r24	; 0x05
    3d76:	40 c0       	rjmp	.+128    	; 0x3df8 <main+0x1e16>
	else if (__tmp > 65535)
    3d78:	6f 81       	ldd	r22, Y+7	; 0x07
    3d7a:	78 85       	ldd	r23, Y+8	; 0x08
    3d7c:	89 85       	ldd	r24, Y+9	; 0x09
    3d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d80:	20 e0       	ldi	r18, 0x00	; 0
    3d82:	3f ef       	ldi	r19, 0xFF	; 255
    3d84:	4f e7       	ldi	r20, 0x7F	; 127
    3d86:	57 e4       	ldi	r21, 0x47	; 71
    3d88:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3d8c:	18 16       	cp	r1, r24
    3d8e:	54 f5       	brge	.+84     	; 0x3de4 <main+0x1e02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d90:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d92:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d94:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d96:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d98:	20 e0       	ldi	r18, 0x00	; 0
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	40 e2       	ldi	r20, 0x20	; 32
    3d9e:	51 e4       	ldi	r21, 0x41	; 65
    3da0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3da4:	dc 01       	movw	r26, r24
    3da6:	cb 01       	movw	r24, r22
    3da8:	bc 01       	movw	r22, r24
    3daa:	cd 01       	movw	r24, r26
    3dac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3db0:	dc 01       	movw	r26, r24
    3db2:	cb 01       	movw	r24, r22
    3db4:	9e 83       	std	Y+6, r25	; 0x06
    3db6:	8d 83       	std	Y+5, r24	; 0x05
    3db8:	0f c0       	rjmp	.+30     	; 0x3dd8 <main+0x1df6>
    3dba:	80 e9       	ldi	r24, 0x90	; 144
    3dbc:	91 e0       	ldi	r25, 0x01	; 1
    3dbe:	9c 83       	std	Y+4, r25	; 0x04
    3dc0:	8b 83       	std	Y+3, r24	; 0x03
    3dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    3dc6:	01 97       	sbiw	r24, 0x01	; 1
    3dc8:	f1 f7       	brne	.-4      	; 0x3dc6 <main+0x1de4>
    3dca:	9c 83       	std	Y+4, r25	; 0x04
    3dcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dce:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd2:	01 97       	sbiw	r24, 0x01	; 1
    3dd4:	9e 83       	std	Y+6, r25	; 0x06
    3dd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dda:	9e 81       	ldd	r25, Y+6	; 0x06
    3ddc:	00 97       	sbiw	r24, 0x00	; 0
    3dde:	69 f7       	brne	.-38     	; 0x3dba <main+0x1dd8>
    3de0:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <main+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3de4:	6f 81       	ldd	r22, Y+7	; 0x07
    3de6:	78 85       	ldd	r23, Y+8	; 0x08
    3de8:	89 85       	ldd	r24, Y+9	; 0x09
    3dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3df0:	dc 01       	movw	r26, r24
    3df2:	cb 01       	movw	r24, r22
    3df4:	9e 83       	std	Y+6, r25	; 0x06
    3df6:	8d 83       	std	Y+5, r24	; 0x05
    3df8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    3dfc:	9a 83       	std	Y+2, r25	; 0x02
    3dfe:	89 83       	std	Y+1, r24	; 0x01
    3e00:	89 81       	ldd	r24, Y+1	; 0x01
    3e02:	9a 81       	ldd	r25, Y+2	; 0x02
    3e04:	01 97       	sbiw	r24, 0x01	; 1
    3e06:	f1 f7       	brne	.-4      	; 0x3e04 <main+0x1e22>
    3e08:	9a 83       	std	Y+2, r25	; 0x02
    3e0a:	89 83       	std	Y+1, r24	; 0x01
    3e0c:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <main+0x1f0>

00003e10 <__udivmodhi4>:
    3e10:	aa 1b       	sub	r26, r26
    3e12:	bb 1b       	sub	r27, r27
    3e14:	51 e1       	ldi	r21, 0x11	; 17
    3e16:	07 c0       	rjmp	.+14     	; 0x3e26 <__udivmodhi4_ep>

00003e18 <__udivmodhi4_loop>:
    3e18:	aa 1f       	adc	r26, r26
    3e1a:	bb 1f       	adc	r27, r27
    3e1c:	a6 17       	cp	r26, r22
    3e1e:	b7 07       	cpc	r27, r23
    3e20:	10 f0       	brcs	.+4      	; 0x3e26 <__udivmodhi4_ep>
    3e22:	a6 1b       	sub	r26, r22
    3e24:	b7 0b       	sbc	r27, r23

00003e26 <__udivmodhi4_ep>:
    3e26:	88 1f       	adc	r24, r24
    3e28:	99 1f       	adc	r25, r25
    3e2a:	5a 95       	dec	r21
    3e2c:	a9 f7       	brne	.-22     	; 0x3e18 <__udivmodhi4_loop>
    3e2e:	80 95       	com	r24
    3e30:	90 95       	com	r25
    3e32:	bc 01       	movw	r22, r24
    3e34:	cd 01       	movw	r24, r26
    3e36:	08 95       	ret

00003e38 <__prologue_saves__>:
    3e38:	2f 92       	push	r2
    3e3a:	3f 92       	push	r3
    3e3c:	4f 92       	push	r4
    3e3e:	5f 92       	push	r5
    3e40:	6f 92       	push	r6
    3e42:	7f 92       	push	r7
    3e44:	8f 92       	push	r8
    3e46:	9f 92       	push	r9
    3e48:	af 92       	push	r10
    3e4a:	bf 92       	push	r11
    3e4c:	cf 92       	push	r12
    3e4e:	df 92       	push	r13
    3e50:	ef 92       	push	r14
    3e52:	ff 92       	push	r15
    3e54:	0f 93       	push	r16
    3e56:	1f 93       	push	r17
    3e58:	cf 93       	push	r28
    3e5a:	df 93       	push	r29
    3e5c:	cd b7       	in	r28, 0x3d	; 61
    3e5e:	de b7       	in	r29, 0x3e	; 62
    3e60:	ca 1b       	sub	r28, r26
    3e62:	db 0b       	sbc	r29, r27
    3e64:	0f b6       	in	r0, 0x3f	; 63
    3e66:	f8 94       	cli
    3e68:	de bf       	out	0x3e, r29	; 62
    3e6a:	0f be       	out	0x3f, r0	; 63
    3e6c:	cd bf       	out	0x3d, r28	; 61
    3e6e:	09 94       	ijmp

00003e70 <__epilogue_restores__>:
    3e70:	2a 88       	ldd	r2, Y+18	; 0x12
    3e72:	39 88       	ldd	r3, Y+17	; 0x11
    3e74:	48 88       	ldd	r4, Y+16	; 0x10
    3e76:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e78:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e7a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e7c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e7e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e80:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e82:	b9 84       	ldd	r11, Y+9	; 0x09
    3e84:	c8 84       	ldd	r12, Y+8	; 0x08
    3e86:	df 80       	ldd	r13, Y+7	; 0x07
    3e88:	ee 80       	ldd	r14, Y+6	; 0x06
    3e8a:	fd 80       	ldd	r15, Y+5	; 0x05
    3e8c:	0c 81       	ldd	r16, Y+4	; 0x04
    3e8e:	1b 81       	ldd	r17, Y+3	; 0x03
    3e90:	aa 81       	ldd	r26, Y+2	; 0x02
    3e92:	b9 81       	ldd	r27, Y+1	; 0x01
    3e94:	ce 0f       	add	r28, r30
    3e96:	d1 1d       	adc	r29, r1
    3e98:	0f b6       	in	r0, 0x3f	; 63
    3e9a:	f8 94       	cli
    3e9c:	de bf       	out	0x3e, r29	; 62
    3e9e:	0f be       	out	0x3f, r0	; 63
    3ea0:	cd bf       	out	0x3d, r28	; 61
    3ea2:	ed 01       	movw	r28, r26
    3ea4:	08 95       	ret

00003ea6 <itoa>:
    3ea6:	fb 01       	movw	r30, r22
    3ea8:	9f 01       	movw	r18, r30
    3eaa:	e8 94       	clt
    3eac:	42 30       	cpi	r20, 0x02	; 2
    3eae:	c4 f0       	brlt	.+48     	; 0x3ee0 <itoa+0x3a>
    3eb0:	45 32       	cpi	r20, 0x25	; 37
    3eb2:	b4 f4       	brge	.+44     	; 0x3ee0 <itoa+0x3a>
    3eb4:	4a 30       	cpi	r20, 0x0A	; 10
    3eb6:	29 f4       	brne	.+10     	; 0x3ec2 <itoa+0x1c>
    3eb8:	97 fb       	bst	r25, 7
    3eba:	1e f4       	brtc	.+6      	; 0x3ec2 <itoa+0x1c>
    3ebc:	90 95       	com	r25
    3ebe:	81 95       	neg	r24
    3ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ec2:	64 2f       	mov	r22, r20
    3ec4:	77 27       	eor	r23, r23
    3ec6:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <__udivmodhi4>
    3eca:	80 5d       	subi	r24, 0xD0	; 208
    3ecc:	8a 33       	cpi	r24, 0x3A	; 58
    3ece:	0c f0       	brlt	.+2      	; 0x3ed2 <itoa+0x2c>
    3ed0:	89 5d       	subi	r24, 0xD9	; 217
    3ed2:	81 93       	st	Z+, r24
    3ed4:	cb 01       	movw	r24, r22
    3ed6:	00 97       	sbiw	r24, 0x00	; 0
    3ed8:	a1 f7       	brne	.-24     	; 0x3ec2 <itoa+0x1c>
    3eda:	16 f4       	brtc	.+4      	; 0x3ee0 <itoa+0x3a>
    3edc:	5d e2       	ldi	r21, 0x2D	; 45
    3ede:	51 93       	st	Z+, r21
    3ee0:	10 82       	st	Z, r1
    3ee2:	c9 01       	movw	r24, r18
    3ee4:	0c 94 74 1f 	jmp	0x3ee8	; 0x3ee8 <strrev>

00003ee8 <strrev>:
    3ee8:	dc 01       	movw	r26, r24
    3eea:	fc 01       	movw	r30, r24
    3eec:	67 2f       	mov	r22, r23
    3eee:	71 91       	ld	r23, Z+
    3ef0:	77 23       	and	r23, r23
    3ef2:	e1 f7       	brne	.-8      	; 0x3eec <strrev+0x4>
    3ef4:	32 97       	sbiw	r30, 0x02	; 2
    3ef6:	04 c0       	rjmp	.+8      	; 0x3f00 <strrev+0x18>
    3ef8:	7c 91       	ld	r23, X
    3efa:	6d 93       	st	X+, r22
    3efc:	70 83       	st	Z, r23
    3efe:	62 91       	ld	r22, -Z
    3f00:	ae 17       	cp	r26, r30
    3f02:	bf 07       	cpc	r27, r31
    3f04:	c8 f3       	brcs	.-14     	; 0x3ef8 <strrev+0x10>
    3f06:	08 95       	ret

00003f08 <_exit>:
    3f08:	f8 94       	cli

00003f0a <__stop_program>:
    3f0a:	ff cf       	rjmp	.-2      	; 0x3f0a <__stop_program>
